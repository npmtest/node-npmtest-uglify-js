{"/home/travis/build/npmtest/node-npmtest-uglify-js/test.js":"/* istanbul instrument in package npmtest_uglify_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-uglify-js/lib.npmtest_uglify_js.js":"/* istanbul instrument in package npmtest_uglify_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_uglify_js = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_uglify_js = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-uglify-js/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-uglify-js && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_uglify_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_uglify_js\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_uglify_js.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_uglify_js.rollup.js'] =\n            local.assetsDict['/assets.npmtest_uglify_js.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_uglify_js.__dirname + '/lib.npmtest_uglify_js.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-uglify-js/node_modules/uglify-js/tools/node.js":"// workaround for tty output truncation upon process.exit()\n[process.stdout, process.stderr].forEach(function(stream){\n    if (stream._handle && stream._handle.setBlocking)\n        stream._handle.setBlocking(true);\n});\n\nvar path = require(\"path\");\nvar fs = require(\"fs\");\n\nvar UglifyJS = exports;\nvar FILES = UglifyJS.FILES = [\n    \"../lib/utils.js\",\n    \"../lib/ast.js\",\n    \"../lib/parse.js\",\n    \"../lib/transform.js\",\n    \"../lib/scope.js\",\n    \"../lib/output.js\",\n    \"../lib/compress.js\",\n    \"../lib/sourcemap.js\",\n    \"../lib/mozilla-ast.js\",\n    \"../lib/propmangle.js\",\n    \"./exports.js\",\n].map(function(file){\n    return require.resolve(file);\n});\n\nnew Function(\"MOZ_SourceMap\", \"exports\", FILES.map(function(file){\n    return fs.readFileSync(file, \"utf8\");\n}).join(\"\\n\\n\"))(\n    require(\"source-map\"),\n    UglifyJS\n);\n\nUglifyJS.AST_Node.warn_function = function(txt) {\n    console.error(\"WARN: %s\", txt);\n};\n\nfunction read_source_map(code) {\n    var match = /\\n\\/\\/# sourceMappingURL=data:application\\/json(;.*?)?;base64,(.*)/.exec(code);\n    if (!match) {\n        UglifyJS.AST_Node.warn(\"inline source map not found\");\n        return null;\n    }\n    return JSON.parse(new Buffer(match[2], \"base64\"));\n}\n\nUglifyJS.minify = function(files, options) {\n    options = UglifyJS.defaults(options, {\n        compress         : {},\n        fromString       : false,\n        inSourceMap      : null,\n        mangle           : {},\n        mangleProperties : false,\n        nameCache        : null,\n        outFileName      : null,\n        output           : null,\n        outSourceMap     : null,\n        parse            : {},\n        sourceMapInline  : false,\n        sourceMapUrl     : null,\n        sourceRoot       : null,\n        spidermonkey     : false,\n        warnings         : false,\n    });\n    UglifyJS.base54.reset();\n\n    var inMap = options.inSourceMap;\n    if (typeof inMap == \"string\" && inMap != \"inline\") {\n        inMap = JSON.parse(fs.readFileSync(inMap, \"utf8\"));\n    }\n\n    // 1. parse\n    var toplevel = null,\n        sourcesContent = {};\n\n    if (options.spidermonkey) {\n        if (inMap == \"inline\") {\n            throw new Error(\"inline source map only works with built-in parser\");\n        }\n        toplevel = UglifyJS.AST_Node.from_mozilla_ast(files);\n    } else {\n        function addFile(file, fileUrl) {\n            var code = options.fromString\n                ? file\n                : fs.readFileSync(file, \"utf8\");\n            if (inMap == \"inline\") {\n                inMap = read_source_map(code);\n            }\n            sourcesContent[fileUrl] = code;\n            toplevel = UglifyJS.parse(code, {\n                filename: fileUrl,\n                toplevel: toplevel,\n                bare_returns: options.parse ? options.parse.bare_returns : undefined\n            });\n        }\n        if (!options.fromString) {\n            files = UglifyJS.simple_glob(files);\n            if (inMap == \"inline\" && files.length > 1) {\n                throw new Error(\"inline source map only works with singular input\");\n            }\n        }\n        [].concat(files).forEach(function (files, i) {\n            if (typeof files === 'string') {\n                addFile(files, options.fromString ? i : files);\n            } else {\n                for (var fileUrl in files) {\n                    addFile(files[fileUrl], fileUrl);\n                }\n            }\n        });\n    }\n    if (options.wrap) {\n      toplevel = toplevel.wrap_commonjs(options.wrap, options.exportAll);\n    }\n\n    // 2. compress\n    if (options.compress) {\n        var compress = { warnings: options.warnings };\n        UglifyJS.merge(compress, options.compress);\n        toplevel.figure_out_scope(options.mangle);\n        var sq = UglifyJS.Compressor(compress);\n        toplevel = sq.compress(toplevel);\n    }\n\n    // 3. mangle properties\n    if (options.mangleProperties || options.nameCache) {\n        options.mangleProperties.cache = UglifyJS.readNameCache(options.nameCache, \"props\");\n        toplevel = UglifyJS.mangle_properties(toplevel, options.mangleProperties);\n        UglifyJS.writeNameCache(options.nameCache, \"props\", options.mangleProperties.cache);\n    }\n\n    // 4. mangle\n    if (options.mangle) {\n        toplevel.figure_out_scope(options.mangle);\n        toplevel.compute_char_frequency(options.mangle);\n        toplevel.mangle_names(options.mangle);\n    }\n\n    // 5. output\n    var output = { max_line_len: 32000 };\n    if (options.outSourceMap || options.sourceMapInline) {\n        output.source_map = UglifyJS.SourceMap({\n            // prefer outFileName, otherwise use outSourceMap without .map suffix\n            file: options.outFileName || (typeof options.outSourceMap === 'string' ? options.outSourceMap.replace(/\\.map$/i, '') : null),\n            orig: inMap,\n            root: options.sourceRoot\n        });\n        if (options.sourceMapIncludeSources) {\n            for (var file in sourcesContent) {\n                if (sourcesContent.hasOwnProperty(file)) {\n                    output.source_map.get().setSourceContent(file, sourcesContent[file]);\n                }\n            }\n        }\n\n    }\n    if (options.output) {\n        UglifyJS.merge(output, options.output);\n    }\n    var stream = UglifyJS.OutputStream(output);\n    toplevel.print(stream);\n\n\n    var source_map = output.source_map;\n    if (source_map) {\n        source_map = source_map + \"\";\n    }\n\n    var mappingUrlPrefix = \"\\n//# sourceMappingURL=\";\n    if (options.sourceMapInline) {\n        stream += mappingUrlPrefix + \"data:application/json;charset=utf-8;base64,\" + new Buffer(source_map).toString(\"base64\");\n    } else if (options.outSourceMap && typeof options.outSourceMap === \"string\" && options.sourceMapUrl !== false) {\n        stream += mappingUrlPrefix + (typeof options.sourceMapUrl === \"string\" ? options.sourceMapUrl : options.outSourceMap);\n    }\n\n    return {\n        code : stream + \"\",\n        map  : source_map\n    };\n};\n\n// UglifyJS.describe_ast = function() {\n//     function doitem(ctor) {\n//         var sub = {};\n//         ctor.SUBCLASSES.forEach(function(ctor){\n//             sub[ctor.TYPE] = doitem(ctor);\n//         });\n//         var ret = {};\n//         if (ctor.SELF_PROPS.length > 0) ret.props = ctor.SELF_PROPS;\n//         if (ctor.SUBCLASSES.length > 0) ret.sub = sub;\n//         return ret;\n//     }\n//     return doitem(UglifyJS.AST_Node).sub;\n// }\n\nUglifyJS.describe_ast = function() {\n    var out = UglifyJS.OutputStream({ beautify: true });\n    function doitem(ctor) {\n        out.print(\"AST_\" + ctor.TYPE);\n        var props = ctor.SELF_PROPS.filter(function(prop){\n            return !/^\\$/.test(prop);\n        });\n        if (props.length > 0) {\n            out.space();\n            out.with_parens(function(){\n                props.forEach(function(prop, i){\n                    if (i) out.space();\n                    out.print(prop);\n                });\n            });\n        }\n        if (ctor.documentation) {\n            out.space();\n            out.print_string(ctor.documentation);\n        }\n        if (ctor.SUBCLASSES.length > 0) {\n            out.space();\n            out.with_block(function(){\n                ctor.SUBCLASSES.forEach(function(ctor, i){\n                    out.indent();\n                    doitem(ctor);\n                    out.newline();\n                });\n            });\n        }\n    };\n    doitem(UglifyJS.AST_Node);\n    return out + \"\";\n};\n\nfunction readReservedFile(filename, reserved) {\n    if (!reserved) {\n        reserved = { vars: [], props: [] };\n    }\n    var data = fs.readFileSync(filename, \"utf8\");\n    data = JSON.parse(data);\n    if (data.vars) {\n        data.vars.forEach(function(name){\n            UglifyJS.push_uniq(reserved.vars, name);\n        });\n    }\n    if (data.props) {\n        data.props.forEach(function(name){\n            UglifyJS.push_uniq(reserved.props, name);\n        });\n    }\n    return reserved;\n}\n\nUglifyJS.readReservedFile = readReservedFile;\n\nUglifyJS.readDefaultReservedFile = function(reserved) {\n    return readReservedFile(require.resolve(\"./domprops.json\"), reserved);\n};\n\nUglifyJS.readNameCache = function(filename, key) {\n    var cache = null;\n    if (filename) {\n        try {\n            var cache = fs.readFileSync(filename, \"utf8\");\n            cache = JSON.parse(cache)[key];\n            if (!cache) throw \"init\";\n            cache.props = UglifyJS.Dictionary.fromObject(cache.props);\n        } catch(ex) {\n            cache = {\n                cname: -1,\n                props: new UglifyJS.Dictionary()\n            };\n        }\n    }\n    return cache;\n};\n\nUglifyJS.writeNameCache = function(filename, key, cache) {\n    if (filename) {\n        var data;\n        try {\n            data = fs.readFileSync(filename, \"utf8\");\n            data = JSON.parse(data);\n        } catch(ex) {\n            data = {};\n        }\n        data[key] = {\n            cname: cache.cname,\n            props: cache.props.toObject()\n        };\n        fs.writeFileSync(filename, JSON.stringify(data, null, 2), \"utf8\");\n    }\n};\n\n// A file glob function that only supports \"*\" and \"?\" wildcards in the basename.\n// Example: \"foo/bar/*baz??.*.js\"\n// Argument `glob` may be a string or an array of strings.\n// Returns an array of strings. Garbage in, garbage out.\nUglifyJS.simple_glob = function simple_glob(glob) {\n    if (Array.isArray(glob)) {\n        return [].concat.apply([], glob.map(simple_glob));\n    }\n    if (glob.match(/\\*|\\?/)) {\n        var dir = path.dirname(glob);\n        try {\n            var entries = fs.readdirSync(dir);\n        } catch (ex) {}\n        if (entries) {\n            var pattern = \"^\" + path.basename(glob)\n                .replace(/[.+^$[\\]\\\\(){}]/g, \"\\\\$&\")\n                .replace(/\\*/g, \"[^/\\\\\\\\]*\")\n                .replace(/\\?/g, \"[^/\\\\\\\\]\") + \"$\";\n            var mod = process.platform === \"win32\" ? \"i\" : \"\";\n            var rx = new RegExp(pattern, mod);\n            var results = entries.filter(function(name) {\n                return rx.test(name);\n            }).map(function(name) {\n                return path.join(dir, name);\n            });\n            if (results.length) return results;\n        }\n    }\n    return [ glob ];\n};\n","/home/travis/build/npmtest/node-npmtest-uglify-js/node_modules/uglify-js/bin/extract-props.js":"#! /usr/bin/env node\n\n\"use strict\";\n\nvar U2 = require(\"../tools/node\");\nvar fs = require(\"fs\");\nvar yargs = require(\"yargs\");\nvar ARGS = yargs\n    .describe(\"o\", \"Output file\")\n    .argv;\nvar files = ARGS._.slice();\nvar output = {\n    vars: {},\n    props: {}\n};\n\nif (ARGS.o) try {\n    output = JSON.parse(fs.readFileSync(ARGS.o, \"utf8\"));\n} catch(ex) {}\n\nfiles.forEach(getProps);\n\nif (ARGS.o) {\n    fs.writeFileSync(ARGS.o, JSON.stringify(output, null, 2), \"utf8\");\n} else {\n    console.log(\"%s\", JSON.stringify(output, null, 2));\n}\n\nfunction getProps(filename) {\n    var code = fs.readFileSync(filename, \"utf8\");\n    var ast = U2.parse(code);\n\n    ast.walk(new U2.TreeWalker(function(node){\n        if (node instanceof U2.AST_ObjectKeyVal) {\n            add(node.key);\n        }\n        else if (node instanceof U2.AST_ObjectProperty) {\n            add(node.key.name);\n        }\n        else if (node instanceof U2.AST_Dot) {\n            add(node.property);\n        }\n        else if (node instanceof U2.AST_Sub) {\n            addStrings(node.property);\n        }\n    }));\n\n    function addStrings(node) {\n        var out = {};\n        try {\n            (function walk(node){\n                node.walk(new U2.TreeWalker(function(node){\n                    if (node instanceof U2.AST_Seq) {\n                        walk(node.cdr);\n                        return true;\n                    }\n                    if (node instanceof U2.AST_String) {\n                        add(node.value);\n                        return true;\n                    }\n                    if (node instanceof U2.AST_Conditional) {\n                        walk(node.consequent);\n                        walk(node.alternative);\n                        return true;\n                    }\n                    throw out;\n                }));\n            })(node);\n        } catch(ex) {\n            if (ex !== out) throw ex;\n        }\n    }\n\n    function add(name) {\n        output.props[name] = true;\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-uglify-js/node_modules/uglify-js/lib/ast.js":"/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nfunction DEFNODE(type, props, methods, base) {\n    if (arguments.length < 4) base = AST_Node;\n    if (!props) props = [];\n    else props = props.split(/\\s+/);\n    var self_props = props;\n    if (base && base.PROPS)\n        props = props.concat(base.PROPS);\n    var code = \"return function AST_\" + type + \"(props){ if (props) { \";\n    for (var i = props.length; --i >= 0;) {\n        code += \"this.\" + props[i] + \" = props.\" + props[i] + \";\";\n    }\n    var proto = base && new base;\n    if (proto && proto.initialize || (methods && methods.initialize))\n        code += \"this.initialize();\";\n    code += \"}}\";\n    var ctor = new Function(code)();\n    if (proto) {\n        ctor.prototype = proto;\n        ctor.BASE = base;\n    }\n    if (base) base.SUBCLASSES.push(ctor);\n    ctor.prototype.CTOR = ctor;\n    ctor.PROPS = props || null;\n    ctor.SELF_PROPS = self_props;\n    ctor.SUBCLASSES = [];\n    if (type) {\n        ctor.prototype.TYPE = ctor.TYPE = type;\n    }\n    if (methods) for (i in methods) if (HOP(methods, i)) {\n        if (/^\\$/.test(i)) {\n            ctor[i.substr(1)] = methods[i];\n        } else {\n            ctor.prototype[i] = methods[i];\n        }\n    }\n    ctor.DEFMETHOD = function(name, method) {\n        this.prototype[name] = method;\n    };\n    if (typeof exports !== \"undefined\") {\n        exports[\"AST_\" + type] = ctor;\n    }\n    return ctor;\n};\n\nvar AST_Token = DEFNODE(\"Token\", \"type value line col pos endline endcol endpos nlb comments_before file raw\", {\n}, null);\n\nvar AST_Node = DEFNODE(\"Node\", \"start end\", {\n    _clone: function(deep) {\n        if (deep) {\n            var self = this.clone();\n            return self.transform(new TreeTransformer(function(node) {\n                if (node !== self) {\n                    return node.clone(true);\n                }\n            }));\n        }\n        return new this.CTOR(this);\n    },\n    clone: function(deep) {\n        return this._clone(deep);\n    },\n    $documentation: \"Base class of all AST nodes\",\n    $propdoc: {\n        start: \"[AST_Token] The first token of this node\",\n        end: \"[AST_Token] The last token of this node\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this);\n    },\n    walk: function(visitor) {\n        return this._walk(visitor); // not sure the indirection will be any help\n    }\n}, null);\n\nAST_Node.warn_function = null;\nAST_Node.warn = function(txt, props) {\n    if (AST_Node.warn_function)\n        AST_Node.warn_function(string_template(txt, props));\n};\n\n/* -----[ statements ]----- */\n\nvar AST_Statement = DEFNODE(\"Statement\", null, {\n    $documentation: \"Base class of all statements\",\n});\n\nvar AST_Debugger = DEFNODE(\"Debugger\", null, {\n    $documentation: \"Represents a debugger statement\",\n}, AST_Statement);\n\nvar AST_Directive = DEFNODE(\"Directive\", \"value scope quote\", {\n    $documentation: \"Represents a directive, like \\\"use strict\\\";\",\n    $propdoc: {\n        value: \"[string] The value of this directive as a plain string (it's not an AST_String!)\",\n        scope: \"[AST_Scope/S] The scope that this directive affects\",\n        quote: \"[string] the original quote character\"\n    },\n}, AST_Statement);\n\nvar AST_SimpleStatement = DEFNODE(\"SimpleStatement\", \"body\", {\n    $documentation: \"A statement consisting of an expression, i.e. a = 1 + 2\",\n    $propdoc: {\n        body: \"[AST_Node] an expression node (should not be instanceof AST_Statement)\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.body._walk(visitor);\n        });\n    }\n}, AST_Statement);\n\nfunction walk_body(node, visitor) {\n    var body = node.body;\n    if (body instanceof AST_Statement) {\n        body._walk(visitor);\n    }\n    else for (var i = 0, len = body.length; i < len; i++) {\n        body[i]._walk(visitor);\n    }\n};\n\nvar AST_Block = DEFNODE(\"Block\", \"body\", {\n    $documentation: \"A body of statements (usually bracketed)\",\n    $propdoc: {\n        body: \"[AST_Statement*] an array of statements\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            walk_body(this, visitor);\n        });\n    }\n}, AST_Statement);\n\nvar AST_BlockStatement = DEFNODE(\"BlockStatement\", null, {\n    $documentation: \"A block statement\",\n}, AST_Block);\n\nvar AST_EmptyStatement = DEFNODE(\"EmptyStatement\", null, {\n    $documentation: \"The empty statement (empty block or simply a semicolon)\",\n    _walk: function(visitor) {\n        return visitor._visit(this);\n    }\n}, AST_Statement);\n\nvar AST_StatementWithBody = DEFNODE(\"StatementWithBody\", \"body\", {\n    $documentation: \"Base class for all statements that contain one nested body: `For`, `ForIn`, `Do`, `While`, `With`\",\n    $propdoc: {\n        body: \"[AST_Statement] the body; this should always be present, even if it's an AST_EmptyStatement\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.body._walk(visitor);\n        });\n    }\n}, AST_Statement);\n\nvar AST_LabeledStatement = DEFNODE(\"LabeledStatement\", \"label\", {\n    $documentation: \"Statement with a label\",\n    $propdoc: {\n        label: \"[AST_Label] a label definition\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.label._walk(visitor);\n            this.body._walk(visitor);\n        });\n    },\n    clone: function(deep) {\n        var node = this._clone(deep);\n        if (deep) {\n            var refs = node.label.references;\n            var label = this.label;\n            node.walk(new TreeWalker(function(node) {\n                if (node instanceof AST_LoopControl\n                    && node.label && node.label.thedef === label) {\n                    refs.push(node);\n                }\n            }));\n        }\n        return node;\n    }\n}, AST_StatementWithBody);\n\nvar AST_IterationStatement = DEFNODE(\"IterationStatement\", null, {\n    $documentation: \"Internal class.  All loops inherit from it.\"\n}, AST_StatementWithBody);\n\nvar AST_DWLoop = DEFNODE(\"DWLoop\", \"condition\", {\n    $documentation: \"Base class for do/while statements\",\n    $propdoc: {\n        condition: \"[AST_Node] the loop condition.  Should not be instanceof AST_Statement\"\n    }\n}, AST_IterationStatement);\n\nvar AST_Do = DEFNODE(\"Do\", null, {\n    $documentation: \"A `do` statement\",\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.body._walk(visitor);\n            this.condition._walk(visitor);\n        });\n    }\n}, AST_DWLoop);\n\nvar AST_While = DEFNODE(\"While\", null, {\n    $documentation: \"A `while` statement\",\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.condition._walk(visitor);\n            this.body._walk(visitor);\n        });\n    }\n}, AST_DWLoop);\n\nvar AST_For = DEFNODE(\"For\", \"init condition step\", {\n    $documentation: \"A `for` statement\",\n    $propdoc: {\n        init: \"[AST_Node?] the `for` initialization code, or null if empty\",\n        condition: \"[AST_Node?] the `for` termination clause, or null if empty\",\n        step: \"[AST_Node?] the `for` update clause, or null if empty\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            if (this.init) this.init._walk(visitor);\n            if (this.condition) this.condition._walk(visitor);\n            if (this.step) this.step._walk(visitor);\n            this.body._walk(visitor);\n        });\n    }\n}, AST_IterationStatement);\n\nvar AST_ForIn = DEFNODE(\"ForIn\", \"init name object\", {\n    $documentation: \"A `for ... in` statement\",\n    $propdoc: {\n        init: \"[AST_Node] the `for/in` initialization code\",\n        name: \"[AST_SymbolRef?] the loop variable, only if `init` is AST_Var\",\n        object: \"[AST_Node] the object that we're looping through\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.init._walk(visitor);\n            this.object._walk(visitor);\n            this.body._walk(visitor);\n        });\n    }\n}, AST_IterationStatement);\n\nvar AST_With = DEFNODE(\"With\", \"expression\", {\n    $documentation: \"A `with` statement\",\n    $propdoc: {\n        expression: \"[AST_Node] the `with` expression\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.expression._walk(visitor);\n            this.body._walk(visitor);\n        });\n    }\n}, AST_StatementWithBody);\n\n/* -----[ scope and functions ]----- */\n\nvar AST_Scope = DEFNODE(\"Scope\", \"directives variables functions uses_with uses_eval parent_scope enclosed cname\", {\n    $documentation: \"Base class for all statements introducing a lexical scope\",\n    $propdoc: {\n        directives: \"[string*/S] an array of directives declared in this scope\",\n        variables: \"[Object/S] a map of name -> SymbolDef for all variables/functions defined in this scope\",\n        functions: \"[Object/S] like `variables`, but only lists function declarations\",\n        uses_with: \"[boolean/S] tells whether this scope uses the `with` statement\",\n        uses_eval: \"[boolean/S] tells whether this scope contains a direct call to the global `eval`\",\n        parent_scope: \"[AST_Scope?/S] link to the parent scope\",\n        enclosed: \"[SymbolDef*/S] a list of all symbol definitions that are accessed from this scope or any subscopes\",\n        cname: \"[integer/S] current index for mangling variables (used internally by the mangler)\",\n    },\n}, AST_Block);\n\nvar AST_Toplevel = DEFNODE(\"Toplevel\", \"globals\", {\n    $documentation: \"The toplevel scope\",\n    $propdoc: {\n        globals: \"[Object/S] a map of name -> SymbolDef for all undeclared names\",\n    },\n    wrap_enclose: function(arg_parameter_pairs) {\n        var self = this;\n        var args = [];\n        var parameters = [];\n\n        arg_parameter_pairs.forEach(function(pair) {\n            var splitAt = pair.lastIndexOf(\":\");\n\n            args.push(pair.substr(0, splitAt));\n            parameters.push(pair.substr(splitAt + 1));\n        });\n\n        var wrapped_tl = \"(function(\" + parameters.join(\",\") + \"){ '$ORIG'; })(\" + args.join(\",\") + \")\";\n        wrapped_tl = parse(wrapped_tl);\n        wrapped_tl = wrapped_tl.transform(new TreeTransformer(function before(node){\n            if (node instanceof AST_Directive && node.value == \"$ORIG\") {\n                return MAP.splice(self.body);\n            }\n        }));\n        return wrapped_tl;\n    },\n    wrap_commonjs: function(name, export_all) {\n        var self = this;\n        var to_export = [];\n        if (export_all) {\n            self.figure_out_scope();\n            self.walk(new TreeWalker(function(node){\n                if (node instanceof AST_SymbolDeclaration && node.definition().global) {\n                    if (!find_if(function(n){ return n.name == node.name }, to_export))\n                        to_export.push(node);\n                }\n            }));\n        }\n        var wrapped_tl = \"(function(exports, global){ '$ORIG'; '$EXPORTS'; global['\" + name + \"'] = exports; }({}, (function(){return this}())))\";\n        wrapped_tl = parse(wrapped_tl);\n        wrapped_tl = wrapped_tl.transform(new TreeTransformer(function before(node){\n            if (node instanceof AST_Directive) {\n                switch (node.value) {\n                  case \"$ORIG\":\n                    return MAP.splice(self.body);\n                  case \"$EXPORTS\":\n                    var body = [];\n                    to_export.forEach(function(sym){\n                        body.push(new AST_SimpleStatement({\n                            body: new AST_Assign({\n                                left: new AST_Sub({\n                                    expression: new AST_SymbolRef({ name: \"exports\" }),\n                                    property: new AST_String({ value: sym.name }),\n                                }),\n                                operator: \"=\",\n                                right: new AST_SymbolRef(sym),\n                            }),\n                        }));\n                    });\n                    return MAP.splice(body);\n                }\n            }\n        }));\n        return wrapped_tl;\n    }\n}, AST_Scope);\n\nvar AST_Lambda = DEFNODE(\"Lambda\", \"name argnames uses_arguments\", {\n    $documentation: \"Base class for functions\",\n    $propdoc: {\n        name: \"[AST_SymbolDeclaration?] the name of this function\",\n        argnames: \"[AST_SymbolFunarg*] array of function arguments\",\n        uses_arguments: \"[boolean/S] tells whether this function accesses the arguments array\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            if (this.name) this.name._walk(visitor);\n            var argnames = this.argnames;\n            for (var i = 0, len = argnames.length; i < len; i++) {\n                argnames[i]._walk(visitor);\n            }\n            walk_body(this, visitor);\n        });\n    }\n}, AST_Scope);\n\nvar AST_Accessor = DEFNODE(\"Accessor\", null, {\n    $documentation: \"A setter/getter function.  The `name` property is always null.\"\n}, AST_Lambda);\n\nvar AST_Function = DEFNODE(\"Function\", null, {\n    $documentation: \"A function expression\"\n}, AST_Lambda);\n\nvar AST_Defun = DEFNODE(\"Defun\", null, {\n    $documentation: \"A function definition\"\n}, AST_Lambda);\n\n/* -----[ JUMPS ]----- */\n\nvar AST_Jump = DEFNODE(\"Jump\", null, {\n    $documentation: \"Base class for “jumps” (for now that's `return`, `throw`, `break` and `continue`)\"\n}, AST_Statement);\n\nvar AST_Exit = DEFNODE(\"Exit\", \"value\", {\n    $documentation: \"Base class for “exits” (`return` and `throw`)\",\n    $propdoc: {\n        value: \"[AST_Node?] the value returned or thrown by this statement; could be null for AST_Return\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, this.value && function(){\n            this.value._walk(visitor);\n        });\n    }\n}, AST_Jump);\n\nvar AST_Return = DEFNODE(\"Return\", null, {\n    $documentation: \"A `return` statement\"\n}, AST_Exit);\n\nvar AST_Throw = DEFNODE(\"Throw\", null, {\n    $documentation: \"A `throw` statement\"\n}, AST_Exit);\n\nvar AST_LoopControl = DEFNODE(\"LoopControl\", \"label\", {\n    $documentation: \"Base class for loop control statements (`break` and `continue`)\",\n    $propdoc: {\n        label: \"[AST_LabelRef?] the label, or null if none\",\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, this.label && function(){\n            this.label._walk(visitor);\n        });\n    }\n}, AST_Jump);\n\nvar AST_Break = DEFNODE(\"Break\", null, {\n    $documentation: \"A `break` statement\"\n}, AST_LoopControl);\n\nvar AST_Continue = DEFNODE(\"Continue\", null, {\n    $documentation: \"A `continue` statement\"\n}, AST_LoopControl);\n\n/* -----[ IF ]----- */\n\nvar AST_If = DEFNODE(\"If\", \"condition alternative\", {\n    $documentation: \"A `if` statement\",\n    $propdoc: {\n        condition: \"[AST_Node] the `if` condition\",\n        alternative: \"[AST_Statement?] the `else` part, or null if not present\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.condition._walk(visitor);\n            this.body._walk(visitor);\n            if (this.alternative) this.alternative._walk(visitor);\n        });\n    }\n}, AST_StatementWithBody);\n\n/* -----[ SWITCH ]----- */\n\nvar AST_Switch = DEFNODE(\"Switch\", \"expression\", {\n    $documentation: \"A `switch` statement\",\n    $propdoc: {\n        expression: \"[AST_Node] the `switch` “discriminant”\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.expression._walk(visitor);\n            walk_body(this, visitor);\n        });\n    }\n}, AST_Block);\n\nvar AST_SwitchBranch = DEFNODE(\"SwitchBranch\", null, {\n    $documentation: \"Base class for `switch` branches\",\n}, AST_Block);\n\nvar AST_Default = DEFNODE(\"Default\", null, {\n    $documentation: \"A `default` switch branch\",\n}, AST_SwitchBranch);\n\nvar AST_Case = DEFNODE(\"Case\", \"expression\", {\n    $documentation: \"A `case` switch branch\",\n    $propdoc: {\n        expression: \"[AST_Node] the `case` expression\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.expression._walk(visitor);\n            walk_body(this, visitor);\n        });\n    }\n}, AST_SwitchBranch);\n\n/* -----[ EXCEPTIONS ]----- */\n\nvar AST_Try = DEFNODE(\"Try\", \"bcatch bfinally\", {\n    $documentation: \"A `try` statement\",\n    $propdoc: {\n        bcatch: \"[AST_Catch?] the catch block, or null if not present\",\n        bfinally: \"[AST_Finally?] the finally block, or null if not present\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            walk_body(this, visitor);\n            if (this.bcatch) this.bcatch._walk(visitor);\n            if (this.bfinally) this.bfinally._walk(visitor);\n        });\n    }\n}, AST_Block);\n\nvar AST_Catch = DEFNODE(\"Catch\", \"argname\", {\n    $documentation: \"A `catch` node; only makes sense as part of a `try` statement\",\n    $propdoc: {\n        argname: \"[AST_SymbolCatch] symbol for the exception\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.argname._walk(visitor);\n            walk_body(this, visitor);\n        });\n    }\n}, AST_Block);\n\nvar AST_Finally = DEFNODE(\"Finally\", null, {\n    $documentation: \"A `finally` node; only makes sense as part of a `try` statement\"\n}, AST_Block);\n\n/* -----[ VAR/CONST ]----- */\n\nvar AST_Definitions = DEFNODE(\"Definitions\", \"definitions\", {\n    $documentation: \"Base class for `var` or `const` nodes (variable declarations/initializations)\",\n    $propdoc: {\n        definitions: \"[AST_VarDef*] array of variable definitions\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            var definitions = this.definitions;\n            for (var i = 0, len = definitions.length; i < len; i++) {\n                definitions[i]._walk(visitor);\n            }\n        });\n    }\n}, AST_Statement);\n\nvar AST_Var = DEFNODE(\"Var\", null, {\n    $documentation: \"A `var` statement\"\n}, AST_Definitions);\n\nvar AST_Const = DEFNODE(\"Const\", null, {\n    $documentation: \"A `const` statement\"\n}, AST_Definitions);\n\nvar AST_VarDef = DEFNODE(\"VarDef\", \"name value\", {\n    $documentation: \"A variable declaration; only appears in a AST_Definitions node\",\n    $propdoc: {\n        name: \"[AST_SymbolVar|AST_SymbolConst] name of the variable\",\n        value: \"[AST_Node?] initializer, or null of there's no initializer\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.name._walk(visitor);\n            if (this.value) this.value._walk(visitor);\n        });\n    }\n});\n\n/* -----[ OTHER ]----- */\n\nvar AST_Call = DEFNODE(\"Call\", \"expression args\", {\n    $documentation: \"A function call expression\",\n    $propdoc: {\n        expression: \"[AST_Node] expression to invoke as function\",\n        args: \"[AST_Node*] array of arguments\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.expression._walk(visitor);\n            var args = this.args;\n            for (var i = 0, len = args.length; i < len; i++) {\n                args[i]._walk(visitor);\n            }\n        });\n    }\n});\n\nvar AST_New = DEFNODE(\"New\", null, {\n    $documentation: \"An object instantiation.  Derives from a function call since it has exactly the same properties\"\n}, AST_Call);\n\nvar AST_Seq = DEFNODE(\"Seq\", \"car cdr\", {\n    $documentation: \"A sequence expression (two comma-separated expressions)\",\n    $propdoc: {\n        car: \"[AST_Node] first element in sequence\",\n        cdr: \"[AST_Node] second element in sequence\"\n    },\n    $cons: function(x, y) {\n        var seq = new AST_Seq(x);\n        seq.car = x;\n        seq.cdr = y;\n        return seq;\n    },\n    $from_array: function(array) {\n        if (array.length == 0) return null;\n        if (array.length == 1) return array[0].clone();\n        var list = null;\n        for (var i = array.length; --i >= 0;) {\n            list = AST_Seq.cons(array[i], list);\n        }\n        var p = list;\n        while (p) {\n            if (p.cdr && !p.cdr.cdr) {\n                p.cdr = p.cdr.car;\n                break;\n            }\n            p = p.cdr;\n        }\n        return list;\n    },\n    to_array: function() {\n        var p = this, a = [];\n        while (p) {\n            a.push(p.car);\n            if (p.cdr && !(p.cdr instanceof AST_Seq)) {\n                a.push(p.cdr);\n                break;\n            }\n            p = p.cdr;\n        }\n        return a;\n    },\n    add: function(node) {\n        var p = this;\n        while (p) {\n            if (!(p.cdr instanceof AST_Seq)) {\n                var cell = AST_Seq.cons(p.cdr, node);\n                return p.cdr = cell;\n            }\n            p = p.cdr;\n        }\n    },\n    len: function() {\n        if (this.cdr instanceof AST_Seq) {\n            return this.cdr.len() + 1;\n        } else {\n            return 2;\n        }\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.car._walk(visitor);\n            if (this.cdr) this.cdr._walk(visitor);\n        });\n    }\n});\n\nvar AST_PropAccess = DEFNODE(\"PropAccess\", \"expression property\", {\n    $documentation: \"Base class for property access expressions, i.e. `a.foo` or `a[\\\"foo\\\"]`\",\n    $propdoc: {\n        expression: \"[AST_Node] the “container” expression\",\n        property: \"[AST_Node|string] the property to access.  For AST_Dot this is always a plain string, while for AST_Sub it's an arbitrary AST_Node\"\n    }\n});\n\nvar AST_Dot = DEFNODE(\"Dot\", null, {\n    $documentation: \"A dotted property access expression\",\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.expression._walk(visitor);\n        });\n    }\n}, AST_PropAccess);\n\nvar AST_Sub = DEFNODE(\"Sub\", null, {\n    $documentation: \"Index-style property access, i.e. `a[\\\"foo\\\"]`\",\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.expression._walk(visitor);\n            this.property._walk(visitor);\n        });\n    }\n}, AST_PropAccess);\n\nvar AST_Unary = DEFNODE(\"Unary\", \"operator expression\", {\n    $documentation: \"Base class for unary expressions\",\n    $propdoc: {\n        operator: \"[string] the operator\",\n        expression: \"[AST_Node] expression that this unary operator applies to\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.expression._walk(visitor);\n        });\n    }\n});\n\nvar AST_UnaryPrefix = DEFNODE(\"UnaryPrefix\", null, {\n    $documentation: \"Unary prefix expression, i.e. `typeof i` or `++i`\"\n}, AST_Unary);\n\nvar AST_UnaryPostfix = DEFNODE(\"UnaryPostfix\", null, {\n    $documentation: \"Unary postfix expression, i.e. `i++`\"\n}, AST_Unary);\n\nvar AST_Binary = DEFNODE(\"Binary\", \"left operator right\", {\n    $documentation: \"Binary expression, i.e. `a + b`\",\n    $propdoc: {\n        left: \"[AST_Node] left-hand side expression\",\n        operator: \"[string] the operator\",\n        right: \"[AST_Node] right-hand side expression\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.left._walk(visitor);\n            this.right._walk(visitor);\n        });\n    }\n});\n\nvar AST_Conditional = DEFNODE(\"Conditional\", \"condition consequent alternative\", {\n    $documentation: \"Conditional expression using the ternary operator, i.e. `a ? b : c`\",\n    $propdoc: {\n        condition: \"[AST_Node]\",\n        consequent: \"[AST_Node]\",\n        alternative: \"[AST_Node]\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.condition._walk(visitor);\n            this.consequent._walk(visitor);\n            this.alternative._walk(visitor);\n        });\n    }\n});\n\nvar AST_Assign = DEFNODE(\"Assign\", null, {\n    $documentation: \"An assignment expression — `a = b + 5`\",\n}, AST_Binary);\n\n/* -----[ LITERALS ]----- */\n\nvar AST_Array = DEFNODE(\"Array\", \"elements\", {\n    $documentation: \"An array literal\",\n    $propdoc: {\n        elements: \"[AST_Node*] array of elements\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            var elements = this.elements;\n            for (var i = 0, len = elements.length; i < len; i++) {\n                elements[i]._walk(visitor);\n            }\n        });\n    }\n});\n\nvar AST_Object = DEFNODE(\"Object\", \"properties\", {\n    $documentation: \"An object literal\",\n    $propdoc: {\n        properties: \"[AST_ObjectProperty*] array of properties\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            var properties = this.properties;\n            for (var i = 0, len = properties.length; i < len; i++) {\n                properties[i]._walk(visitor);\n            }\n        });\n    }\n});\n\nvar AST_ObjectProperty = DEFNODE(\"ObjectProperty\", \"key value\", {\n    $documentation: \"Base class for literal object properties\",\n    $propdoc: {\n        key: \"[string] the property name converted to a string for ObjectKeyVal.  For setters and getters this is an arbitrary AST_Node.\",\n        value: \"[AST_Node] property value.  For setters and getters this is an AST_Function.\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.value._walk(visitor);\n        });\n    }\n});\n\nvar AST_ObjectKeyVal = DEFNODE(\"ObjectKeyVal\", \"quote\", {\n    $documentation: \"A key: value object property\",\n    $propdoc: {\n        quote: \"[string] the original quote character\"\n    }\n}, AST_ObjectProperty);\n\nvar AST_ObjectSetter = DEFNODE(\"ObjectSetter\", null, {\n    $documentation: \"An object setter property\",\n}, AST_ObjectProperty);\n\nvar AST_ObjectGetter = DEFNODE(\"ObjectGetter\", null, {\n    $documentation: \"An object getter property\",\n}, AST_ObjectProperty);\n\nvar AST_Symbol = DEFNODE(\"Symbol\", \"scope name thedef\", {\n    $propdoc: {\n        name: \"[string] name of this symbol\",\n        scope: \"[AST_Scope/S] the current scope (not necessarily the definition scope)\",\n        thedef: \"[SymbolDef/S] the definition of this symbol\"\n    },\n    $documentation: \"Base class for all symbols\",\n});\n\nvar AST_SymbolAccessor = DEFNODE(\"SymbolAccessor\", null, {\n    $documentation: \"The name of a property accessor (setter/getter function)\"\n}, AST_Symbol);\n\nvar AST_SymbolDeclaration = DEFNODE(\"SymbolDeclaration\", \"init\", {\n    $documentation: \"A declaration symbol (symbol in var/const, function name or argument, symbol in catch)\",\n}, AST_Symbol);\n\nvar AST_SymbolVar = DEFNODE(\"SymbolVar\", null, {\n    $documentation: \"Symbol defining a variable\",\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolConst = DEFNODE(\"SymbolConst\", null, {\n    $documentation: \"A constant declaration\"\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolFunarg = DEFNODE(\"SymbolFunarg\", null, {\n    $documentation: \"Symbol naming a function argument\",\n}, AST_SymbolVar);\n\nvar AST_SymbolDefun = DEFNODE(\"SymbolDefun\", null, {\n    $documentation: \"Symbol defining a function\",\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolLambda = DEFNODE(\"SymbolLambda\", null, {\n    $documentation: \"Symbol naming a function expression\",\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolCatch = DEFNODE(\"SymbolCatch\", null, {\n    $documentation: \"Symbol naming the exception in catch\",\n}, AST_SymbolDeclaration);\n\nvar AST_Label = DEFNODE(\"Label\", \"references\", {\n    $documentation: \"Symbol naming a label (declaration)\",\n    $propdoc: {\n        references: \"[AST_LoopControl*] a list of nodes referring to this label\"\n    },\n    initialize: function() {\n        this.references = [];\n        this.thedef = this;\n    }\n}, AST_Symbol);\n\nvar AST_SymbolRef = DEFNODE(\"SymbolRef\", null, {\n    $documentation: \"Reference to some symbol (not definition/declaration)\",\n}, AST_Symbol);\n\nvar AST_LabelRef = DEFNODE(\"LabelRef\", null, {\n    $documentation: \"Reference to a label symbol\",\n}, AST_Symbol);\n\nvar AST_This = DEFNODE(\"This\", null, {\n    $documentation: \"The `this` symbol\",\n}, AST_Symbol);\n\nvar AST_Constant = DEFNODE(\"Constant\", null, {\n    $documentation: \"Base class for all constants\",\n    getValue: function() {\n        return this.value;\n    }\n});\n\nvar AST_String = DEFNODE(\"String\", \"value quote\", {\n    $documentation: \"A string literal\",\n    $propdoc: {\n        value: \"[string] the contents of this string\",\n        quote: \"[string] the original quote character\"\n    }\n}, AST_Constant);\n\nvar AST_Number = DEFNODE(\"Number\", \"value literal\", {\n    $documentation: \"A number literal\",\n    $propdoc: {\n        value: \"[number] the numeric value\",\n        literal: \"[string] numeric value as string (optional)\"\n    }\n}, AST_Constant);\n\nvar AST_RegExp = DEFNODE(\"RegExp\", \"value\", {\n    $documentation: \"A regexp literal\",\n    $propdoc: {\n        value: \"[RegExp] the actual regexp\"\n    }\n}, AST_Constant);\n\nvar AST_Atom = DEFNODE(\"Atom\", null, {\n    $documentation: \"Base class for atoms\",\n}, AST_Constant);\n\nvar AST_Null = DEFNODE(\"Null\", null, {\n    $documentation: \"The `null` atom\",\n    value: null\n}, AST_Atom);\n\nvar AST_NaN = DEFNODE(\"NaN\", null, {\n    $documentation: \"The impossible value\",\n    value: 0/0\n}, AST_Atom);\n\nvar AST_Undefined = DEFNODE(\"Undefined\", null, {\n    $documentation: \"The `undefined` value\",\n    value: (function(){}())\n}, AST_Atom);\n\nvar AST_Hole = DEFNODE(\"Hole\", null, {\n    $documentation: \"A hole in an array\",\n    value: (function(){}())\n}, AST_Atom);\n\nvar AST_Infinity = DEFNODE(\"Infinity\", null, {\n    $documentation: \"The `Infinity` value\",\n    value: 1/0\n}, AST_Atom);\n\nvar AST_Boolean = DEFNODE(\"Boolean\", null, {\n    $documentation: \"Base class for booleans\",\n}, AST_Atom);\n\nvar AST_False = DEFNODE(\"False\", null, {\n    $documentation: \"The `false` atom\",\n    value: false\n}, AST_Boolean);\n\nvar AST_True = DEFNODE(\"True\", null, {\n    $documentation: \"The `true` atom\",\n    value: true\n}, AST_Boolean);\n\n/* -----[ TreeWalker ]----- */\n\nfunction TreeWalker(callback) {\n    this.visit = callback;\n    this.stack = [];\n    this.directives = Object.create(null);\n};\nTreeWalker.prototype = {\n    _visit: function(node, descend) {\n        this.push(node);\n        var ret = this.visit(node, descend ? function(){\n            descend.call(node);\n        } : noop);\n        if (!ret && descend) {\n            descend.call(node);\n        }\n        this.pop(node);\n        return ret;\n    },\n    parent: function(n) {\n        return this.stack[this.stack.length - 2 - (n || 0)];\n    },\n    push: function (node) {\n        if (node instanceof AST_Lambda) {\n            this.directives = Object.create(this.directives);\n        } else if (node instanceof AST_Directive && !this.directives[node.value]) {\n            this.directives[node.value] = node;\n        }\n        this.stack.push(node);\n    },\n    pop: function(node) {\n        this.stack.pop();\n        if (node instanceof AST_Lambda) {\n            this.directives = Object.getPrototypeOf(this.directives);\n        }\n    },\n    self: function() {\n        return this.stack[this.stack.length - 1];\n    },\n    find_parent: function(type) {\n        var stack = this.stack;\n        for (var i = stack.length; --i >= 0;) {\n            var x = stack[i];\n            if (x instanceof type) return x;\n        }\n    },\n    has_directive: function(type) {\n        var dir = this.directives[type];\n        if (dir) return dir;\n        var node = this.stack[this.stack.length - 1];\n        if (node instanceof AST_Scope) {\n            for (var i = 0; i < node.body.length; ++i) {\n                var st = node.body[i];\n                if (!(st instanceof AST_Directive)) break;\n                if (st.value == type) return st;\n            }\n        }\n    },\n    in_boolean_context: function() {\n        var stack = this.stack;\n        var i = stack.length, self = stack[--i];\n        while (i > 0) {\n            var p = stack[--i];\n            if ((p instanceof AST_If           && p.condition === self) ||\n                (p instanceof AST_Conditional  && p.condition === self) ||\n                (p instanceof AST_DWLoop       && p.condition === self) ||\n                (p instanceof AST_For          && p.condition === self) ||\n                (p instanceof AST_UnaryPrefix  && p.operator == \"!\" && p.expression === self))\n            {\n                return true;\n            }\n            if (!(p instanceof AST_Binary && (p.operator == \"&&\" || p.operator == \"||\")))\n                return false;\n            self = p;\n        }\n    },\n    loopcontrol_target: function(node) {\n        var stack = this.stack;\n        if (node.label) for (var i = stack.length; --i >= 0;) {\n            var x = stack[i];\n            if (x instanceof AST_LabeledStatement && x.label.name == node.label.name)\n                return x.body;\n        } else for (var i = stack.length; --i >= 0;) {\n            var x = stack[i];\n            if (x instanceof AST_IterationStatement\n                || node instanceof AST_Break && x instanceof AST_Switch)\n                return x;\n        }\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-uglify-js/node_modules/uglify-js/lib/compress.js":"/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nfunction Compressor(options, false_by_default) {\n    if (!(this instanceof Compressor))\n        return new Compressor(options, false_by_default);\n    TreeTransformer.call(this, this.before, this.after);\n    this.options = defaults(options, {\n        angular       : false,\n        booleans      : !false_by_default,\n        cascade       : !false_by_default,\n        collapse_vars : !false_by_default,\n        comparisons   : !false_by_default,\n        conditionals  : !false_by_default,\n        dead_code     : !false_by_default,\n        drop_console  : false,\n        drop_debugger : !false_by_default,\n        evaluate      : !false_by_default,\n        expression    : false,\n        global_defs   : {},\n        hoist_funs    : !false_by_default,\n        hoist_vars    : false,\n        if_return     : !false_by_default,\n        join_vars     : !false_by_default,\n        keep_fargs    : true,\n        keep_fnames   : false,\n        keep_infinity : false,\n        loops         : !false_by_default,\n        negate_iife   : !false_by_default,\n        passes        : 1,\n        properties    : !false_by_default,\n        pure_getters  : !false_by_default && \"strict\",\n        pure_funcs    : null,\n        reduce_vars   : !false_by_default,\n        screw_ie8     : true,\n        sequences     : !false_by_default,\n        side_effects  : !false_by_default,\n        switches      : !false_by_default,\n        top_retain    : null,\n        toplevel      : !!(options && options[\"top_retain\"]),\n        unsafe        : false,\n        unsafe_comps  : false,\n        unsafe_math   : false,\n        unsafe_proto  : false,\n        unused        : !false_by_default,\n        warnings      : true,\n    }, true);\n    var pure_funcs = this.options[\"pure_funcs\"];\n    if (typeof pure_funcs == \"function\") {\n        this.pure_funcs = pure_funcs;\n    } else {\n        this.pure_funcs = pure_funcs ? function(node) {\n            return pure_funcs.indexOf(node.expression.print_to_string()) < 0;\n        } : return_true;\n    }\n    var top_retain = this.options[\"top_retain\"];\n    if (top_retain instanceof RegExp) {\n        this.top_retain = function(def) {\n            return top_retain.test(def.name);\n        };\n    } else if (typeof top_retain == \"function\") {\n        this.top_retain = top_retain;\n    } else if (top_retain) {\n        if (typeof top_retain == \"string\") {\n            top_retain = top_retain.split(/,/);\n        }\n        this.top_retain = function(def) {\n            return top_retain.indexOf(def.name) >= 0;\n        };\n    }\n    var sequences = this.options[\"sequences\"];\n    this.sequences_limit = sequences == 1 ? 200 : sequences | 0;\n    this.warnings_produced = {};\n};\n\nCompressor.prototype = new TreeTransformer;\nmerge(Compressor.prototype, {\n    option: function(key) { return this.options[key] },\n    compress: function(node) {\n        if (this.option(\"expression\")) {\n            node = node.process_expression(true);\n        }\n        var passes = +this.options.passes || 1;\n        for (var pass = 0; pass < passes && pass < 3; ++pass) {\n            if (pass > 0 || this.option(\"reduce_vars\"))\n                node.reset_opt_flags(this, true);\n            node = node.transform(this);\n        }\n        if (this.option(\"expression\")) {\n            node = node.process_expression(false);\n        }\n        return node;\n    },\n    info: function() {\n        if (this.options.warnings == \"verbose\") {\n            AST_Node.warn.apply(AST_Node, arguments);\n        }\n    },\n    warn: function(text, props) {\n        if (this.options.warnings) {\n            // only emit unique warnings\n            var message = string_template(text, props);\n            if (!(message in this.warnings_produced)) {\n                this.warnings_produced[message] = true;\n                AST_Node.warn.apply(AST_Node, arguments);\n            }\n        }\n    },\n    clear_warnings: function() {\n        this.warnings_produced = {};\n    },\n    before: function(node, descend, in_list) {\n        if (node._squeezed) return node;\n        var was_scope = false;\n        if (node instanceof AST_Scope) {\n            node = node.hoist_declarations(this);\n            was_scope = true;\n        }\n        // Before https://github.com/mishoo/UglifyJS2/pull/1602 AST_Node.optimize()\n        // would call AST_Node.transform() if a different instance of AST_Node is\n        // produced after OPT().\n        // This corrupts TreeWalker.stack, which cause AST look-ups to malfunction.\n        // Migrate and defer all children's AST_Node.transform() to below, which\n        // will now happen after this parent AST_Node has been properly substituted\n        // thus gives a consistent AST snapshot.\n        descend(node, this);\n        // Existing code relies on how AST_Node.optimize() worked, and omitting the\n        // following replacement call would result in degraded efficiency of both\n        // output and performance.\n        descend(node, this);\n        var opt = node.optimize(this);\n        if (was_scope && opt instanceof AST_Scope) {\n            opt.drop_unused(this);\n            descend(opt, this);\n        }\n        if (opt === node) opt._squeezed = true;\n        return opt;\n    }\n});\n\n(function(){\n\n    function OPT(node, optimizer) {\n        node.DEFMETHOD(\"optimize\", function(compressor){\n            var self = this;\n            if (self._optimized) return self;\n            if (compressor.has_directive(\"use asm\")) return self;\n            var opt = optimizer(self, compressor);\n            opt._optimized = true;\n            return opt;\n        });\n    };\n\n    OPT(AST_Node, function(self, compressor){\n        return self;\n    });\n\n    AST_Node.DEFMETHOD(\"equivalent_to\", function(node){\n        return this.TYPE == node.TYPE && this.print_to_string() == node.print_to_string();\n    });\n\n    AST_Node.DEFMETHOD(\"process_expression\", function(insert, compressor) {\n        var self = this;\n        var tt = new TreeTransformer(function(node) {\n            if (insert && node instanceof AST_SimpleStatement) {\n                return make_node(AST_Return, node, {\n                    value: node.body\n                });\n            }\n            if (!insert && node instanceof AST_Return) {\n                if (compressor) {\n                    var value = node.value && node.value.drop_side_effect_free(compressor, true);\n                    return value ? make_node(AST_SimpleStatement, node, {\n                        body: value\n                    }) : make_node(AST_EmptyStatement, node);\n                }\n                return make_node(AST_SimpleStatement, node, {\n                    body: node.value || make_node(AST_UnaryPrefix, node, {\n                        operator: \"void\",\n                        expression: make_node(AST_Number, node, {\n                            value: 0\n                        })\n                    })\n                });\n            }\n            if (node instanceof AST_Lambda && node !== self) {\n                return node;\n            }\n            if (node instanceof AST_Block) {\n                var index = node.body.length - 1;\n                if (index >= 0) {\n                    node.body[index] = node.body[index].transform(tt);\n                }\n            }\n            if (node instanceof AST_If) {\n                node.body = node.body.transform(tt);\n                if (node.alternative) {\n                    node.alternative = node.alternative.transform(tt);\n                }\n            }\n            if (node instanceof AST_With) {\n                node.body = node.body.transform(tt);\n            }\n            return node;\n        });\n        return self.transform(tt);\n    });\n\n    AST_Node.DEFMETHOD(\"reset_opt_flags\", function(compressor, rescan){\n        var reduce_vars = rescan && compressor.option(\"reduce_vars\");\n        var toplevel = compressor.option(\"toplevel\");\n        var safe_ids = Object.create(null);\n        var suppressor = new TreeWalker(function(node) {\n            if (node instanceof AST_Symbol) {\n                var d = node.definition();\n                if (node instanceof AST_SymbolRef) d.references.push(node);\n                d.fixed = false;\n            }\n        });\n        var tw = new TreeWalker(function(node, descend){\n            node._squeezed = false;\n            node._optimized = false;\n            if (reduce_vars) {\n                if (node instanceof AST_Toplevel) node.globals.each(reset_def);\n                if (node instanceof AST_Scope) node.variables.each(reset_def);\n                if (node instanceof AST_SymbolRef) {\n                    var d = node.definition();\n                    d.references.push(node);\n                    if (d.fixed === undefined || !is_safe(d)\n                        || is_modified(node, 0, node.fixed_value() instanceof AST_Lambda)) {\n                        d.fixed = false;\n                    }\n                }\n                if (node instanceof AST_SymbolCatch) {\n                    node.definition().fixed = false;\n                }\n                if (node instanceof AST_VarDef) {\n                    var d = node.name.definition();\n                    if (d.fixed == null) {\n                        if (node.value) {\n                            d.fixed = function() {\n                                return node.value;\n                            };\n                            mark(d, false);\n                            descend();\n                        } else {\n                            d.fixed = null;\n                        }\n                        mark(d, true);\n                        return true;\n                    } else if (node.value) {\n                        d.fixed = false;\n                    }\n                }\n                if (node instanceof AST_Defun) {\n                    var d = node.name.definition();\n                    if (!toplevel && d.global || is_safe(d)) {\n                        d.fixed = false;\n                    } else {\n                        d.fixed = node;\n                        mark(d, true);\n                    }\n                    var save_ids = safe_ids;\n                    safe_ids = Object.create(null);\n                    descend();\n                    safe_ids = save_ids;\n                    return true;\n                }\n                var iife;\n                if (node instanceof AST_Function\n                    && !node.name\n                    && (iife = tw.parent()) instanceof AST_Call\n                    && iife.expression === node) {\n                    // Virtually turn IIFE parameters into variable definitions:\n                    //   (function(a,b) {...})(c,d) => (function() {var a=c,b=d; ...})()\n                    // So existing transformation rules can work on them.\n                    node.argnames.forEach(function(arg, i) {\n                        var d = arg.definition();\n                        d.fixed = function() {\n                            return iife.args[i] || make_node(AST_Undefined, iife);\n                        };\n                        mark(d, true);\n                    });\n                }\n                if (node instanceof AST_If || node instanceof AST_DWLoop) {\n                    node.condition.walk(tw);\n                    push();\n                    node.body.walk(tw);\n                    pop();\n                    if (node.alternative) {\n                        push();\n                        node.alternative.walk(tw);\n                        pop();\n                    }\n                    return true;\n                }\n                if (node instanceof AST_LabeledStatement) {\n                    push();\n                    node.body.walk(tw);\n                    pop();\n                    return true;\n                }\n                if (node instanceof AST_For) {\n                    if (node.init) node.init.walk(tw);\n                    push();\n                    if (node.condition) node.condition.walk(tw);\n                    node.body.walk(tw);\n                    if (node.step) node.step.walk(tw);\n                    pop();\n                    return true;\n                }\n                if (node instanceof AST_ForIn) {\n                    node.init.walk(suppressor);\n                    node.object.walk(tw);\n                    push();\n                    node.body.walk(tw);\n                    pop();\n                    return true;\n                }\n                if (node instanceof AST_Catch || node instanceof AST_SwitchBranch) {\n                    push();\n                    descend();\n                    pop();\n                    return true;\n                }\n            }\n        });\n        this.walk(tw);\n\n        function mark(def, safe) {\n            safe_ids[def.id] = safe;\n        }\n\n        function is_safe(def) {\n            if (safe_ids[def.id]) {\n                if (def.fixed == null) {\n                    var orig = def.orig[0];\n                    if (orig instanceof AST_SymbolFunarg || orig.name == \"arguments\") return false;\n                    def.fixed = make_node(AST_Undefined, orig);\n                }\n                return true;\n            }\n        }\n\n        function push() {\n            safe_ids = Object.create(safe_ids);\n        }\n\n        function pop() {\n            safe_ids = Object.getPrototypeOf(safe_ids);\n        }\n\n        function reset_def(def) {\n            if (toplevel || !def.global || def.orig[0] instanceof AST_SymbolConst) {\n                def.fixed = undefined;\n            } else {\n                def.fixed = false;\n            }\n            def.references = [];\n            def.should_replace = undefined;\n        }\n\n        function is_modified(node, level, func) {\n            var parent = tw.parent(level);\n            if (is_lhs(node, parent)\n                || !func && parent instanceof AST_Call && parent.expression === node) {\n                return true;\n            } else if (parent instanceof AST_PropAccess && parent.expression === node) {\n                return !func && is_modified(parent, level + 1);\n            }\n        }\n    });\n\n    AST_SymbolRef.DEFMETHOD(\"fixed_value\", function() {\n        var fixed = this.definition().fixed;\n        if (!fixed || fixed instanceof AST_Node) return fixed;\n        return fixed();\n    });\n\n    function find_variable(compressor, name) {\n        var scope, i = 0;\n        while (scope = compressor.parent(i++)) {\n            if (scope instanceof AST_Scope) break;\n            if (scope instanceof AST_Catch) {\n                scope = scope.argname.definition().scope;\n                break;\n            }\n        }\n        return scope.find_variable(name);\n    }\n\n    function make_node(ctor, orig, props) {\n        if (!props) props = {};\n        if (orig) {\n            if (!props.start) props.start = orig.start;\n            if (!props.end) props.end = orig.end;\n        }\n        return new ctor(props);\n    };\n\n    function make_node_from_constant(val, orig) {\n        switch (typeof val) {\n          case \"string\":\n            return make_node(AST_String, orig, {\n                value: val\n            });\n          case \"number\":\n            if (isNaN(val)) return make_node(AST_NaN, orig);\n            if (isFinite(val)) {\n                return 1 / val < 0 ? make_node(AST_UnaryPrefix, orig, {\n                    operator: \"-\",\n                    expression: make_node(AST_Number, orig, { value: -val })\n                }) : make_node(AST_Number, orig, { value: val });\n            }\n            return val < 0 ? make_node(AST_UnaryPrefix, orig, {\n                operator: \"-\",\n                expression: make_node(AST_Infinity, orig)\n            }) : make_node(AST_Infinity, orig);\n          case \"boolean\":\n            return make_node(val ? AST_True : AST_False, orig);\n          case \"undefined\":\n            return make_node(AST_Undefined, orig);\n          default:\n            if (val === null) {\n                return make_node(AST_Null, orig, { value: null });\n            }\n            if (val instanceof RegExp) {\n                return make_node(AST_RegExp, orig, { value: val });\n            }\n            throw new Error(string_template(\"Can't handle constant of type: {type}\", {\n                type: typeof val\n            }));\n        }\n    };\n\n    // we shouldn't compress (1,func)(something) to\n    // func(something) because that changes the meaning of\n    // the func (becomes lexical instead of global).\n    function maintain_this_binding(parent, orig, val) {\n        if (parent instanceof AST_UnaryPrefix && parent.operator == \"delete\"\n            || parent instanceof AST_Call && parent.expression === orig\n                && (val instanceof AST_PropAccess || val instanceof AST_SymbolRef && val.name == \"eval\")) {\n            return make_node(AST_Seq, orig, {\n                car: make_node(AST_Number, orig, {\n                    value: 0\n                }),\n                cdr: val\n            });\n        }\n        return val;\n    }\n\n    function as_statement_array(thing) {\n        if (thing === null) return [];\n        if (thing instanceof AST_BlockStatement) return thing.body;\n        if (thing instanceof AST_EmptyStatement) return [];\n        if (thing instanceof AST_Statement) return [ thing ];\n        throw new Error(\"Can't convert thing to statement array\");\n    };\n\n    function is_empty(thing) {\n        if (thing === null) return true;\n        if (thing instanceof AST_EmptyStatement) return true;\n        if (thing instanceof AST_BlockStatement) return thing.body.length == 0;\n        return false;\n    };\n\n    function loop_body(x) {\n        if (x instanceof AST_Switch) return x;\n        if (x instanceof AST_For || x instanceof AST_ForIn || x instanceof AST_DWLoop) {\n            return (x.body instanceof AST_BlockStatement ? x.body : x);\n        }\n        return x;\n    };\n\n    function is_iife_call(node) {\n        if (node instanceof AST_Call && !(node instanceof AST_New)) {\n            return node.expression instanceof AST_Function || is_iife_call(node.expression);\n        }\n        return false;\n    }\n\n    function tighten_body(statements, compressor) {\n        var CHANGED, max_iter = 10;\n        do {\n            CHANGED = false;\n            if (compressor.option(\"angular\")) {\n                statements = process_for_angular(statements);\n            }\n            statements = eliminate_spurious_blocks(statements);\n            if (compressor.option(\"dead_code\")) {\n                statements = eliminate_dead_code(statements, compressor);\n            }\n            if (compressor.option(\"if_return\")) {\n                statements = handle_if_return(statements, compressor);\n            }\n            if (compressor.sequences_limit > 0) {\n                statements = sequencesize(statements, compressor);\n            }\n            if (compressor.option(\"join_vars\")) {\n                statements = join_consecutive_vars(statements, compressor);\n            }\n            if (compressor.option(\"collapse_vars\")) {\n                statements = collapse_single_use_vars(statements, compressor);\n            }\n        } while (CHANGED && max_iter-- > 0);\n\n        return statements;\n\n        function collapse_single_use_vars(statements, compressor) {\n            // Iterate statements backwards looking for a statement with a var/const\n            // declaration immediately preceding it. Grab the rightmost var definition\n            // and if it has exactly one reference then attempt to replace its reference\n            // in the statement with the var value and then erase the var definition.\n\n            var self = compressor.self();\n            var var_defs_removed = false;\n            var toplevel = compressor.option(\"toplevel\");\n            for (var stat_index = statements.length; --stat_index >= 0;) {\n                var stat = statements[stat_index];\n                if (stat instanceof AST_Definitions) continue;\n\n                // Process child blocks of statement if present.\n                [stat, stat.body, stat.alternative, stat.bcatch, stat.bfinally].forEach(function(node) {\n                    node && node.body && collapse_single_use_vars(node.body, compressor);\n                });\n\n                // The variable definition must precede a statement.\n                if (stat_index <= 0) break;\n                var prev_stat_index = stat_index - 1;\n                var prev_stat = statements[prev_stat_index];\n                if (!(prev_stat instanceof AST_Definitions)) continue;\n                var var_defs = prev_stat.definitions;\n                if (var_defs == null) continue;\n\n                var var_names_seen = {};\n                var side_effects_encountered = false;\n                var lvalues_encountered = false;\n                var lvalues = {};\n\n                // Scan variable definitions from right to left.\n                for (var var_defs_index = var_defs.length; --var_defs_index >= 0;) {\n\n                    // Obtain var declaration and var name with basic sanity check.\n                    var var_decl = var_defs[var_defs_index];\n                    if (var_decl.value == null) break;\n                    var var_name = var_decl.name.name;\n                    if (!var_name || !var_name.length) break;\n\n                    // Bail if we've seen a var definition of same name before.\n                    if (var_name in var_names_seen) break;\n                    var_names_seen[var_name] = true;\n\n                    // Only interested in cases with just one reference to the variable.\n                    var def = self.find_variable && self.find_variable(var_name);\n                    if (!def || !def.references || def.references.length !== 1\n                        || var_name == \"arguments\" || (!toplevel && def.global)) {\n                        side_effects_encountered = true;\n                        continue;\n                    }\n                    var ref = def.references[0];\n\n                    // Don't replace ref if eval() or with statement in scope.\n                    if (ref.scope.uses_eval || ref.scope.uses_with) break;\n\n                    // Constant single use vars can be replaced in any scope.\n                    if (var_decl.value.is_constant()) {\n                        var ctt = new TreeTransformer(function(node) {\n                            var parent = ctt.parent();\n                            if (parent instanceof AST_IterationStatement\n                                && (parent.condition === node || parent.init === node)) {\n                                return node;\n                            }\n                            if (node === ref)\n                                return replace_var(node, parent, true);\n                        });\n                        stat.transform(ctt);\n                        continue;\n                    }\n\n                    // Restrict var replacement to constants if side effects encountered.\n                    if (side_effects_encountered |= lvalues_encountered) continue;\n\n                    var value_has_side_effects = var_decl.value.has_side_effects(compressor);\n                    // Non-constant single use vars can only be replaced in same scope.\n                    if (ref.scope !== self) {\n                        side_effects_encountered |= value_has_side_effects;\n                        continue;\n                    }\n\n                    // Detect lvalues in var value.\n                    var tw = new TreeWalker(function(node){\n                        if (node instanceof AST_SymbolRef && is_lvalue(node, tw.parent())) {\n                            lvalues[node.name] = lvalues_encountered = true;\n                        }\n                    });\n                    var_decl.value.walk(tw);\n\n                    // Replace the non-constant single use var in statement if side effect free.\n                    var unwind = false;\n                    var tt = new TreeTransformer(\n                        function preorder(node) {\n                            if (unwind) return node;\n                            var parent = tt.parent();\n                            if (node instanceof AST_Lambda\n                                || node instanceof AST_Try\n                                || node instanceof AST_With\n                                || node instanceof AST_Case\n                                || node instanceof AST_IterationStatement\n                                || (parent instanceof AST_If          && node !== parent.condition)\n                                || (parent instanceof AST_Conditional && node !== parent.condition)\n                                || (node instanceof AST_SymbolRef\n                                    && value_has_side_effects\n                                    && !are_references_in_scope(node.definition(), self))\n                                || (parent instanceof AST_Binary\n                                    && (parent.operator == \"&&\" || parent.operator == \"||\")\n                                    && node === parent.right)\n                                || (parent instanceof AST_Switch && node !== parent.expression)) {\n                                return side_effects_encountered = unwind = true, node;\n                            }\n                            function are_references_in_scope(def, scope) {\n                                if (def.orig.length === 1\n                                    && def.orig[0] instanceof AST_SymbolDefun) return true;\n                                if (def.scope !== scope) return false;\n                                var refs = def.references;\n                                for (var i = 0, len = refs.length; i < len; i++) {\n                                    if (refs[i].scope !== scope) return false;\n                                }\n                                return true;\n                            }\n                        },\n                        function postorder(node) {\n                            if (unwind) return node;\n                            if (node === ref)\n                                return unwind = true, replace_var(node, tt.parent(), false);\n                            if (side_effects_encountered |= node.has_side_effects(compressor))\n                                return unwind = true, node;\n                            if (lvalues_encountered && node instanceof AST_SymbolRef && node.name in lvalues) {\n                                side_effects_encountered = true;\n                                return unwind = true, node;\n                            }\n                        }\n                    );\n                    stat.transform(tt);\n                }\n            }\n\n            // Remove extraneous empty statments in block after removing var definitions.\n            // Leave at least one statement in `statements`.\n            if (var_defs_removed) for (var i = statements.length; --i >= 0;) {\n                if (statements.length > 1 && statements[i] instanceof AST_EmptyStatement)\n                    statements.splice(i, 1);\n            }\n\n            return statements;\n\n            function is_lvalue(node, parent) {\n                return node instanceof AST_SymbolRef && is_lhs(node, parent);\n            }\n            function replace_var(node, parent, is_constant) {\n                if (is_lvalue(node, parent)) return node;\n\n                // Remove var definition and return its value to the TreeTransformer to replace.\n                var value = maintain_this_binding(parent, node, var_decl.value);\n                var_decl.value = null;\n\n                var_defs.splice(var_defs_index, 1);\n                if (var_defs.length === 0) {\n                    statements[prev_stat_index] = make_node(AST_EmptyStatement, self);\n                    var_defs_removed = true;\n                }\n                // Further optimize statement after substitution.\n                stat.reset_opt_flags(compressor);\n\n                compressor.info(\"Collapsing \" + (is_constant ? \"constant\" : \"variable\") +\n                    \" \" + var_name + \" [{file}:{line},{col}]\", node.start);\n                CHANGED = true;\n                return value;\n            }\n        }\n\n        function process_for_angular(statements) {\n            function has_inject(comment) {\n                return /@ngInject/.test(comment.value);\n            }\n            function make_arguments_names_list(func) {\n                return func.argnames.map(function(sym){\n                    return make_node(AST_String, sym, { value: sym.name });\n                });\n            }\n            function make_array(orig, elements) {\n                return make_node(AST_Array, orig, { elements: elements });\n            }\n            function make_injector(func, name) {\n                return make_node(AST_SimpleStatement, func, {\n                    body: make_node(AST_Assign, func, {\n                        operator: \"=\",\n                        left: make_node(AST_Dot, name, {\n                            expression: make_node(AST_SymbolRef, name, name),\n                            property: \"$inject\"\n                        }),\n                        right: make_array(func, make_arguments_names_list(func))\n                    })\n                });\n            }\n            function check_expression(body) {\n                if (body && body.args) {\n                    // if this is a function call check all of arguments passed\n                    body.args.forEach(function(argument, index, array) {\n                        var comments = argument.start.comments_before;\n                        // if the argument is function preceded by @ngInject\n                        if (argument instanceof AST_Lambda && comments.length && has_inject(comments[0])) {\n                            // replace the function with an array of names of its parameters and function at the end\n                            array[index] = make_array(argument, make_arguments_names_list(argument).concat(argument));\n                        }\n                    });\n                    // if this is chained call check previous one recursively\n                    if (body.expression && body.expression.expression) {\n                        check_expression(body.expression.expression);\n                    }\n                }\n            }\n            return statements.reduce(function(a, stat){\n                a.push(stat);\n\n                if (stat.body && stat.body.args) {\n                    check_expression(stat.body);\n                } else {\n                    var token = stat.start;\n                    var comments = token.comments_before;\n                    if (comments && comments.length > 0) {\n                        var last = comments.pop();\n                        if (has_inject(last)) {\n                            // case 1: defun\n                            if (stat instanceof AST_Defun) {\n                                a.push(make_injector(stat, stat.name));\n                            }\n                            else if (stat instanceof AST_Definitions) {\n                                stat.definitions.forEach(function(def) {\n                                    if (def.value && def.value instanceof AST_Lambda) {\n                                        a.push(make_injector(def.value, def.name));\n                                    }\n                                });\n                            }\n                            else {\n                                compressor.warn(\"Unknown statement marked with @ngInject [{file}:{line},{col}]\", token);\n                            }\n                        }\n                    }\n                }\n\n                return a;\n            }, []);\n        }\n\n        function eliminate_spurious_blocks(statements) {\n            var seen_dirs = [];\n            return statements.reduce(function(a, stat){\n                if (stat instanceof AST_BlockStatement) {\n                    CHANGED = true;\n                    a.push.apply(a, eliminate_spurious_blocks(stat.body));\n                } else if (stat instanceof AST_EmptyStatement) {\n                    CHANGED = true;\n                } else if (stat instanceof AST_Directive) {\n                    if (seen_dirs.indexOf(stat.value) < 0) {\n                        a.push(stat);\n                        seen_dirs.push(stat.value);\n                    } else {\n                        CHANGED = true;\n                    }\n                } else {\n                    a.push(stat);\n                }\n                return a;\n            }, []);\n        };\n\n        function handle_if_return(statements, compressor) {\n            var self = compressor.self();\n            var multiple_if_returns = has_multiple_if_returns(statements);\n            var in_lambda = self instanceof AST_Lambda;\n            var ret = []; // Optimized statements, build from tail to front\n            loop: for (var i = statements.length; --i >= 0;) {\n                var stat = statements[i];\n                switch (true) {\n                  case (in_lambda && stat instanceof AST_Return && !stat.value && ret.length == 0):\n                    CHANGED = true;\n                    // note, ret.length is probably always zero\n                    // because we drop unreachable code before this\n                    // step.  nevertheless, it's good to check.\n                    continue loop;\n                  case stat instanceof AST_If:\n                    if (stat.body instanceof AST_Return) {\n                        //---\n                        // pretty silly case, but:\n                        // if (foo()) return; return; ==> foo(); return;\n                        if (((in_lambda && ret.length == 0)\n                             || (ret[0] instanceof AST_Return && !ret[0].value))\n                            && !stat.body.value && !stat.alternative) {\n                            CHANGED = true;\n                            var cond = make_node(AST_SimpleStatement, stat.condition, {\n                                body: stat.condition\n                            });\n                            ret.unshift(cond);\n                            continue loop;\n                        }\n                        //---\n                        // if (foo()) return x; return y; ==> return foo() ? x : y;\n                        if (ret[0] instanceof AST_Return && stat.body.value && ret[0].value && !stat.alternative) {\n                            CHANGED = true;\n                            stat = stat.clone();\n                            stat.alternative = ret[0];\n                            ret[0] = stat.transform(compressor);\n                            continue loop;\n                        }\n                        //---\n                        // if (foo()) return x; [ return ; ] ==> return foo() ? x : undefined;\n                        if (multiple_if_returns && (ret.length == 0 || ret[0] instanceof AST_Return)\n                            && stat.body.value && !stat.alternative && in_lambda) {\n                            CHANGED = true;\n                            stat = stat.clone();\n                            stat.alternative = ret[0] || make_node(AST_Return, stat, {\n                                value: null\n                            });\n                            ret[0] = stat.transform(compressor);\n                            continue loop;\n                        }\n                        //---\n                        // if (foo()) return; [ else x... ]; y... ==> if (!foo()) { x...; y... }\n                        if (!stat.body.value && in_lambda) {\n                            CHANGED = true;\n                            stat = stat.clone();\n                            stat.condition = stat.condition.negate(compressor);\n                            var body = as_statement_array(stat.alternative).concat(ret);\n                            var funs = extract_functions_from_statement_array(body);\n                            stat.body = make_node(AST_BlockStatement, stat, {\n                                body: body\n                            });\n                            stat.alternative = null;\n                            ret = funs.concat([ stat.transform(compressor) ]);\n                            continue loop;\n                        }\n\n                        //---\n                        // if (a) return b; if (c) return d; e; ==> return a ? b : c ? d : void e;\n                        //\n                        // if sequences is not enabled, this can lead to an endless loop (issue #866).\n                        // however, with sequences on this helps producing slightly better output for\n                        // the example code.\n                        if (compressor.option(\"sequences\")\n                            && i > 0 && statements[i - 1] instanceof AST_If && statements[i - 1].body instanceof AST_Return\n                            && ret.length == 1 && in_lambda && ret[0] instanceof AST_SimpleStatement\n                            && !stat.alternative) {\n                            CHANGED = true;\n                            ret.push(make_node(AST_Return, ret[0], {\n                                value: null\n                            }).transform(compressor));\n                            ret.unshift(stat);\n                            continue loop;\n                        }\n                    }\n\n                    var ab = aborts(stat.body);\n                    var lct = ab instanceof AST_LoopControl ? compressor.loopcontrol_target(ab) : null;\n                    if (ab && ((ab instanceof AST_Return && !ab.value && in_lambda)\n                               || (ab instanceof AST_Continue && self === loop_body(lct))\n                               || (ab instanceof AST_Break && lct instanceof AST_BlockStatement && self === lct))) {\n                        if (ab.label) {\n                            remove(ab.label.thedef.references, ab);\n                        }\n                        CHANGED = true;\n                        var body = as_statement_array(stat.body).slice(0, -1);\n                        stat = stat.clone();\n                        stat.condition = stat.condition.negate(compressor);\n                        stat.body = make_node(AST_BlockStatement, stat, {\n                            body: as_statement_array(stat.alternative).concat(ret)\n                        });\n                        stat.alternative = make_node(AST_BlockStatement, stat, {\n                            body: body\n                        });\n                        ret = [ stat.transform(compressor) ];\n                        continue loop;\n                    }\n\n                    var ab = aborts(stat.alternative);\n                    var lct = ab instanceof AST_LoopControl ? compressor.loopcontrol_target(ab) : null;\n                    if (ab && ((ab instanceof AST_Return && !ab.value && in_lambda)\n                               || (ab instanceof AST_Continue && self === loop_body(lct))\n                               || (ab instanceof AST_Break && lct instanceof AST_BlockStatement && self === lct))) {\n                        if (ab.label) {\n                            remove(ab.label.thedef.references, ab);\n                        }\n                        CHANGED = true;\n                        stat = stat.clone();\n                        stat.body = make_node(AST_BlockStatement, stat.body, {\n                            body: as_statement_array(stat.body).concat(ret)\n                        });\n                        stat.alternative = make_node(AST_BlockStatement, stat.alternative, {\n                            body: as_statement_array(stat.alternative).slice(0, -1)\n                        });\n                        ret = [ stat.transform(compressor) ];\n                        continue loop;\n                    }\n\n                    ret.unshift(stat);\n                    break;\n                  default:\n                    ret.unshift(stat);\n                    break;\n                }\n            }\n            return ret;\n\n            function has_multiple_if_returns(statements) {\n                var n = 0;\n                for (var i = statements.length; --i >= 0;) {\n                    var stat = statements[i];\n                    if (stat instanceof AST_If && stat.body instanceof AST_Return) {\n                        if (++n > 1) return true;\n                    }\n                }\n                return false;\n            }\n        };\n\n        function eliminate_dead_code(statements, compressor) {\n            var has_quit = false;\n            var orig = statements.length;\n            var self = compressor.self();\n            statements = statements.reduce(function(a, stat){\n                if (has_quit) {\n                    extract_declarations_from_unreachable_code(compressor, stat, a);\n                } else {\n                    if (stat instanceof AST_LoopControl) {\n                        var lct = compressor.loopcontrol_target(stat);\n                        if ((stat instanceof AST_Break\n                             && !(lct instanceof AST_IterationStatement)\n                             && loop_body(lct) === self) || (stat instanceof AST_Continue\n                                                             && loop_body(lct) === self)) {\n                            if (stat.label) {\n                                remove(stat.label.thedef.references, stat);\n                            }\n                        } else {\n                            a.push(stat);\n                        }\n                    } else {\n                        a.push(stat);\n                    }\n                    if (aborts(stat)) has_quit = true;\n                }\n                return a;\n            }, []);\n            CHANGED = statements.length != orig;\n            return statements;\n        };\n\n        function sequencesize(statements, compressor) {\n            if (statements.length < 2) return statements;\n            var seq = [], ret = [];\n            function push_seq() {\n                seq = AST_Seq.from_array(seq);\n                if (seq) ret.push(make_node(AST_SimpleStatement, seq, {\n                    body: seq\n                }));\n                seq = [];\n            };\n            statements.forEach(function(stat){\n                if (stat instanceof AST_SimpleStatement) {\n                    if (seqLength(seq) >= compressor.sequences_limit) push_seq();\n                    var body = stat.body;\n                    if (seq.length > 0) body = body.drop_side_effect_free(compressor);\n                    if (body) seq.push(body);\n                } else {\n                    push_seq();\n                    ret.push(stat);\n                }\n            });\n            push_seq();\n            ret = sequencesize_2(ret, compressor);\n            CHANGED = ret.length != statements.length;\n            return ret;\n        };\n\n        function seqLength(a) {\n            for (var len = 0, i = 0; i < a.length; ++i) {\n                var stat = a[i];\n                if (stat instanceof AST_Seq) {\n                    len += stat.len();\n                } else {\n                    len++;\n                }\n            }\n            return len;\n        };\n\n        function sequencesize_2(statements, compressor) {\n            function cons_seq(right) {\n                ret.pop();\n                var left = prev.body;\n                if (left instanceof AST_Seq) {\n                    left.add(right);\n                } else {\n                    left = AST_Seq.cons(left, right);\n                }\n                return left.transform(compressor);\n            };\n            var ret = [], prev = null;\n            statements.forEach(function(stat){\n                if (prev) {\n                    if (stat instanceof AST_For) {\n                        var opera = {};\n                        try {\n                            prev.body.walk(new TreeWalker(function(node){\n                                if (node instanceof AST_Binary && node.operator == \"in\")\n                                    throw opera;\n                            }));\n                            if (stat.init && !(stat.init instanceof AST_Definitions)) {\n                                stat.init = cons_seq(stat.init);\n                            }\n                            else if (!stat.init) {\n                                stat.init = prev.body.drop_side_effect_free(compressor);\n                                ret.pop();\n                            }\n                        } catch(ex) {\n                            if (ex !== opera) throw ex;\n                        }\n                    }\n                    else if (stat instanceof AST_If) {\n                        stat.condition = cons_seq(stat.condition);\n                    }\n                    else if (stat instanceof AST_With) {\n                        stat.expression = cons_seq(stat.expression);\n                    }\n                    else if (stat instanceof AST_Exit && stat.value) {\n                        stat.value = cons_seq(stat.value);\n                    }\n                    else if (stat instanceof AST_Exit) {\n                        stat.value = cons_seq(make_node(AST_Undefined, stat).transform(compressor));\n                    }\n                    else if (stat instanceof AST_Switch) {\n                        stat.expression = cons_seq(stat.expression);\n                    }\n                }\n                ret.push(stat);\n                prev = stat instanceof AST_SimpleStatement ? stat : null;\n            });\n            return ret;\n        };\n\n        function join_consecutive_vars(statements, compressor) {\n            var prev = null;\n            return statements.reduce(function(a, stat){\n                if (stat instanceof AST_Definitions && prev && prev.TYPE == stat.TYPE) {\n                    prev.definitions = prev.definitions.concat(stat.definitions);\n                    CHANGED = true;\n                }\n                else if (stat instanceof AST_For\n                         && prev instanceof AST_Var\n                         && (!stat.init || stat.init.TYPE == prev.TYPE)) {\n                    CHANGED = true;\n                    a.pop();\n                    if (stat.init) {\n                        stat.init.definitions = prev.definitions.concat(stat.init.definitions);\n                    } else {\n                        stat.init = prev;\n                    }\n                    a.push(stat);\n                    prev = stat;\n                }\n                else {\n                    prev = stat;\n                    a.push(stat);\n                }\n                return a;\n            }, []);\n        };\n\n    };\n\n    function extract_functions_from_statement_array(statements) {\n        var funs = [];\n        for (var i = statements.length - 1; i >= 0; --i) {\n            var stat = statements[i];\n            if (stat instanceof AST_Defun) {\n                statements.splice(i, 1);\n                funs.unshift(stat);\n            }\n        }\n        return funs;\n    }\n\n    function extract_declarations_from_unreachable_code(compressor, stat, target) {\n        if (!(stat instanceof AST_Defun)) {\n            compressor.warn(\"Dropping unreachable code [{file}:{line},{col}]\", stat.start);\n        }\n        stat.walk(new TreeWalker(function(node){\n            if (node instanceof AST_Definitions) {\n                compressor.warn(\"Declarations in unreachable code! [{file}:{line},{col}]\", node.start);\n                node.remove_initializers();\n                target.push(node);\n                return true;\n            }\n            if (node instanceof AST_Defun) {\n                target.push(node);\n                return true;\n            }\n            if (node instanceof AST_Scope) {\n                return true;\n            }\n        }));\n    };\n\n    function is_undefined(node, compressor) {\n        return node.is_undefined\n            || node instanceof AST_Undefined\n            || node instanceof AST_UnaryPrefix\n                && node.operator == \"void\"\n                && !node.expression.has_side_effects(compressor);\n    }\n\n    // may_eq_null()\n    // returns true if this node may evaluate to null or undefined\n    (function(def) {\n        AST_Node.DEFMETHOD(\"may_eq_null\", function(compressor) {\n            var pure_getters = compressor.option(\"pure_getters\");\n            return !pure_getters || this._eq_null(pure_getters);\n        });\n\n        function is_strict(pure_getters) {\n            return /strict/.test(pure_getters);\n        }\n\n        def(AST_Node, is_strict);\n        def(AST_Null, return_true);\n        def(AST_Undefined, return_true);\n        def(AST_Constant, return_false);\n        def(AST_Array, return_false);\n        def(AST_Object, return_false);\n        def(AST_Function, return_false);\n        def(AST_UnaryPostfix, return_false);\n        def(AST_UnaryPrefix, function() {\n            return this.operator == \"void\";\n        });\n        def(AST_Binary, function(pure_getters) {\n            switch (this.operator) {\n              case \"&&\":\n                return this.left._eq_null(pure_getters);\n              case \"||\":\n                return this.left._eq_null(pure_getters)\n                    && this.right._eq_null(pure_getters);\n              default:\n                return false;\n            }\n        })\n        def(AST_Assign, function(pure_getters) {\n            return this.operator == \"=\"\n                && this.right._eq_null(pure_getters);\n        })\n        def(AST_Conditional, function(pure_getters) {\n            return this.consequent._eq_null(pure_getters)\n                || this.alternative._eq_null(pure_getters);\n        })\n        def(AST_Seq, function(pure_getters) {\n            return this.cdr._eq_null(pure_getters);\n        });\n        def(AST_SymbolRef, function(pure_getters) {\n            if (this.is_undefined) return true;\n            if (!is_strict(pure_getters)) return false;\n            var fixed = this.fixed_value();\n            return !fixed || fixed._eq_null(pure_getters);\n        });\n    })(function(node, func) {\n        node.DEFMETHOD(\"_eq_null\", func);\n    });\n\n    /* -----[ boolean/negation helpers ]----- */\n\n    // methods to determine whether an expression has a boolean result type\n    (function (def){\n        var unary_bool = [ \"!\", \"delete\" ];\n        var binary_bool = [ \"in\", \"instanceof\", \"==\", \"!=\", \"===\", \"!==\", \"<\", \"<=\", \">=\", \">\" ];\n        def(AST_Node, return_false);\n        def(AST_UnaryPrefix, function(){\n            return member(this.operator, unary_bool);\n        });\n        def(AST_Binary, function(){\n            return member(this.operator, binary_bool) ||\n                ( (this.operator == \"&&\" || this.operator == \"||\") &&\n                  this.left.is_boolean() && this.right.is_boolean() );\n        });\n        def(AST_Conditional, function(){\n            return this.consequent.is_boolean() && this.alternative.is_boolean();\n        });\n        def(AST_Assign, function(){\n            return this.operator == \"=\" && this.right.is_boolean();\n        });\n        def(AST_Seq, function(){\n            return this.cdr.is_boolean();\n        });\n        def(AST_True, return_true);\n        def(AST_False, return_true);\n    })(function(node, func){\n        node.DEFMETHOD(\"is_boolean\", func);\n    });\n\n    // methods to determine if an expression has a numeric result type\n    (function (def){\n        def(AST_Node, return_false);\n        def(AST_Number, return_true);\n        var unary = makePredicate(\"+ - ~ ++ --\");\n        def(AST_Unary, function(){\n            return unary(this.operator);\n        });\n        var binary = makePredicate(\"- * / % & | ^ << >> >>>\");\n        def(AST_Binary, function(compressor){\n            return binary(this.operator) || this.operator == \"+\"\n                && this.left.is_number(compressor)\n                && this.right.is_number(compressor);\n        });\n        def(AST_Assign, function(compressor){\n            return binary(this.operator.slice(0, -1))\n                || this.operator == \"=\" && this.right.is_number(compressor);\n        });\n        def(AST_Seq, function(compressor){\n            return this.cdr.is_number(compressor);\n        });\n        def(AST_Conditional, function(compressor){\n            return this.consequent.is_number(compressor) && this.alternative.is_number(compressor);\n        });\n    })(function(node, func){\n        node.DEFMETHOD(\"is_number\", func);\n    });\n\n    // methods to determine if an expression has a string result type\n    (function (def){\n        def(AST_Node, return_false);\n        def(AST_String, return_true);\n        def(AST_UnaryPrefix, function(){\n            return this.operator == \"typeof\";\n        });\n        def(AST_Binary, function(compressor){\n            return this.operator == \"+\" &&\n                (this.left.is_string(compressor) || this.right.is_string(compressor));\n        });\n        def(AST_Assign, function(compressor){\n            return (this.operator == \"=\" || this.operator == \"+=\") && this.right.is_string(compressor);\n        });\n        def(AST_Seq, function(compressor){\n            return this.cdr.is_string(compressor);\n        });\n        def(AST_Conditional, function(compressor){\n            return this.consequent.is_string(compressor) && this.alternative.is_string(compressor);\n        });\n    })(function(node, func){\n        node.DEFMETHOD(\"is_string\", func);\n    });\n\n    var unary_side_effects = makePredicate(\"delete ++ --\");\n\n    function is_lhs(node, parent) {\n        if (parent instanceof AST_Unary && unary_side_effects(parent.operator)) return parent.expression;\n        if (parent instanceof AST_Assign && parent.left === node) return node;\n    }\n\n    (function (def){\n        AST_Node.DEFMETHOD(\"resolve_defines\", function(compressor) {\n            if (!compressor.option(\"global_defs\")) return;\n            var def = this._find_defs(compressor, \"\");\n            if (def) {\n                var node, parent = this, level = 0;\n                do {\n                    node = parent;\n                    parent = compressor.parent(level++);\n                } while (parent instanceof AST_PropAccess && parent.expression === node);\n                if (is_lhs(node, parent)) {\n                    compressor.warn('global_defs ' + this.print_to_string() + ' redefined [{file}:{line},{col}]', this.start);\n                } else {\n                    return def;\n                }\n            }\n        });\n        function to_node(value, orig) {\n            if (value instanceof AST_Node) return make_node(value.CTOR, orig, value);\n            if (Array.isArray(value)) return make_node(AST_Array, orig, {\n                elements: value.map(function(value) {\n                    return to_node(value, orig);\n                })\n            });\n            if (value && typeof value == \"object\") {\n                var props = [];\n                for (var key in value) {\n                    props.push(make_node(AST_ObjectKeyVal, orig, {\n                        key: key,\n                        value: to_node(value[key], orig)\n                    }));\n                }\n                return make_node(AST_Object, orig, {\n                    properties: props\n                });\n            }\n            return make_node_from_constant(value, orig);\n        }\n        def(AST_Node, noop);\n        def(AST_Dot, function(compressor, suffix){\n            return this.expression._find_defs(compressor, \".\" + this.property + suffix);\n        });\n        def(AST_SymbolRef, function(compressor, suffix){\n            if (!this.global()) return;\n            var name;\n            var defines = compressor.option(\"global_defs\");\n            if (defines && HOP(defines, (name = this.name + suffix))) {\n                var node = to_node(defines[name], this);\n                var top = compressor.find_parent(AST_Toplevel);\n                node.walk(new TreeWalker(function(node) {\n                    if (node instanceof AST_SymbolRef) {\n                        node.scope = top;\n                        node.thedef = top.def_global(node);\n                    }\n                }));\n                return node;\n            }\n        });\n    })(function(node, func){\n        node.DEFMETHOD(\"_find_defs\", func);\n    });\n\n    function best_of_expression(ast1, ast2) {\n        return ast1.print_to_string().length >\n            ast2.print_to_string().length\n            ? ast2 : ast1;\n    }\n\n    function best_of_statement(ast1, ast2) {\n        return best_of_expression(make_node(AST_SimpleStatement, ast1, {\n            body: ast1\n        }), make_node(AST_SimpleStatement, ast2, {\n            body: ast2\n        })).body;\n    }\n\n    function best_of(compressor, ast1, ast2) {\n        return (first_in_statement(compressor) ? best_of_statement : best_of_expression)(ast1, ast2);\n    }\n\n    // methods to evaluate a constant expression\n    (function (def){\n        // If the node has been successfully reduced to a constant,\n        // then its value is returned; otherwise the element itself\n        // is returned.\n        // They can be distinguished as constant value is never a\n        // descendant of AST_Node.\n        AST_Node.DEFMETHOD(\"evaluate\", function(compressor){\n            if (!compressor.option(\"evaluate\")) return this;\n            try {\n                var val = this._eval(compressor);\n                return !val || val instanceof RegExp || typeof val != \"object\" ? val : this;\n            } catch(ex) {\n                if (ex !== def) throw ex;\n                return this;\n            }\n        });\n        var unaryPrefix = makePredicate(\"! ~ - + void\");\n        AST_Node.DEFMETHOD(\"is_constant\", function(){\n            // Accomodate when compress option evaluate=false\n            // as well as the common constant expressions !0 and -1\n            if (this instanceof AST_Constant) {\n                return !(this instanceof AST_RegExp);\n            } else {\n                return this instanceof AST_UnaryPrefix\n                    && this.expression instanceof AST_Constant\n                    && unaryPrefix(this.operator);\n            }\n        });\n        // Obtain the constant value of an expression already known to be constant.\n        // Result only valid iff this.is_constant() is true.\n        AST_Node.DEFMETHOD(\"constant_value\", function(compressor){\n            // Accomodate when option evaluate=false.\n            if (this instanceof AST_Constant && !(this instanceof AST_RegExp)) {\n                return this.value;\n            }\n            // Accomodate the common constant expressions !0 and -1 when option evaluate=false.\n            if (this instanceof AST_UnaryPrefix\n                && this.expression instanceof AST_Constant) switch (this.operator) {\n              case \"!\":\n                return !this.expression.value;\n              case \"~\":\n                return ~this.expression.value;\n              case \"-\":\n                return -this.expression.value;\n              case \"+\":\n                return +this.expression.value;\n              default:\n                throw new Error(string_template(\"Cannot evaluate unary expression {value}\", {\n                    value: this.print_to_string()\n                }));\n            }\n            var result = this.evaluate(compressor);\n            if (result !== this) {\n                return result;\n            }\n            throw new Error(string_template(\"Cannot evaluate constant [{file}:{line},{col}]\", this.start));\n        });\n        def(AST_Statement, function(){\n            throw new Error(string_template(\"Cannot evaluate a statement [{file}:{line},{col}]\", this.start));\n        });\n        def(AST_Lambda, function(){\n            throw def;\n        });\n        function ev(node, compressor) {\n            if (!compressor) throw new Error(\"Compressor must be passed\");\n\n            return node._eval(compressor);\n        };\n        def(AST_Node, function(){\n            throw def;          // not constant\n        });\n        def(AST_Constant, function(){\n            return this.getValue();\n        });\n        def(AST_Array, function(compressor){\n            if (compressor.option(\"unsafe\")) {\n                return this.elements.map(function(element) {\n                    return ev(element, compressor);\n                });\n            }\n            throw def;\n        });\n        def(AST_Object, function(compressor){\n            if (compressor.option(\"unsafe\")) {\n                var val = {};\n                for (var i = 0, len = this.properties.length; i < len; i++) {\n                    var prop = this.properties[i];\n                    var key = prop.key;\n                    if (key instanceof AST_Symbol) {\n                        key = key.name;\n                    } else if (key instanceof AST_Node) {\n                        key = ev(key, compressor);\n                    }\n                    if (typeof Object.prototype[key] === 'function') {\n                        throw def;\n                    }\n                    val[key] = ev(prop.value, compressor);\n                }\n                return val;\n            }\n            throw def;\n        });\n        def(AST_UnaryPrefix, function(compressor){\n            var e = this.expression;\n            switch (this.operator) {\n              case \"!\": return !ev(e, compressor);\n              case \"typeof\":\n                // Function would be evaluated to an array and so typeof would\n                // incorrectly return 'object'. Hence making is a special case.\n                if (e instanceof AST_Function) return typeof function(){};\n\n                e = ev(e, compressor);\n\n                // typeof <RegExp> returns \"object\" or \"function\" on different platforms\n                // so cannot evaluate reliably\n                if (e instanceof RegExp) throw def;\n\n                return typeof e;\n              case \"void\": return void ev(e, compressor);\n              case \"~\": return ~ev(e, compressor);\n              case \"-\": return -ev(e, compressor);\n              case \"+\": return +ev(e, compressor);\n            }\n            throw def;\n        });\n        def(AST_Binary, function(c){\n            var left = this.left, right = this.right, result;\n            switch (this.operator) {\n              case \"&&\"  : result = ev(left, c) &&  ev(right, c); break;\n              case \"||\"  : result = ev(left, c) ||  ev(right, c); break;\n              case \"|\"   : result = ev(left, c) |   ev(right, c); break;\n              case \"&\"   : result = ev(left, c) &   ev(right, c); break;\n              case \"^\"   : result = ev(left, c) ^   ev(right, c); break;\n              case \"+\"   : result = ev(left, c) +   ev(right, c); break;\n              case \"*\"   : result = ev(left, c) *   ev(right, c); break;\n              case \"/\"   : result = ev(left, c) /   ev(right, c); break;\n              case \"%\"   : result = ev(left, c) %   ev(right, c); break;\n              case \"-\"   : result = ev(left, c) -   ev(right, c); break;\n              case \"<<\"  : result = ev(left, c) <<  ev(right, c); break;\n              case \">>\"  : result = ev(left, c) >>  ev(right, c); break;\n              case \">>>\" : result = ev(left, c) >>> ev(right, c); break;\n              case \"==\"  : result = ev(left, c) ==  ev(right, c); break;\n              case \"===\" : result = ev(left, c) === ev(right, c); break;\n              case \"!=\"  : result = ev(left, c) !=  ev(right, c); break;\n              case \"!==\" : result = ev(left, c) !== ev(right, c); break;\n              case \"<\"   : result = ev(left, c) <   ev(right, c); break;\n              case \"<=\"  : result = ev(left, c) <=  ev(right, c); break;\n              case \">\"   : result = ev(left, c) >   ev(right, c); break;\n              case \">=\"  : result = ev(left, c) >=  ev(right, c); break;\n              default:\n                  throw def;\n            }\n            if (isNaN(result) && c.find_parent(AST_With)) {\n                // leave original expression as is\n                throw def;\n            }\n            return result;\n        });\n        def(AST_Conditional, function(compressor){\n            return ev(this.condition, compressor)\n                ? ev(this.consequent, compressor)\n                : ev(this.alternative, compressor);\n        });\n        def(AST_SymbolRef, function(compressor){\n            if (this._evaluating) throw def;\n            this._evaluating = true;\n            try {\n                var fixed = this.fixed_value();\n                if (compressor.option(\"reduce_vars\") && fixed) {\n                    if (compressor.option(\"unsafe\")) {\n                        if (!HOP(fixed, \"_evaluated\")) {\n                            fixed._evaluated = ev(fixed, compressor);\n                        }\n                        return fixed._evaluated;\n                    }\n                    return ev(fixed, compressor);\n                }\n            } finally {\n                this._evaluating = false;\n            }\n            throw def;\n        });\n        def(AST_PropAccess, function(compressor){\n            if (compressor.option(\"unsafe\")) {\n                var key = this.property;\n                if (key instanceof AST_Node) {\n                    key = ev(key, compressor);\n                }\n                var val = ev(this.expression, compressor);\n                if (val && HOP(val, key)) {\n                    return val[key];\n                }\n            }\n            throw def;\n        });\n    })(function(node, func){\n        node.DEFMETHOD(\"_eval\", func);\n    });\n\n    // method to negate an expression\n    (function(def){\n        function basic_negation(exp) {\n            return make_node(AST_UnaryPrefix, exp, {\n                operator: \"!\",\n                expression: exp\n            });\n        }\n        function best(orig, alt, first_in_statement) {\n            var negated = basic_negation(orig);\n            if (first_in_statement) {\n                var stat = make_node(AST_SimpleStatement, alt, {\n                    body: alt\n                });\n                return best_of_expression(negated, stat) === stat ? alt : negated;\n            }\n            return best_of_expression(negated, alt);\n        }\n        def(AST_Node, function(){\n            return basic_negation(this);\n        });\n        def(AST_Statement, function(){\n            throw new Error(\"Cannot negate a statement\");\n        });\n        def(AST_Function, function(){\n            return basic_negation(this);\n        });\n        def(AST_UnaryPrefix, function(){\n            if (this.operator == \"!\")\n                return this.expression;\n            return basic_negation(this);\n        });\n        def(AST_Seq, function(compressor){\n            var self = this.clone();\n            self.cdr = self.cdr.negate(compressor);\n            return self;\n        });\n        def(AST_Conditional, function(compressor, first_in_statement){\n            var self = this.clone();\n            self.consequent = self.consequent.negate(compressor);\n            self.alternative = self.alternative.negate(compressor);\n            return best(this, self, first_in_statement);\n        });\n        def(AST_Binary, function(compressor, first_in_statement){\n            var self = this.clone(), op = this.operator;\n            if (compressor.option(\"unsafe_comps\")) {\n                switch (op) {\n                  case \"<=\" : self.operator = \">\"  ; return self;\n                  case \"<\"  : self.operator = \">=\" ; return self;\n                  case \">=\" : self.operator = \"<\"  ; return self;\n                  case \">\"  : self.operator = \"<=\" ; return self;\n                }\n            }\n            switch (op) {\n              case \"==\" : self.operator = \"!=\"; return self;\n              case \"!=\" : self.operator = \"==\"; return self;\n              case \"===\": self.operator = \"!==\"; return self;\n              case \"!==\": self.operator = \"===\"; return self;\n              case \"&&\":\n                self.operator = \"||\";\n                self.left = self.left.negate(compressor, first_in_statement);\n                self.right = self.right.negate(compressor);\n                return best(this, self, first_in_statement);\n              case \"||\":\n                self.operator = \"&&\";\n                self.left = self.left.negate(compressor, first_in_statement);\n                self.right = self.right.negate(compressor);\n                return best(this, self, first_in_statement);\n            }\n            return basic_negation(this);\n        });\n    })(function(node, func){\n        node.DEFMETHOD(\"negate\", function(compressor, first_in_statement){\n            return func.call(this, compressor, first_in_statement);\n        });\n    });\n\n    AST_Call.DEFMETHOD(\"has_pure_annotation\", function(compressor) {\n        if (!compressor.option(\"side_effects\")) return false;\n        if (this.pure !== undefined) return this.pure;\n        var pure = false;\n        var comments, last_comment;\n        if (this.start\n            && (comments = this.start.comments_before)\n            && comments.length\n            && /[@#]__PURE__/.test((last_comment = comments[comments.length - 1]).value)) {\n            pure = last_comment;\n        }\n        return this.pure = pure;\n    });\n\n    // determine if expression has side effects\n    (function(def){\n        def(AST_Node, return_true);\n\n        def(AST_EmptyStatement, return_false);\n        def(AST_Constant, return_false);\n        def(AST_This, return_false);\n\n        def(AST_Call, function(compressor){\n            if (!this.has_pure_annotation(compressor) && compressor.pure_funcs(this)) return true;\n            for (var i = this.args.length; --i >= 0;) {\n                if (this.args[i].has_side_effects(compressor))\n                    return true;\n            }\n            return false;\n        });\n\n        function any(list, compressor) {\n            for (var i = list.length; --i >= 0;)\n                if (list[i].has_side_effects(compressor))\n                    return true;\n            return false;\n        }\n\n        def(AST_Block, function(compressor){\n            return any(this.body, compressor);\n        });\n        def(AST_Switch, function(compressor){\n            return this.expression.has_side_effects(compressor)\n                || any(this.body, compressor);\n        });\n        def(AST_Case, function(compressor){\n            return this.expression.has_side_effects(compressor)\n                || any(this.body, compressor);\n        });\n        def(AST_Try, function(compressor){\n            return any(this.body, compressor)\n                || this.bcatch && this.bcatch.has_side_effects(compressor)\n                || this.bfinally && this.bfinally.has_side_effects(compressor);\n        });\n        def(AST_If, function(compressor){\n            return this.condition.has_side_effects(compressor)\n                || this.body && this.body.has_side_effects(compressor)\n                || this.alternative && this.alternative.has_side_effects(compressor);\n        });\n        def(AST_LabeledStatement, function(compressor){\n            return this.body.has_side_effects(compressor);\n        });\n        def(AST_SimpleStatement, function(compressor){\n            return this.body.has_side_effects(compressor);\n        });\n        def(AST_Defun, return_true);\n        def(AST_Function, return_false);\n        def(AST_Binary, function(compressor){\n            return this.left.has_side_effects(compressor)\n                || this.right.has_side_effects(compressor);\n        });\n        def(AST_Assign, return_true);\n        def(AST_Conditional, function(compressor){\n            return this.condition.has_side_effects(compressor)\n                || this.consequent.has_side_effects(compressor)\n                || this.alternative.has_side_effects(compressor);\n        });\n        def(AST_Unary, function(compressor){\n            return unary_side_effects(this.operator)\n                || this.expression.has_side_effects(compressor);\n        });\n        def(AST_SymbolRef, function(compressor){\n            return this.undeclared();\n        });\n        def(AST_Object, function(compressor){\n            return any(this.properties, compressor);\n        });\n        def(AST_ObjectProperty, function(compressor){\n            return this.value.has_side_effects(compressor);\n        });\n        def(AST_Array, function(compressor){\n            return any(this.elements, compressor);\n        });\n        def(AST_Dot, function(compressor){\n            return this.expression.may_eq_null(compressor)\n                || this.expression.has_side_effects(compressor);\n        });\n        def(AST_Sub, function(compressor){\n            return this.expression.may_eq_null(compressor)\n                || this.expression.has_side_effects(compressor)\n                || this.property.has_side_effects(compressor);\n        });\n        def(AST_Seq, function(compressor){\n            return this.car.has_side_effects(compressor)\n                || this.cdr.has_side_effects(compressor);\n        });\n    })(function(node, func){\n        node.DEFMETHOD(\"has_side_effects\", func);\n    });\n\n    // tell me if a statement aborts\n    function aborts(thing) {\n        return thing && thing.aborts();\n    };\n    (function(def){\n        def(AST_Statement, return_null);\n        def(AST_Jump, return_this);\n        function block_aborts(){\n            var n = this.body.length;\n            return n > 0 && aborts(this.body[n - 1]);\n        };\n        def(AST_BlockStatement, block_aborts);\n        def(AST_SwitchBranch, block_aborts);\n        def(AST_If, function(){\n            return this.alternative && aborts(this.body) && aborts(this.alternative) && this;\n        });\n    })(function(node, func){\n        node.DEFMETHOD(\"aborts\", func);\n    });\n\n    /* -----[ optimizers ]----- */\n\n    OPT(AST_Directive, function(self, compressor){\n        if (compressor.has_directive(self.value) !== self) {\n            return make_node(AST_EmptyStatement, self);\n        }\n        return self;\n    });\n\n    OPT(AST_Debugger, function(self, compressor){\n        if (compressor.option(\"drop_debugger\"))\n            return make_node(AST_EmptyStatement, self);\n        return self;\n    });\n\n    OPT(AST_LabeledStatement, function(self, compressor){\n        if (self.body instanceof AST_Break\n            && compressor.loopcontrol_target(self.body) === self.body) {\n            return make_node(AST_EmptyStatement, self);\n        }\n        return self.label.references.length == 0 ? self.body : self;\n    });\n\n    OPT(AST_Block, function(self, compressor){\n        self.body = tighten_body(self.body, compressor);\n        return self;\n    });\n\n    OPT(AST_BlockStatement, function(self, compressor){\n        self.body = tighten_body(self.body, compressor);\n        switch (self.body.length) {\n          case 1: return self.body[0];\n          case 0: return make_node(AST_EmptyStatement, self);\n        }\n        return self;\n    });\n\n    AST_Scope.DEFMETHOD(\"drop_unused\", function(compressor){\n        var self = this;\n        if (compressor.has_directive(\"use asm\")) return self;\n        var toplevel = compressor.option(\"toplevel\");\n        if (compressor.option(\"unused\")\n            && (!(self instanceof AST_Toplevel) || toplevel)\n            && !self.uses_eval\n            && !self.uses_with) {\n            var assign_as_unused = !/keep_assign/.test(compressor.option(\"unused\"));\n            var drop_funcs = /funcs/.test(toplevel);\n            var drop_vars = /vars/.test(toplevel);\n            if (!(self instanceof AST_Toplevel) || toplevel == true) {\n                drop_funcs = drop_vars = true;\n            }\n            var in_use = [];\n            var in_use_ids = Object.create(null); // avoid expensive linear scans of in_use\n            if (self instanceof AST_Toplevel && compressor.top_retain) {\n                self.variables.each(function(def) {\n                    if (compressor.top_retain(def) && !(def.id in in_use_ids)) {\n                        in_use_ids[def.id] = true;\n                        in_use.push(def);\n                    }\n                });\n            }\n            var initializations = new Dictionary();\n            // pass 1: find out which symbols are directly used in\n            // this scope (not in nested scopes).\n            var scope = this;\n            var tw = new TreeWalker(function(node, descend){\n                if (node !== self) {\n                    if (node instanceof AST_Defun) {\n                        if (!drop_funcs && scope === self) {\n                            var node_def = node.name.definition();\n                            if (!(node_def.id in in_use_ids)) {\n                                in_use_ids[node_def.id] = true;\n                                in_use.push(node_def);\n                            }\n                        }\n                        initializations.add(node.name.name, node);\n                        return true; // don't go in nested scopes\n                    }\n                    if (node instanceof AST_Definitions && scope === self) {\n                        node.definitions.forEach(function(def){\n                            if (!drop_vars) {\n                                var node_def = def.name.definition();\n                                if (!(node_def.id in in_use_ids)) {\n                                    in_use_ids[node_def.id] = true;\n                                    in_use.push(node_def);\n                                }\n                            }\n                            if (def.value) {\n                                initializations.add(def.name.name, def.value);\n                                if (def.value.has_side_effects(compressor)) {\n                                    def.value.walk(tw);\n                                }\n                            }\n                        });\n                        return true;\n                    }\n                    if (assign_as_unused\n                        && node instanceof AST_Assign\n                        && node.operator == \"=\"\n                        && node.left instanceof AST_SymbolRef\n                        && scope === self) {\n                        node.right.walk(tw);\n                        return true;\n                    }\n                    if (node instanceof AST_SymbolRef) {\n                        var node_def = node.definition();\n                        if (!(node_def.id in in_use_ids)) {\n                            in_use_ids[node_def.id] = true;\n                            in_use.push(node_def);\n                        }\n                        return true;\n                    }\n                    if (node instanceof AST_Scope) {\n                        var save_scope = scope;\n                        scope = node;\n                        descend();\n                        scope = save_scope;\n                        return true;\n                    }\n                }\n            });\n            self.walk(tw);\n            // pass 2: for every used symbol we need to walk its\n            // initialization code to figure out if it uses other\n            // symbols (that may not be in_use).\n            for (var i = 0; i < in_use.length; ++i) {\n                in_use[i].orig.forEach(function(decl){\n                    // undeclared globals will be instanceof AST_SymbolRef\n                    var init = initializations.get(decl.name);\n                    if (init) init.forEach(function(init){\n                        var tw = new TreeWalker(function(node){\n                            if (node instanceof AST_SymbolRef) {\n                                var node_def = node.definition();\n                                if (!(node_def.id in in_use_ids)) {\n                                    in_use_ids[node_def.id] = true;\n                                    in_use.push(node_def);\n                                }\n                            }\n                        });\n                        init.walk(tw);\n                    });\n                });\n            }\n            // pass 3: we should drop declarations not in_use\n            var tt = new TreeTransformer(\n                function before(node, descend, in_list) {\n                    if (node instanceof AST_Function\n                        && node.name\n                        && !compressor.option(\"keep_fnames\")) {\n                        var def = node.name.definition();\n                        // any declarations with same name will overshadow\n                        // name of this anonymous function and can therefore\n                        // never be used anywhere\n                        if (!(def.id in in_use_ids) || def.orig.length > 1)\n                            node.name = null;\n                    }\n                    if (node instanceof AST_Lambda && !(node instanceof AST_Accessor)) {\n                        var trim = !compressor.option(\"keep_fargs\");\n                        for (var a = node.argnames, i = a.length; --i >= 0;) {\n                            var sym = a[i];\n                            if (!(sym.definition().id in in_use_ids)) {\n                                sym.__unused = true;\n                                if (trim) {\n                                    a.pop();\n                                    compressor[sym.unreferenced() ? \"warn\" : \"info\"](\"Dropping unused function argument {name} [{file}:{line},{col}]\", {\n                                        name : sym.name,\n                                        file : sym.start.file,\n                                        line : sym.start.line,\n                                        col  : sym.start.col\n                                    });\n                                }\n                            }\n                            else {\n                                trim = false;\n                            }\n                        }\n                    }\n                    if (drop_funcs && node instanceof AST_Defun && node !== self) {\n                        if (!(node.name.definition().id in in_use_ids)) {\n                            compressor[node.name.unreferenced() ? \"warn\" : \"info\"](\"Dropping unused function {name} [{file}:{line},{col}]\", {\n                                name : node.name.name,\n                                file : node.name.start.file,\n                                line : node.name.start.line,\n                                col  : node.name.start.col\n                            });\n                            return make_node(AST_EmptyStatement, node);\n                        }\n                        return node;\n                    }\n                    if (drop_vars && node instanceof AST_Definitions && !(tt.parent() instanceof AST_ForIn)) {\n                        var def = node.definitions.filter(function(def){\n                            if (def.value) def.value = def.value.transform(tt);\n                            var sym = def.name.definition();\n                            if (sym.id in in_use_ids) return true;\n                            if (sym.orig[0] instanceof AST_SymbolCatch) {\n                                def.value = def.value && def.value.drop_side_effect_free(compressor);\n                                return true;\n                            }\n                            var w = {\n                                name : def.name.name,\n                                file : def.name.start.file,\n                                line : def.name.start.line,\n                                col  : def.name.start.col\n                            };\n                            if (def.value && (def._unused_side_effects = def.value.drop_side_effect_free(compressor))) {\n                                compressor.warn(\"Side effects in initialization of unused variable {name} [{file}:{line},{col}]\", w);\n                                return true;\n                            }\n                            compressor[def.name.unreferenced() ? \"warn\" : \"info\"](\"Dropping unused variable {name} [{file}:{line},{col}]\", w);\n                            return false;\n                        });\n                        // place uninitialized names at the start\n                        def = mergeSort(def, function(a, b){\n                            if (!a.value && b.value) return -1;\n                            if (!b.value && a.value) return 1;\n                            return 0;\n                        });\n                        // for unused names whose initialization has\n                        // side effects, we can cascade the init. code\n                        // into the next one, or next statement.\n                        var side_effects = [];\n                        for (var i = 0; i < def.length;) {\n                            var x = def[i];\n                            if (x._unused_side_effects) {\n                                side_effects.push(x._unused_side_effects);\n                                def.splice(i, 1);\n                            } else {\n                                if (side_effects.length > 0) {\n                                    side_effects.push(x.value);\n                                    x.value = AST_Seq.from_array(side_effects);\n                                    side_effects = [];\n                                }\n                                ++i;\n                            }\n                        }\n                        if (side_effects.length > 0) {\n                            side_effects = make_node(AST_BlockStatement, node, {\n                                body: [ make_node(AST_SimpleStatement, node, {\n                                    body: AST_Seq.from_array(side_effects)\n                                }) ]\n                            });\n                        } else {\n                            side_effects = null;\n                        }\n                        if (def.length == 0 && !side_effects) {\n                            return make_node(AST_EmptyStatement, node);\n                        }\n                        if (def.length == 0) {\n                            return in_list ? MAP.splice(side_effects.body) : side_effects;\n                        }\n                        node.definitions = def;\n                        if (side_effects) {\n                            side_effects.body.unshift(node);\n                            return in_list ? MAP.splice(side_effects.body) : side_effects;\n                        }\n                        return node;\n                    }\n                    if (drop_vars && assign_as_unused\n                        && node instanceof AST_Assign\n                        && node.operator == \"=\"\n                        && node.left instanceof AST_SymbolRef) {\n                        var def = node.left.definition();\n                        if (!(def.id in in_use_ids)\n                            && self.variables.get(def.name) === def) {\n                            return maintain_this_binding(tt.parent(), node, node.right.transform(tt));\n                        }\n                    }\n                    if (node instanceof AST_For) {\n                        descend(node, this);\n\n                        if (node.init instanceof AST_BlockStatement) {\n                            // certain combination of unused name + side effect leads to:\n                            //    https://github.com/mishoo/UglifyJS2/issues/44\n                            // that's an invalid AST.\n                            // We fix it at this stage by moving the `var` outside the `for`.\n\n                            var body = node.init.body.slice(0, -1);\n                            node.init = node.init.body.slice(-1)[0].body;\n                            body.push(node);\n\n                            return in_list ? MAP.splice(body) : make_node(AST_BlockStatement, node, {\n                                body: body\n                            });\n                        } else if (is_empty(node.init)) {\n                            node.init = null;\n                            return node;\n                        }\n                    }\n                    if (node instanceof AST_Scope && node !== self)\n                        return node;\n                }\n            );\n            self.transform(tt);\n        }\n    });\n\n    AST_Scope.DEFMETHOD(\"hoist_declarations\", function(compressor){\n        var self = this;\n        if (compressor.has_directive(\"use asm\")) return self;\n        var hoist_funs = compressor.option(\"hoist_funs\");\n        var hoist_vars = compressor.option(\"hoist_vars\");\n        if (hoist_funs || hoist_vars) {\n            var dirs = [];\n            var hoisted = [];\n            var vars = new Dictionary(), vars_found = 0, var_decl = 0;\n            // let's count var_decl first, we seem to waste a lot of\n            // space if we hoist `var` when there's only one.\n            self.walk(new TreeWalker(function(node){\n                if (node instanceof AST_Scope && node !== self)\n                    return true;\n                if (node instanceof AST_Var) {\n                    ++var_decl;\n                    return true;\n                }\n            }));\n            hoist_vars = hoist_vars && var_decl > 1;\n            var tt = new TreeTransformer(\n                function before(node) {\n                    if (node !== self) {\n                        if (node instanceof AST_Directive) {\n                            dirs.push(node);\n                            return make_node(AST_EmptyStatement, node);\n                        }\n                        if (node instanceof AST_Defun && hoist_funs) {\n                            hoisted.push(node);\n                            return make_node(AST_EmptyStatement, node);\n                        }\n                        if (node instanceof AST_Var && hoist_vars) {\n                            node.definitions.forEach(function(def){\n                                vars.set(def.name.name, def);\n                                ++vars_found;\n                            });\n                            var seq = node.to_assignments(compressor);\n                            var p = tt.parent();\n                            if (p instanceof AST_ForIn && p.init === node) {\n                                if (seq == null) {\n                                    var def = node.definitions[0].name;\n                                    return make_node(AST_SymbolRef, def, def);\n                                }\n                                return seq;\n                            }\n                            if (p instanceof AST_For && p.init === node) {\n                                return seq;\n                            }\n                            if (!seq) return make_node(AST_EmptyStatement, node);\n                            return make_node(AST_SimpleStatement, node, {\n                                body: seq\n                            });\n                        }\n                        if (node instanceof AST_Scope)\n                            return node; // to avoid descending in nested scopes\n                    }\n                }\n            );\n            self = self.transform(tt);\n            if (vars_found > 0) {\n                // collect only vars which don't show up in self's arguments list\n                var defs = [];\n                vars.each(function(def, name){\n                    if (self instanceof AST_Lambda\n                        && find_if(function(x){ return x.name == def.name.name },\n                                   self.argnames)) {\n                        vars.del(name);\n                    } else {\n                        def = def.clone();\n                        def.value = null;\n                        defs.push(def);\n                        vars.set(name, def);\n                    }\n                });\n                if (defs.length > 0) {\n                    // try to merge in assignments\n                    for (var i = 0; i < self.body.length;) {\n                        if (self.body[i] instanceof AST_SimpleStatement) {\n                            var expr = self.body[i].body, sym, assign;\n                            if (expr instanceof AST_Assign\n                                && expr.operator == \"=\"\n                                && (sym = expr.left) instanceof AST_Symbol\n                                && vars.has(sym.name))\n                            {\n                                var def = vars.get(sym.name);\n                                if (def.value) break;\n                                def.value = expr.right;\n                                remove(defs, def);\n                                defs.push(def);\n                                self.body.splice(i, 1);\n                                continue;\n                            }\n                            if (expr instanceof AST_Seq\n                                && (assign = expr.car) instanceof AST_Assign\n                                && assign.operator == \"=\"\n                                && (sym = assign.left) instanceof AST_Symbol\n                                && vars.has(sym.name))\n                            {\n                                var def = vars.get(sym.name);\n                                if (def.value) break;\n                                def.value = assign.right;\n                                remove(defs, def);\n                                defs.push(def);\n                                self.body[i].body = expr.cdr;\n                                continue;\n                            }\n                        }\n                        if (self.body[i] instanceof AST_EmptyStatement) {\n                            self.body.splice(i, 1);\n                            continue;\n                        }\n                        if (self.body[i] instanceof AST_BlockStatement) {\n                            var tmp = [ i, 1 ].concat(self.body[i].body);\n                            self.body.splice.apply(self.body, tmp);\n                            continue;\n                        }\n                        break;\n                    }\n                    defs = make_node(AST_Var, self, {\n                        definitions: defs\n                    });\n                    hoisted.push(defs);\n                };\n            }\n            self.body = dirs.concat(hoisted, self.body);\n        }\n        return self;\n    });\n\n    // drop_side_effect_free()\n    // remove side-effect-free parts which only affects return value\n    (function(def){\n        // Drop side-effect-free elements from an array of expressions.\n        // Returns an array of expressions with side-effects or null\n        // if all elements were dropped. Note: original array may be\n        // returned if nothing changed.\n        function trim(nodes, compressor, first_in_statement) {\n            var ret = [], changed = false;\n            for (var i = 0, len = nodes.length; i < len; i++) {\n                var node = nodes[i].drop_side_effect_free(compressor, first_in_statement);\n                changed |= node !== nodes[i];\n                if (node) {\n                    ret.push(node);\n                    first_in_statement = false;\n                }\n            }\n            return changed ? ret.length ? ret : null : nodes;\n        }\n\n        def(AST_Node, return_this);\n        def(AST_Constant, return_null);\n        def(AST_This, return_null);\n        def(AST_Call, function(compressor, first_in_statement){\n            if (!this.has_pure_annotation(compressor) && compressor.pure_funcs(this)) {\n                if (this.expression instanceof AST_Function\n                    && (!this.expression.name || !this.expression.name.definition().references.length)) {\n                    var node = this.clone();\n                    node.expression = node.expression.process_expression(false, compressor);\n                    return node;\n                }\n                return this;\n            }\n            if (this.pure) {\n                compressor.warn(\"Dropping __PURE__ call [{file}:{line},{col}]\", this.start);\n                this.pure.value = this.pure.value.replace(/[@#]__PURE__/g, ' ');\n            }\n            var args = trim(this.args, compressor, first_in_statement);\n            return args && AST_Seq.from_array(args);\n        });\n        def(AST_Function, return_null);\n        def(AST_Binary, function(compressor, first_in_statement){\n            var right = this.right.drop_side_effect_free(compressor);\n            if (!right) return this.left.drop_side_effect_free(compressor, first_in_statement);\n            switch (this.operator) {\n              case \"&&\":\n              case \"||\":\n                if (right === this.right) return this;\n                var node = this.clone();\n                node.right = right;\n                return node;\n              default:\n                var left = this.left.drop_side_effect_free(compressor, first_in_statement);\n                if (!left) return this.right.drop_side_effect_free(compressor, first_in_statement);\n                return make_node(AST_Seq, this, {\n                    car: left,\n                    cdr: right\n                });\n            }\n        });\n        def(AST_Assign, return_this);\n        def(AST_Conditional, function(compressor){\n            var consequent = this.consequent.drop_side_effect_free(compressor);\n            var alternative = this.alternative.drop_side_effect_free(compressor);\n            if (consequent === this.consequent && alternative === this.alternative) return this;\n            if (!consequent) return alternative ? make_node(AST_Binary, this, {\n                operator: \"||\",\n                left: this.condition,\n                right: alternative\n            }) : this.condition.drop_side_effect_free(compressor);\n            if (!alternative) return make_node(AST_Binary, this, {\n                operator: \"&&\",\n                left: this.condition,\n                right: consequent\n            });\n            var node = this.clone();\n            node.consequent = consequent;\n            node.alternative = alternative;\n            return node;\n        });\n        def(AST_Unary, function(compressor, first_in_statement){\n            if (unary_side_effects(this.operator)) return this;\n            if (this.operator == \"typeof\" && this.expression instanceof AST_SymbolRef) return null;\n            var expression = this.expression.drop_side_effect_free(compressor, first_in_statement);\n            if (first_in_statement\n                && this instanceof AST_UnaryPrefix\n                && is_iife_call(expression)) {\n                if (expression === this.expression && this.operator.length === 1) return this;\n                return make_node(AST_UnaryPrefix, this, {\n                    operator: this.operator.length === 1 ? this.operator : \"!\",\n                    expression: expression\n                });\n            }\n            return expression;\n        });\n        def(AST_SymbolRef, function() {\n            return this.undeclared() ? this : null;\n        });\n        def(AST_Object, function(compressor, first_in_statement){\n            var values = trim(this.properties, compressor, first_in_statement);\n            return values && AST_Seq.from_array(values);\n        });\n        def(AST_ObjectProperty, function(compressor, first_in_statement){\n            return this.value.drop_side_effect_free(compressor, first_in_statement);\n        });\n        def(AST_Array, function(compressor, first_in_statement){\n            var values = trim(this.elements, compressor, first_in_statement);\n            return values && AST_Seq.from_array(values);\n        });\n        def(AST_Dot, function(compressor, first_in_statement){\n            if (this.expression.may_eq_null(compressor)) return this;\n            return this.expression.drop_side_effect_free(compressor, first_in_statement);\n        });\n        def(AST_Sub, function(compressor, first_in_statement){\n            if (this.expression.may_eq_null(compressor)) return this;\n            var expression = this.expression.drop_side_effect_free(compressor, first_in_statement);\n            if (!expression) return this.property.drop_side_effect_free(compressor, first_in_statement);\n            var property = this.property.drop_side_effect_free(compressor);\n            if (!property) return expression;\n            return make_node(AST_Seq, this, {\n                car: expression,\n                cdr: property\n            });\n        });\n        def(AST_Seq, function(compressor){\n            var cdr = this.cdr.drop_side_effect_free(compressor);\n            if (cdr === this.cdr) return this;\n            if (!cdr) return this.car;\n            return make_node(AST_Seq, this, {\n                car: this.car,\n                cdr: cdr\n            });\n        });\n    })(function(node, func){\n        node.DEFMETHOD(\"drop_side_effect_free\", func);\n    });\n\n    OPT(AST_SimpleStatement, function(self, compressor){\n        if (compressor.option(\"side_effects\")) {\n            var body = self.body;\n            var node = body.drop_side_effect_free(compressor, true);\n            if (!node) {\n                compressor.warn(\"Dropping side-effect-free statement [{file}:{line},{col}]\", self.start);\n                return make_node(AST_EmptyStatement, self);\n            }\n            if (node !== body) {\n                return make_node(AST_SimpleStatement, self, { body: node });\n            }\n        }\n        return self;\n    });\n\n    OPT(AST_DWLoop, function(self, compressor){\n        if (!compressor.option(\"loops\")) return self;\n        var cond = self.condition.evaluate(compressor);\n        if (cond !== self.condition) {\n            if (cond) {\n                return make_node(AST_For, self, {\n                    body: self.body\n                });\n            }\n            if (compressor.option(\"dead_code\") && self instanceof AST_While) {\n                var a = [];\n                extract_declarations_from_unreachable_code(compressor, self.body, a);\n                return make_node(AST_BlockStatement, self, { body: a });\n            }\n            if (self instanceof AST_Do) {\n                var has_loop_control = false;\n                var tw = new TreeWalker(function(node) {\n                    if (node instanceof AST_Scope || has_loop_control) return true;\n                    if (node instanceof AST_LoopControl && tw.loopcontrol_target(node) === self)\n                        return has_loop_control = true;\n                });\n                self.walk(tw);\n                if (!has_loop_control) return self.body;\n            }\n        }\n        if (self instanceof AST_While) {\n            return make_node(AST_For, self, self).optimize(compressor);\n        }\n        return self;\n    });\n\n    function if_break_in_loop(self, compressor) {\n        function drop_it(rest) {\n            rest = as_statement_array(rest);\n            if (self.body instanceof AST_BlockStatement) {\n                self.body = self.body.clone();\n                self.body.body = rest.concat(self.body.body.slice(1));\n                self.body = self.body.transform(compressor);\n            } else {\n                self.body = make_node(AST_BlockStatement, self.body, {\n                    body: rest\n                }).transform(compressor);\n            }\n            if_break_in_loop(self, compressor);\n        }\n        var first = self.body instanceof AST_BlockStatement ? self.body.body[0] : self.body;\n        if (first instanceof AST_If) {\n            if (first.body instanceof AST_Break\n                && compressor.loopcontrol_target(first.body) === compressor.self()) {\n                if (self.condition) {\n                    self.condition = make_node(AST_Binary, self.condition, {\n                        left: self.condition,\n                        operator: \"&&\",\n                        right: first.condition.negate(compressor),\n                    });\n                } else {\n                    self.condition = first.condition.negate(compressor);\n                }\n                drop_it(first.alternative);\n            }\n            else if (first.alternative instanceof AST_Break\n                     && compressor.loopcontrol_target(first.alternative) === compressor.self()) {\n                if (self.condition) {\n                    self.condition = make_node(AST_Binary, self.condition, {\n                        left: self.condition,\n                        operator: \"&&\",\n                        right: first.condition,\n                    });\n                } else {\n                    self.condition = first.condition;\n                }\n                drop_it(first.body);\n            }\n        }\n    };\n\n    OPT(AST_For, function(self, compressor){\n        if (!compressor.option(\"loops\")) return self;\n        if (self.condition) {\n            var cond = self.condition.evaluate(compressor);\n            if (compressor.option(\"dead_code\") && !cond) {\n                var a = [];\n                if (self.init instanceof AST_Statement) {\n                    a.push(self.init);\n                }\n                else if (self.init) {\n                    a.push(make_node(AST_SimpleStatement, self.init, {\n                        body: self.init\n                    }));\n                }\n                extract_declarations_from_unreachable_code(compressor, self.body, a);\n                return make_node(AST_BlockStatement, self, { body: a });\n            }\n            if (cond !== self.condition) {\n                cond = make_node_from_constant(cond, self.condition).transform(compressor);\n                self.condition = best_of_expression(cond, self.condition);\n            }\n        }\n        if_break_in_loop(self, compressor);\n        return self;\n    });\n\n    OPT(AST_If, function(self, compressor){\n        if (is_empty(self.alternative)) self.alternative = null;\n\n        if (!compressor.option(\"conditionals\")) return self;\n        // if condition can be statically determined, warn and drop\n        // one of the blocks.  note, statically determined implies\n        // “has no side effects”; also it doesn't work for cases like\n        // `x && true`, though it probably should.\n        var cond = self.condition.evaluate(compressor);\n        if (cond !== self.condition) {\n            if (cond) {\n                compressor.warn(\"Condition always true [{file}:{line},{col}]\", self.condition.start);\n                if (compressor.option(\"dead_code\")) {\n                    var a = [];\n                    if (self.alternative) {\n                        extract_declarations_from_unreachable_code(compressor, self.alternative, a);\n                    }\n                    a.push(self.body);\n                    return make_node(AST_BlockStatement, self, { body: a }).optimize(compressor);\n                }\n            } else {\n                compressor.warn(\"Condition always false [{file}:{line},{col}]\", self.condition.start);\n                if (compressor.option(\"dead_code\")) {\n                    var a = [];\n                    extract_declarations_from_unreachable_code(compressor, self.body, a);\n                    if (self.alternative) a.push(self.alternative);\n                    return make_node(AST_BlockStatement, self, { body: a }).optimize(compressor);\n                }\n            }\n            cond = make_node_from_constant(cond, self.condition).transform(compressor);\n            self.condition = best_of_expression(cond, self.condition);\n        }\n        var negated = self.condition.negate(compressor);\n        var self_condition_length = self.condition.print_to_string().length;\n        var negated_length = negated.print_to_string().length;\n        var negated_is_best = negated_length < self_condition_length;\n        if (self.alternative && negated_is_best) {\n            negated_is_best = false; // because we already do the switch here.\n            // no need to swap values of self_condition_length and negated_length\n            // here because they are only used in an equality comparison later on.\n            self.condition = negated;\n            var tmp = self.body;\n            self.body = self.alternative || make_node(AST_EmptyStatement, self);\n            self.alternative = tmp;\n        }\n        if (is_empty(self.body) && is_empty(self.alternative)) {\n            return make_node(AST_SimpleStatement, self.condition, {\n                body: self.condition.clone()\n            }).optimize(compressor);\n        }\n        if (self.body instanceof AST_SimpleStatement\n            && self.alternative instanceof AST_SimpleStatement) {\n            return make_node(AST_SimpleStatement, self, {\n                body: make_node(AST_Conditional, self, {\n                    condition   : self.condition,\n                    consequent  : self.body.body,\n                    alternative : self.alternative.body\n                })\n            }).optimize(compressor);\n        }\n        if (is_empty(self.alternative) && self.body instanceof AST_SimpleStatement) {\n            if (self_condition_length === negated_length && !negated_is_best\n                && self.condition instanceof AST_Binary && self.condition.operator == \"||\") {\n                // although the code length of self.condition and negated are the same,\n                // negated does not require additional surrounding parentheses.\n                // see https://github.com/mishoo/UglifyJS2/issues/979\n                negated_is_best = true;\n            }\n            if (negated_is_best) return make_node(AST_SimpleStatement, self, {\n                body: make_node(AST_Binary, self, {\n                    operator : \"||\",\n                    left     : negated,\n                    right    : self.body.body\n                })\n            }).optimize(compressor);\n            return make_node(AST_SimpleStatement, self, {\n                body: make_node(AST_Binary, self, {\n                    operator : \"&&\",\n                    left     : self.condition,\n                    right    : self.body.body\n                })\n            }).optimize(compressor);\n        }\n        if (self.body instanceof AST_EmptyStatement\n            && self.alternative instanceof AST_SimpleStatement) {\n            return make_node(AST_SimpleStatement, self, {\n                body: make_node(AST_Binary, self, {\n                    operator : \"||\",\n                    left     : self.condition,\n                    right    : self.alternative.body\n                })\n            }).optimize(compressor);\n        }\n        if (self.body instanceof AST_Exit\n            && self.alternative instanceof AST_Exit\n            && self.body.TYPE == self.alternative.TYPE) {\n            return make_node(self.body.CTOR, self, {\n                value: make_node(AST_Conditional, self, {\n                    condition   : self.condition,\n                    consequent  : self.body.value || make_node(AST_Undefined, self.body),\n                    alternative : self.alternative.value || make_node(AST_Undefined, self.alternative)\n                }).transform(compressor)\n            }).optimize(compressor);\n        }\n        if (self.body instanceof AST_If\n            && !self.body.alternative\n            && !self.alternative) {\n            self = make_node(AST_If, self, {\n                condition: make_node(AST_Binary, self.condition, {\n                    operator: \"&&\",\n                    left: self.condition,\n                    right: self.body.condition\n                }),\n                body: self.body.body,\n                alternative: null\n            });\n        }\n        if (aborts(self.body)) {\n            if (self.alternative) {\n                var alt = self.alternative;\n                self.alternative = null;\n                return make_node(AST_BlockStatement, self, {\n                    body: [ self, alt ]\n                }).optimize(compressor);\n            }\n        }\n        if (aborts(self.alternative)) {\n            var body = self.body;\n            self.body = self.alternative;\n            self.condition = negated_is_best ? negated : self.condition.negate(compressor);\n            self.alternative = null;\n            return make_node(AST_BlockStatement, self, {\n                body: [ self, body ]\n            }).optimize(compressor);\n        }\n        return self;\n    });\n\n    OPT(AST_Switch, function(self, compressor){\n        if (!compressor.option(\"switches\")) return self;\n        var branch;\n        var value = self.expression.evaluate(compressor);\n        if (value !== self.expression) {\n            var expression = make_node_from_constant(value, self.expression).transform(compressor);\n            self.expression = best_of_expression(expression, self.expression);\n        }\n        if (!compressor.option(\"dead_code\")) return self;\n        var decl = [];\n        var body = [];\n        var default_branch;\n        var exact_match;\n        for (var i = 0, len = self.body.length; i < len && !exact_match; i++) {\n            branch = self.body[i];\n            if (branch instanceof AST_Default) {\n                if (!default_branch) {\n                    default_branch = branch;\n                } else {\n                    eliminate_branch(branch, body[body.length - 1]);\n                }\n            } else if (value !== self.expression) {\n                var exp = branch.expression.evaluate(compressor);\n                if (exp === value) {\n                    exact_match = branch;\n                    if (default_branch) {\n                        var default_index = body.indexOf(default_branch);\n                        body.splice(default_index, 1);\n                        eliminate_branch(default_branch, body[default_index - 1]);\n                        default_branch = null;\n                    }\n                } else if (exp !== branch.expression) {\n                    eliminate_branch(branch, body[body.length - 1]);\n                    continue;\n                }\n            }\n            if (aborts(branch)) {\n                var prev = body[body.length - 1];\n                if (aborts(prev) && prev.body.length == branch.body.length\n                    && make_node(AST_BlockStatement, prev, prev).equivalent_to(make_node(AST_BlockStatement, branch, branch))) {\n                    prev.body = [];\n                }\n            }\n            body.push(branch);\n        }\n        while (i < len) eliminate_branch(self.body[i++], body[body.length - 1]);\n        if (body.length > 0) {\n            body[0].body = decl.concat(body[0].body);\n        }\n        self.body = body;\n        while (branch = body[body.length - 1]) {\n            var stat = branch.body[branch.body.length - 1];\n            if (stat instanceof AST_Break && compressor.loopcontrol_target(stat) === self)\n                branch.body.pop();\n            if (branch.body.length || branch instanceof AST_Case\n                && (default_branch || branch.expression.has_side_effects(compressor))) break;\n            if (body.pop() === default_branch) default_branch = null;\n        }\n        if (body.length == 0) {\n            return make_node(AST_BlockStatement, self, {\n                body: decl.concat(make_node(AST_SimpleStatement, self.expression, {\n                    body: self.expression\n                }))\n            }).optimize(compressor);\n        }\n        if (body.length == 1 && (body[0] === exact_match || body[0] === default_branch)) {\n            var has_break = false;\n            var tw = new TreeWalker(function(node) {\n                if (has_break\n                    || node instanceof AST_Lambda\n                    || node instanceof AST_SimpleStatement) return true;\n                if (node instanceof AST_Break && tw.loopcontrol_target(node) === self)\n                    has_break = true;\n            });\n            self.walk(tw);\n            if (!has_break) {\n                body = body[0].body.slice();\n                body.unshift(make_node(AST_SimpleStatement, self.expression, {\n                    body: self.expression\n                }));\n                return make_node(AST_BlockStatement, self, {\n                    body: body\n                }).optimize(compressor);\n            }\n        }\n        return self;\n\n        function eliminate_branch(branch, prev) {\n            if (prev && !aborts(prev)) {\n                prev.body = prev.body.concat(branch.body);\n            } else {\n                extract_declarations_from_unreachable_code(compressor, branch, decl);\n            }\n        }\n    });\n\n    OPT(AST_Try, function(self, compressor){\n        self.body = tighten_body(self.body, compressor);\n        if (self.bcatch && self.bfinally && all(self.bfinally.body, is_empty)) self.bfinally = null;\n        if (all(self.body, is_empty)) {\n            var body = [];\n            if (self.bcatch) extract_declarations_from_unreachable_code(compressor, self.bcatch, body);\n            if (self.bfinally) body = body.concat(self.bfinally.body);\n            return body.length > 0 ? make_node(AST_BlockStatement, self, {\n                body: body\n            }).optimize(compressor) : make_node(AST_EmptyStatement, self);\n        }\n        return self;\n    });\n\n    AST_Definitions.DEFMETHOD(\"remove_initializers\", function(){\n        this.definitions.forEach(function(def){ def.value = null });\n    });\n\n    AST_Definitions.DEFMETHOD(\"to_assignments\", function(compressor){\n        var reduce_vars = compressor.option(\"reduce_vars\");\n        var assignments = this.definitions.reduce(function(a, def){\n            if (def.value) {\n                var name = make_node(AST_SymbolRef, def.name, def.name);\n                a.push(make_node(AST_Assign, def, {\n                    operator : \"=\",\n                    left     : name,\n                    right    : def.value\n                }));\n                if (reduce_vars) name.definition().fixed = false;\n            }\n            return a;\n        }, []);\n        if (assignments.length == 0) return null;\n        return AST_Seq.from_array(assignments);\n    });\n\n    OPT(AST_Definitions, function(self, compressor){\n        if (self.definitions.length == 0)\n            return make_node(AST_EmptyStatement, self);\n        return self;\n    });\n\n    OPT(AST_Call, function(self, compressor){\n        var exp = self.expression;\n        if (compressor.option(\"reduce_vars\")\n            && exp instanceof AST_SymbolRef) {\n            var def = exp.definition();\n            var fixed = exp.fixed_value();\n            if (fixed instanceof AST_Defun) {\n                def.fixed = fixed = make_node(AST_Function, fixed, fixed).clone(true);\n            }\n            if (fixed instanceof AST_Function) {\n                exp = fixed;\n                if (compressor.option(\"unused\")\n                    && def.references.length == 1\n                    && !(def.scope.uses_arguments\n                        && def.orig[0] instanceof AST_SymbolFunarg)\n                    && !def.scope.uses_eval\n                    && compressor.find_parent(AST_Scope) === def.scope) {\n                    self.expression = exp;\n                }\n            }\n        }\n        if (compressor.option(\"unused\")\n            && exp instanceof AST_Function\n            && !exp.uses_arguments\n            && !exp.uses_eval) {\n            var pos = 0, last = 0;\n            for (var i = 0, len = self.args.length; i < len; i++) {\n                var trim = i >= exp.argnames.length;\n                if (trim || exp.argnames[i].__unused) {\n                    var node = self.args[i].drop_side_effect_free(compressor);\n                    if (node) {\n                        self.args[pos++] = node;\n                    } else if (!trim) {\n                        self.args[pos++] = make_node(AST_Number, self.args[i], {\n                            value: 0\n                        });\n                        continue;\n                    }\n                } else {\n                    self.args[pos++] = self.args[i];\n                }\n                last = pos;\n            }\n            self.args.length = last;\n        }\n        if (compressor.option(\"unsafe\")) {\n            if (exp instanceof AST_SymbolRef && exp.undeclared()) {\n                switch (exp.name) {\n                  case \"Array\":\n                    if (self.args.length != 1) {\n                        return make_node(AST_Array, self, {\n                            elements: self.args\n                        }).optimize(compressor);\n                    }\n                    break;\n                  case \"Object\":\n                    if (self.args.length == 0) {\n                        return make_node(AST_Object, self, {\n                            properties: []\n                        });\n                    }\n                    break;\n                  case \"String\":\n                    if (self.args.length == 0) return make_node(AST_String, self, {\n                        value: \"\"\n                    });\n                    if (self.args.length <= 1) return make_node(AST_Binary, self, {\n                        left: self.args[0],\n                        operator: \"+\",\n                        right: make_node(AST_String, self, { value: \"\" })\n                    }).optimize(compressor);\n                    break;\n                  case \"Number\":\n                    if (self.args.length == 0) return make_node(AST_Number, self, {\n                        value: 0\n                    });\n                    if (self.args.length == 1) return make_node(AST_UnaryPrefix, self, {\n                        expression: self.args[0],\n                        operator: \"+\"\n                    }).optimize(compressor);\n                  case \"Boolean\":\n                    if (self.args.length == 0) return make_node(AST_False, self);\n                    if (self.args.length == 1) return make_node(AST_UnaryPrefix, self, {\n                        expression: make_node(AST_UnaryPrefix, self, {\n                            expression: self.args[0],\n                            operator: \"!\"\n                        }),\n                        operator: \"!\"\n                    }).optimize(compressor);\n                    break;\n                  case \"Function\":\n                    // new Function() => function(){}\n                    if (self.args.length == 0) return make_node(AST_Function, self, {\n                        argnames: [],\n                        body: []\n                    });\n                    if (all(self.args, function(x){ return x instanceof AST_String })) {\n                        // quite a corner-case, but we can handle it:\n                        //   https://github.com/mishoo/UglifyJS2/issues/203\n                        // if the code argument is a constant, then we can minify it.\n                        try {\n                            var code = \"(function(\" + self.args.slice(0, -1).map(function(arg){\n                                return arg.value;\n                            }).join(\",\") + \"){\" + self.args[self.args.length - 1].value + \"})()\";\n                            var ast = parse(code);\n                            ast.figure_out_scope({ screw_ie8: compressor.option(\"screw_ie8\") });\n                            var comp = new Compressor(compressor.options);\n                            ast = ast.transform(comp);\n                            ast.figure_out_scope({ screw_ie8: compressor.option(\"screw_ie8\") });\n                            ast.mangle_names();\n                            var fun;\n                            try {\n                                ast.walk(new TreeWalker(function(node){\n                                    if (node instanceof AST_Lambda) {\n                                        fun = node;\n                                        throw ast;\n                                    }\n                                }));\n                            } catch(ex) {\n                                if (ex !== ast) throw ex;\n                            };\n                            if (!fun) return self;\n                            var args = fun.argnames.map(function(arg, i){\n                                return make_node(AST_String, self.args[i], {\n                                    value: arg.print_to_string()\n                                });\n                            });\n                            var code = OutputStream();\n                            AST_BlockStatement.prototype._codegen.call(fun, fun, code);\n                            code = code.toString().replace(/^\\{|\\}$/g, \"\");\n                            args.push(make_node(AST_String, self.args[self.args.length - 1], {\n                                value: code\n                            }));\n                            self.args = args;\n                            return self;\n                        } catch(ex) {\n                            if (ex instanceof JS_Parse_Error) {\n                                compressor.warn(\"Error parsing code passed to new Function [{file}:{line},{col}]\", self.args[self.args.length - 1].start);\n                                compressor.warn(ex.toString());\n                            } else {\n                                console.log(ex);\n                                throw ex;\n                            }\n                        }\n                    }\n                    break;\n                }\n            }\n            else if (exp instanceof AST_Dot && exp.property == \"toString\" && self.args.length == 0) {\n                return make_node(AST_Binary, self, {\n                    left: make_node(AST_String, self, { value: \"\" }),\n                    operator: \"+\",\n                    right: exp.expression\n                }).optimize(compressor);\n            }\n            else if (exp instanceof AST_Dot && exp.expression instanceof AST_Array && exp.property == \"join\") EXIT: {\n                var separator;\n                if (self.args.length > 0) {\n                    separator = self.args[0].evaluate(compressor);\n                    if (separator === self.args[0]) break EXIT; // not a constant\n                }\n                var elements = [];\n                var consts = [];\n                exp.expression.elements.forEach(function(el) {\n                    var value = el.evaluate(compressor);\n                    if (value !== el) {\n                        consts.push(value);\n                    } else {\n                        if (consts.length > 0) {\n                            elements.push(make_node(AST_String, self, {\n                                value: consts.join(separator)\n                            }));\n                            consts.length = 0;\n                        }\n                        elements.push(el);\n                    }\n                });\n                if (consts.length > 0) {\n                    elements.push(make_node(AST_String, self, {\n                        value: consts.join(separator)\n                    }));\n                }\n                if (elements.length == 0) return make_node(AST_String, self, { value: \"\" });\n                if (elements.length == 1) {\n                    if (elements[0].is_string(compressor)) {\n                        return elements[0];\n                    }\n                    return make_node(AST_Binary, elements[0], {\n                        operator : \"+\",\n                        left     : make_node(AST_String, self, { value: \"\" }),\n                        right    : elements[0]\n                    });\n                }\n                if (separator == \"\") {\n                    var first;\n                    if (elements[0].is_string(compressor)\n                        || elements[1].is_string(compressor)) {\n                        first = elements.shift();\n                    } else {\n                        first = make_node(AST_String, self, { value: \"\" });\n                    }\n                    return elements.reduce(function(prev, el){\n                        return make_node(AST_Binary, el, {\n                            operator : \"+\",\n                            left     : prev,\n                            right    : el\n                        });\n                    }, first).optimize(compressor);\n                }\n                // need this awkward cloning to not affect original element\n                // best_of will decide which one to get through.\n                var node = self.clone();\n                node.expression = node.expression.clone();\n                node.expression.expression = node.expression.expression.clone();\n                node.expression.expression.elements = elements;\n                return best_of(compressor, self, node);\n            }\n            else if (exp instanceof AST_Dot && exp.expression.is_string(compressor) && exp.property == \"charAt\") {\n                var arg = self.args[0];\n                var index = arg ? arg.evaluate(compressor) : 0;\n                if (index !== arg) {\n                    return make_node(AST_Sub, exp, {\n                        expression: exp.expression,\n                        property: make_node_from_constant(index | 0, arg || exp)\n                    }).optimize(compressor);\n                }\n            }\n        }\n        if (exp instanceof AST_Function) {\n            if (exp.body[0] instanceof AST_Return) {\n                var value = exp.body[0].value;\n                if (!value || value.is_constant()) {\n                    var args = self.args.concat(value || make_node(AST_Undefined, self));\n                    return AST_Seq.from_array(args).transform(compressor);\n                }\n            }\n            if (compressor.option(\"side_effects\") && all(exp.body, is_empty)) {\n                var args = self.args.concat(make_node(AST_Undefined, self));\n                return AST_Seq.from_array(args).transform(compressor);\n            }\n        }\n        if (compressor.option(\"drop_console\")) {\n            if (exp instanceof AST_PropAccess) {\n                var name = exp.expression;\n                while (name.expression) {\n                    name = name.expression;\n                }\n                if (name instanceof AST_SymbolRef\n                    && name.name == \"console\"\n                    && name.undeclared()) {\n                    return make_node(AST_Undefined, self).optimize(compressor);\n                }\n            }\n        }\n        if (compressor.option(\"negate_iife\")\n            && compressor.parent() instanceof AST_SimpleStatement\n            && is_iife_call(self)) {\n            return self.negate(compressor, true);\n        }\n        return self;\n    });\n\n    OPT(AST_New, function(self, compressor){\n        if (compressor.option(\"unsafe\")) {\n            var exp = self.expression;\n            if (exp instanceof AST_SymbolRef && exp.undeclared()) {\n                switch (exp.name) {\n                  case \"Object\":\n                  case \"RegExp\":\n                  case \"Function\":\n                  case \"Error\":\n                  case \"Array\":\n                    return make_node(AST_Call, self, self).transform(compressor);\n                }\n            }\n        }\n        return self;\n    });\n\n    OPT(AST_Seq, function(self, compressor){\n        if (!compressor.option(\"side_effects\"))\n            return self;\n        self.car = self.car.drop_side_effect_free(compressor, first_in_statement(compressor));\n        if (!self.car) return maintain_this_binding(compressor.parent(), self, self.cdr);\n        if (compressor.option(\"cascade\")) {\n            var left;\n            if (self.car instanceof AST_Assign\n                && !self.car.left.has_side_effects(compressor)) {\n                left = self.car.left;\n            } else if (self.car instanceof AST_Unary\n                && (self.car.operator == \"++\" || self.car.operator == \"--\")) {\n                left = self.car.expression;\n            }\n            if (left\n                && !(left instanceof AST_SymbolRef\n                    && left.definition().orig[0] instanceof AST_SymbolLambda)) {\n                var parent, field;\n                var cdr = self.cdr;\n                while (true) {\n                    if (cdr.equivalent_to(left)) {\n                        var car = self.car instanceof AST_UnaryPostfix ? make_node(AST_UnaryPrefix, self.car, {\n                            operator: self.car.operator,\n                            expression: left\n                        }) : self.car;\n                        if (parent) {\n                            parent[field] = car;\n                            return self.cdr;\n                        }\n                        return car;\n                    }\n                    if (cdr instanceof AST_Binary && !(cdr instanceof AST_Assign)) {\n                        if (cdr.left.is_constant()) {\n                            if (cdr.operator == \"||\" || cdr.operator == \"&&\") break;\n                            field = \"right\";\n                        } else {\n                            field = \"left\";\n                        }\n                    } else if (cdr instanceof AST_Call\n                        || cdr instanceof AST_Unary && !unary_side_effects(cdr.operator)) {\n                        field = \"expression\";\n                    } else break;\n                    parent = cdr;\n                    cdr = cdr[field];\n                }\n            }\n        }\n        if (is_undefined(self.cdr, compressor)) {\n            return make_node(AST_UnaryPrefix, self, {\n                operator   : \"void\",\n                expression : self.car\n            });\n        }\n        return self;\n    });\n\n    AST_Unary.DEFMETHOD(\"lift_sequences\", function(compressor){\n        if (compressor.option(\"sequences\")) {\n            if (this.expression instanceof AST_Seq) {\n                var seq = this.expression;\n                var x = seq.to_array();\n                var e = this.clone();\n                e.expression = x.pop();\n                x.push(e);\n                seq = AST_Seq.from_array(x).transform(compressor);\n                return seq;\n            }\n        }\n        return this;\n    });\n\n    OPT(AST_UnaryPostfix, function(self, compressor){\n        return self.lift_sequences(compressor);\n    });\n\n    OPT(AST_UnaryPrefix, function(self, compressor){\n        var e = self.expression;\n        if (self.operator == \"delete\"\n            && !(e instanceof AST_SymbolRef\n                || e instanceof AST_PropAccess\n                || e instanceof AST_NaN\n                || e instanceof AST_Infinity\n                || e instanceof AST_Undefined)) {\n            if (e instanceof AST_Seq) {\n                e = e.to_array();\n                e.push(make_node(AST_True, self));\n                return AST_Seq.from_array(e).optimize(compressor);\n            }\n            return make_node(AST_Seq, self, {\n                car: e,\n                cdr: make_node(AST_True, self)\n            }).optimize(compressor);\n        }\n        var seq = self.lift_sequences(compressor);\n        if (seq !== self) {\n            return seq;\n        }\n        if (compressor.option(\"side_effects\") && self.operator == \"void\") {\n            e = e.drop_side_effect_free(compressor);\n            if (e) {\n                self.expression = e;\n                return self;\n            } else {\n                return make_node(AST_Undefined, self).optimize(compressor);\n            }\n        }\n        if (compressor.option(\"booleans\") && compressor.in_boolean_context()) {\n            switch (self.operator) {\n              case \"!\":\n                if (e instanceof AST_UnaryPrefix && e.operator == \"!\") {\n                    // !!foo ==> foo, if we're in boolean context\n                    return e.expression;\n                }\n                if (e instanceof AST_Binary) {\n                    self = best_of(compressor, self, e.negate(compressor, first_in_statement(compressor)));\n                }\n                break;\n              case \"typeof\":\n                // typeof always returns a non-empty string, thus it's\n                // always true in booleans\n                compressor.warn(\"Boolean expression always true [{file}:{line},{col}]\", self.start);\n                return (e instanceof AST_SymbolRef ? make_node(AST_True, self) : make_node(AST_Seq, self, {\n                    car: e,\n                    cdr: make_node(AST_True, self)\n                })).optimize(compressor);\n            }\n        }\n        if (self.operator == \"-\" && e instanceof AST_Infinity) {\n            e = e.transform(compressor);\n        }\n        if (e instanceof AST_Binary\n            && (self.operator == \"+\" || self.operator == \"-\")\n            && (e.operator == \"*\" || e.operator == \"/\" || e.operator == \"%\")) {\n            return make_node(AST_Binary, self, {\n                operator: e.operator,\n                left: make_node(AST_UnaryPrefix, e.left, {\n                    operator: self.operator,\n                    expression: e.left\n                }),\n                right: e.right\n            });\n        }\n        // avoids infinite recursion of numerals\n        if (self.operator != \"-\"\n            || !(e instanceof AST_Number || e instanceof AST_Infinity)) {\n            var ev = self.evaluate(compressor);\n            if (ev !== self) {\n                ev = make_node_from_constant(ev, self).optimize(compressor);\n                return best_of(compressor, ev, self);\n            }\n        }\n        return self;\n    });\n\n    AST_Binary.DEFMETHOD(\"lift_sequences\", function(compressor){\n        if (compressor.option(\"sequences\")) {\n            if (this.left instanceof AST_Seq) {\n                var seq = this.left;\n                var x = seq.to_array();\n                var e = this.clone();\n                e.left = x.pop();\n                x.push(e);\n                return AST_Seq.from_array(x).optimize(compressor);\n            }\n            if (this.right instanceof AST_Seq && !this.left.has_side_effects(compressor)) {\n                var assign = this.operator == \"=\" && this.left instanceof AST_SymbolRef;\n                var root = this.right.clone();\n                var cursor, seq = root;\n                while (assign || !seq.car.has_side_effects(compressor)) {\n                    cursor = seq;\n                    if (seq.cdr instanceof AST_Seq) {\n                        seq = seq.cdr = seq.cdr.clone();\n                    } else break;\n                }\n                if (cursor) {\n                    var e = this.clone();\n                    e.right = cursor.cdr;\n                    cursor.cdr = e;\n                    return root.optimize(compressor);\n                }\n            }\n        }\n        return this;\n    });\n\n    var commutativeOperators = makePredicate(\"== === != !== * & | ^\");\n\n    OPT(AST_Binary, function(self, compressor){\n        function reversible() {\n            return self.left.is_constant()\n                || self.right.is_constant()\n                || !self.left.has_side_effects(compressor)\n                    && !self.right.has_side_effects(compressor);\n        }\n        function reverse(op) {\n            if (reversible()) {\n                if (op) self.operator = op;\n                var tmp = self.left;\n                self.left = self.right;\n                self.right = tmp;\n            }\n        }\n        if (commutativeOperators(self.operator)) {\n            if (self.right.is_constant()\n                && !self.left.is_constant()) {\n                // if right is a constant, whatever side effects the\n                // left side might have could not influence the\n                // result.  hence, force switch.\n\n                if (!(self.left instanceof AST_Binary\n                      && PRECEDENCE[self.left.operator] >= PRECEDENCE[self.operator])) {\n                    reverse();\n                }\n            }\n        }\n        self = self.lift_sequences(compressor);\n        if (compressor.option(\"comparisons\")) switch (self.operator) {\n          case \"===\":\n          case \"!==\":\n            if ((self.left.is_string(compressor) && self.right.is_string(compressor)) ||\n                (self.left.is_number(compressor) && self.right.is_number(compressor)) ||\n                (self.left.is_boolean() && self.right.is_boolean())) {\n                self.operator = self.operator.substr(0, 2);\n            }\n            // XXX: intentionally falling down to the next case\n          case \"==\":\n          case \"!=\":\n            // \"undefined\" == typeof x => undefined === x\n            if (self.left instanceof AST_String\n                && self.left.value == \"undefined\"\n                && self.right instanceof AST_UnaryPrefix\n                && self.right.operator == \"typeof\") {\n                var expr = self.right.expression;\n                if (expr instanceof AST_SymbolRef ? !expr.undeclared()\n                    : !(expr instanceof AST_PropAccess) || compressor.option(\"screw_ie8\")) {\n                    self.right = expr;\n                    self.left = make_node(AST_Undefined, self.left).optimize(compressor);\n                    if (self.operator.length == 2) self.operator += \"=\";\n                }\n            }\n            break;\n        }\n        if (compressor.option(\"booleans\") && self.operator == \"+\" && compressor.in_boolean_context()) {\n            var ll = self.left.evaluate(compressor);\n            var rr = self.right.evaluate(compressor);\n            if (ll && typeof ll == \"string\") {\n                compressor.warn(\"+ in boolean context always true [{file}:{line},{col}]\", self.start);\n                return make_node(AST_Seq, self, {\n                    car: self.right,\n                    cdr: make_node(AST_True, self)\n                }).optimize(compressor);\n            }\n            if (rr && typeof rr == \"string\") {\n                compressor.warn(\"+ in boolean context always true [{file}:{line},{col}]\", self.start);\n                return make_node(AST_Seq, self, {\n                    car: self.left,\n                    cdr: make_node(AST_True, self)\n                }).optimize(compressor);\n            }\n        }\n        if (compressor.option(\"comparisons\") && self.is_boolean()) {\n            if (!(compressor.parent() instanceof AST_Binary)\n                || compressor.parent() instanceof AST_Assign) {\n                var negated = make_node(AST_UnaryPrefix, self, {\n                    operator: \"!\",\n                    expression: self.negate(compressor, first_in_statement(compressor))\n                });\n                self = best_of(compressor, self, negated);\n            }\n            if (compressor.option(\"unsafe_comps\")) {\n                switch (self.operator) {\n                  case \"<\": reverse(\">\"); break;\n                  case \"<=\": reverse(\">=\"); break;\n                }\n            }\n        }\n        if (self.operator == \"+\") {\n            if (self.right instanceof AST_String\n                && self.right.getValue() == \"\"\n                && self.left.is_string(compressor)) {\n                return self.left;\n            }\n            if (self.left instanceof AST_String\n                && self.left.getValue() == \"\"\n                && self.right.is_string(compressor)) {\n                return self.right;\n            }\n            if (self.left instanceof AST_Binary\n                && self.left.operator == \"+\"\n                && self.left.left instanceof AST_String\n                && self.left.left.getValue() == \"\"\n                && self.right.is_string(compressor)) {\n                self.left = self.left.right;\n                return self.transform(compressor);\n            }\n        }\n        if (compressor.option(\"evaluate\")) {\n            switch (self.operator) {\n              case \"&&\":\n                var ll = self.left.evaluate(compressor);\n                if (!ll) {\n                    compressor.warn(\"Condition left of && always false [{file}:{line},{col}]\", self.start);\n                    return maintain_this_binding(compressor.parent(), self, self.left).optimize(compressor);\n                } else if (ll !== self.left) {\n                    compressor.warn(\"Condition left of && always true [{file}:{line},{col}]\", self.start);\n                    return maintain_this_binding(compressor.parent(), self, self.right).optimize(compressor);\n                }\n                if (compressor.option(\"booleans\") && compressor.in_boolean_context()) {\n                    var rr = self.right.evaluate(compressor);\n                    if (!rr) {\n                        compressor.warn(\"Boolean && always false [{file}:{line},{col}]\", self.start);\n                        return make_node(AST_Seq, self, {\n                            car: self.left,\n                            cdr: make_node(AST_False, self)\n                        }).optimize(compressor);\n                    } else if (rr !== self.right) {\n                        compressor.warn(\"Dropping side-effect-free && in boolean context [{file}:{line},{col}]\", self.start);\n                        return self.left.optimize(compressor);\n                    }\n                }\n                break;\n              case \"||\":\n                var ll = self.left.evaluate(compressor);\n                if (!ll) {\n                    compressor.warn(\"Condition left of || always false [{file}:{line},{col}]\", self.start);\n                    return maintain_this_binding(compressor.parent(), self, self.right).optimize(compressor);\n                } else if (ll !== self.left) {\n                    compressor.warn(\"Condition left of || always true [{file}:{line},{col}]\", self.start);\n                    return maintain_this_binding(compressor.parent(), self, self.left).optimize(compressor);\n                }\n                if (compressor.option(\"booleans\") && compressor.in_boolean_context()) {\n                    var rr = self.right.evaluate(compressor);\n                    if (!rr) {\n                        compressor.warn(\"Dropping side-effect-free || in boolean context [{file}:{line},{col}]\", self.start);\n                        return self.left.optimize(compressor);\n                    } else if (rr !== self.right) {\n                        compressor.warn(\"Boolean || always true [{file}:{line},{col}]\", self.start);\n                        return make_node(AST_Seq, self, {\n                            car: self.left,\n                            cdr: make_node(AST_True, self)\n                        }).optimize(compressor);\n                    }\n                }\n                break;\n            }\n            var associative = true;\n            switch (self.operator) {\n              case \"+\":\n                // \"foo\" + (\"bar\" + x) => \"foobar\" + x\n                if (self.left instanceof AST_Constant\n                    && self.right instanceof AST_Binary\n                    && self.right.operator == \"+\"\n                    && self.right.left instanceof AST_Constant\n                    && self.right.is_string(compressor)) {\n                    self = make_node(AST_Binary, self, {\n                        operator: \"+\",\n                        left: make_node(AST_String, self.left, {\n                            value: \"\" + self.left.getValue() + self.right.left.getValue(),\n                            start: self.left.start,\n                            end: self.right.left.end\n                        }),\n                        right: self.right.right\n                    });\n                }\n                // (x + \"foo\") + \"bar\" => x + \"foobar\"\n                if (self.right instanceof AST_Constant\n                    && self.left instanceof AST_Binary\n                    && self.left.operator == \"+\"\n                    && self.left.right instanceof AST_Constant\n                    && self.left.is_string(compressor)) {\n                    self = make_node(AST_Binary, self, {\n                        operator: \"+\",\n                        left: self.left.left,\n                        right: make_node(AST_String, self.right, {\n                            value: \"\" + self.left.right.getValue() + self.right.getValue(),\n                            start: self.left.right.start,\n                            end: self.right.end\n                        })\n                    });\n                }\n                // (x + \"foo\") + (\"bar\" + y) => (x + \"foobar\") + y\n                if (self.left instanceof AST_Binary\n                    && self.left.operator == \"+\"\n                    && self.left.is_string(compressor)\n                    && self.left.right instanceof AST_Constant\n                    && self.right instanceof AST_Binary\n                    && self.right.operator == \"+\"\n                    && self.right.left instanceof AST_Constant\n                    && self.right.is_string(compressor)) {\n                    self = make_node(AST_Binary, self, {\n                        operator: \"+\",\n                        left: make_node(AST_Binary, self.left, {\n                            operator: \"+\",\n                            left: self.left.left,\n                            right: make_node(AST_String, self.left.right, {\n                                value: \"\" + self.left.right.getValue() + self.right.left.getValue(),\n                                start: self.left.right.start,\n                                end: self.right.left.end\n                            })\n                        }),\n                        right: self.right.right\n                    });\n                }\n                // a + -b => a - b\n                if (self.right instanceof AST_UnaryPrefix\n                    && self.right.operator == \"-\"\n                    && self.left.is_number(compressor)) {\n                    self = make_node(AST_Binary, self, {\n                        operator: \"-\",\n                        left: self.left,\n                        right: self.right.expression\n                    });\n                    break;\n                }\n                // -a + b => b - a\n                if (self.left instanceof AST_UnaryPrefix\n                    && self.left.operator == \"-\"\n                    && reversible()\n                    && self.right.is_number(compressor)) {\n                    self = make_node(AST_Binary, self, {\n                        operator: \"-\",\n                        left: self.right,\n                        right: self.left.expression\n                    });\n                    break;\n                }\n              case \"*\":\n                associative = compressor.option(\"unsafe_math\");\n              case \"&\":\n              case \"|\":\n              case \"^\":\n                // a + +b => +b + a\n                if (self.left.is_number(compressor)\n                    && self.right.is_number(compressor)\n                    && reversible()\n                    && !(self.left instanceof AST_Binary\n                        && self.left.operator != self.operator\n                        && PRECEDENCE[self.left.operator] >= PRECEDENCE[self.operator])) {\n                    var reversed = make_node(AST_Binary, self, {\n                        operator: self.operator,\n                        left: self.right,\n                        right: self.left\n                    });\n                    if (self.right instanceof AST_Constant\n                        && !(self.left instanceof AST_Constant)) {\n                        self = best_of(compressor, reversed, self);\n                    } else {\n                        self = best_of(compressor, self, reversed);\n                    }\n                }\n                if (associative && self.is_number(compressor)) {\n                    // a + (b + c) => (a + b) + c\n                    if (self.right instanceof AST_Binary\n                        && self.right.operator == self.operator) {\n                        self = make_node(AST_Binary, self, {\n                            operator: self.operator,\n                            left: make_node(AST_Binary, self.left, {\n                                operator: self.operator,\n                                left: self.left,\n                                right: self.right.left,\n                                start: self.left.start,\n                                end: self.right.left.end\n                            }),\n                            right: self.right.right\n                        });\n                    }\n                    // (n + 2) + 3 => 5 + n\n                    // (2 * n) * 3 => 6 + n\n                    if (self.right instanceof AST_Constant\n                        && self.left instanceof AST_Binary\n                        && self.left.operator == self.operator) {\n                        if (self.left.left instanceof AST_Constant) {\n                            self = make_node(AST_Binary, self, {\n                                operator: self.operator,\n                                left: make_node(AST_Binary, self.left, {\n                                    operator: self.operator,\n                                    left: self.left.left,\n                                    right: self.right,\n                                    start: self.left.left.start,\n                                    end: self.right.end\n                                }),\n                                right: self.left.right\n                            });\n                        } else if (self.left.right instanceof AST_Constant) {\n                            self = make_node(AST_Binary, self, {\n                                operator: self.operator,\n                                left: make_node(AST_Binary, self.left, {\n                                    operator: self.operator,\n                                    left: self.left.right,\n                                    right: self.right,\n                                    start: self.left.right.start,\n                                    end: self.right.end\n                                }),\n                                right: self.left.left\n                            });\n                        }\n                    }\n                    // (a | 1) | (2 | d) => (3 | a) | b\n                    if (self.left instanceof AST_Binary\n                        && self.left.operator == self.operator\n                        && self.left.right instanceof AST_Constant\n                        && self.right instanceof AST_Binary\n                        && self.right.operator == self.operator\n                        && self.right.left instanceof AST_Constant) {\n                        self = make_node(AST_Binary, self, {\n                            operator: self.operator,\n                            left: make_node(AST_Binary, self.left, {\n                                operator: self.operator,\n                                left: make_node(AST_Binary, self.left.left, {\n                                    operator: self.operator,\n                                    left: self.left.right,\n                                    right: self.right.left,\n                                    start: self.left.right.start,\n                                    end: self.right.left.end\n                                }),\n                                right: self.left.left\n                            }),\n                            right: self.right.right\n                        });\n                    }\n                }\n            }\n        }\n        // x && (y && z)  ==>  x && y && z\n        // x || (y || z)  ==>  x || y || z\n        // x + (\"y\" + z)  ==>  x + \"y\" + z\n        // \"x\" + (y + \"z\")==>  \"x\" + y + \"z\"\n        if (self.right instanceof AST_Binary\n            && self.right.operator == self.operator\n            && (self.operator == \"&&\"\n                || self.operator == \"||\"\n                || (self.operator == \"+\"\n                    && (self.right.left.is_string(compressor)\n                        || (self.left.is_string(compressor)\n                            && self.right.right.is_string(compressor))))))\n        {\n            self.left = make_node(AST_Binary, self.left, {\n                operator : self.operator,\n                left     : self.left,\n                right    : self.right.left\n            });\n            self.right = self.right.right;\n            return self.transform(compressor);\n        }\n        var ev = self.evaluate(compressor);\n        if (ev !== self) {\n            ev = make_node_from_constant(ev, self).optimize(compressor);\n            return best_of(compressor, ev, self);\n        }\n        return self;\n    });\n\n    OPT(AST_SymbolRef, function(self, compressor){\n        var def = self.resolve_defines(compressor);\n        if (def) {\n            return def.optimize(compressor);\n        }\n        // testing against !self.scope.uses_with first is an optimization\n        if (compressor.option(\"screw_ie8\")\n            && self.undeclared()\n            && (!self.scope.uses_with || !compressor.find_parent(AST_With))) {\n            switch (self.name) {\n              case \"undefined\":\n                return make_node(AST_Undefined, self).optimize(compressor);\n              case \"NaN\":\n                return make_node(AST_NaN, self).optimize(compressor);\n              case \"Infinity\":\n                return make_node(AST_Infinity, self).optimize(compressor);\n            }\n        }\n        if (compressor.option(\"evaluate\") && compressor.option(\"reduce_vars\")) {\n            var d = self.definition();\n            var fixed = self.fixed_value();\n            if (fixed) {\n                if (d.should_replace === undefined) {\n                    var init = fixed.evaluate(compressor);\n                    if (init !== fixed) {\n                        init = make_node_from_constant(init, fixed);\n                        var value = best_of_expression(init.optimize(compressor), fixed).print_to_string().length;\n                        var name = d.name.length;\n                        var freq = d.references.length;\n                        var overhead = d.global || !freq ? 0 : (name + 2 + value) / freq;\n                        d.should_replace = value <= name + overhead ? init : false;\n                    } else {\n                        d.should_replace = false;\n                    }\n                }\n                if (d.should_replace) {\n                    return best_of_expression(d.should_replace.optimize(compressor), fixed).clone(true);\n                }\n            }\n        }\n        return self;\n    });\n\n    function is_atomic(lhs, self) {\n        return lhs instanceof AST_SymbolRef || lhs.TYPE === self.TYPE;\n    }\n\n    OPT(AST_Undefined, function(self, compressor){\n        if (compressor.option(\"unsafe\")) {\n            var undef = find_variable(compressor, \"undefined\");\n            if (undef) {\n                var ref = make_node(AST_SymbolRef, self, {\n                    name   : \"undefined\",\n                    scope  : undef.scope,\n                    thedef : undef\n                });\n                ref.is_undefined = true;\n                return ref;\n            }\n        }\n        var lhs = is_lhs(compressor.self(), compressor.parent());\n        if (lhs && is_atomic(lhs, self)) return self;\n        return make_node(AST_UnaryPrefix, self, {\n            operator: \"void\",\n            expression: make_node(AST_Number, self, {\n                value: 0\n            })\n        });\n    });\n\n    OPT(AST_Infinity, function(self, compressor){\n        var lhs = is_lhs(compressor.self(), compressor.parent());\n        if (lhs && is_atomic(lhs, self)) return self;\n        if (compressor.option(\"keep_infinity\")\n            && !(lhs && !is_atomic(lhs, self))\n            && !find_variable(compressor, \"Infinity\"))\n            return self;\n        return make_node(AST_Binary, self, {\n            operator: \"/\",\n            left: make_node(AST_Number, self, {\n                value: 1\n            }),\n            right: make_node(AST_Number, self, {\n                value: 0\n            })\n        });\n    });\n\n    OPT(AST_NaN, function(self, compressor){\n        var lhs = is_lhs(compressor.self(), compressor.parent());\n        if (lhs && !is_atomic(lhs, self)\n            || find_variable(compressor, \"NaN\")) {\n            return make_node(AST_Binary, self, {\n                operator: \"/\",\n                left: make_node(AST_Number, self, {\n                    value: 0\n                }),\n                right: make_node(AST_Number, self, {\n                    value: 0\n                })\n            });\n        }\n        return self;\n    });\n\n    var ASSIGN_OPS = [ '+', '-', '/', '*', '%', '>>', '<<', '>>>', '|', '^', '&' ];\n    var ASSIGN_OPS_COMMUTATIVE = [ '*', '|', '^', '&' ];\n    OPT(AST_Assign, function(self, compressor){\n        self = self.lift_sequences(compressor);\n        if (self.operator == \"=\" && self.left instanceof AST_SymbolRef && self.right instanceof AST_Binary) {\n            // x = expr1 OP expr2\n            if (self.right.left instanceof AST_SymbolRef\n                && self.right.left.name == self.left.name\n                && member(self.right.operator, ASSIGN_OPS)) {\n                // x = x - 2  --->  x -= 2\n                self.operator = self.right.operator + \"=\";\n                self.right = self.right.right;\n            }\n            else if (self.right.right instanceof AST_SymbolRef\n                && self.right.right.name == self.left.name\n                && member(self.right.operator, ASSIGN_OPS_COMMUTATIVE)\n                && !self.right.left.has_side_effects(compressor)) {\n                // x = 2 & x  --->  x &= 2\n                self.operator = self.right.operator + \"=\";\n                self.right = self.right.left;\n            }\n        }\n        return self;\n    });\n\n    OPT(AST_Conditional, function(self, compressor){\n        if (!compressor.option(\"conditionals\")) return self;\n        if (self.condition instanceof AST_Seq) {\n            var car = self.condition.car;\n            self.condition = self.condition.cdr;\n            return AST_Seq.cons(car, self);\n        }\n        var cond = self.condition.evaluate(compressor);\n        if (cond !== self.condition) {\n            if (cond) {\n                compressor.warn(\"Condition always true [{file}:{line},{col}]\", self.start);\n                return maintain_this_binding(compressor.parent(), self, self.consequent);\n            } else {\n                compressor.warn(\"Condition always false [{file}:{line},{col}]\", self.start);\n                return maintain_this_binding(compressor.parent(), self, self.alternative);\n            }\n        }\n        var negated = cond.negate(compressor, first_in_statement(compressor));\n        if (best_of(compressor, cond, negated) === negated) {\n            self = make_node(AST_Conditional, self, {\n                condition: negated,\n                consequent: self.alternative,\n                alternative: self.consequent\n            });\n        }\n        var condition = self.condition;\n        var consequent = self.consequent;\n        var alternative = self.alternative;\n        // x?x:y --> x||y\n        if (condition instanceof AST_SymbolRef\n            && consequent instanceof AST_SymbolRef\n            && condition.definition() === consequent.definition()) {\n            return make_node(AST_Binary, self, {\n                operator: \"||\",\n                left: condition,\n                right: alternative\n            });\n        }\n        // if (foo) exp = something; else exp = something_else;\n        //                   |\n        //                   v\n        // exp = foo ? something : something_else;\n        if (consequent instanceof AST_Assign\n            && alternative instanceof AST_Assign\n            && consequent.operator == alternative.operator\n            && consequent.left.equivalent_to(alternative.left)\n            && (!self.condition.has_side_effects(compressor)\n                || consequent.operator == \"=\"\n                    && !consequent.left.has_side_effects(compressor))) {\n            return make_node(AST_Assign, self, {\n                operator: consequent.operator,\n                left: consequent.left,\n                right: make_node(AST_Conditional, self, {\n                    condition: self.condition,\n                    consequent: consequent.right,\n                    alternative: alternative.right\n                })\n            });\n        }\n        // x ? y(a) : y(b) --> y(x ? a : b)\n        if (consequent instanceof AST_Call\n            && alternative.TYPE === consequent.TYPE\n            && consequent.args.length == 1\n            && alternative.args.length == 1\n            && consequent.expression.equivalent_to(alternative.expression)\n            && !consequent.expression.has_side_effects(compressor)) {\n            consequent.args[0] = make_node(AST_Conditional, self, {\n                condition: self.condition,\n                consequent: consequent.args[0],\n                alternative: alternative.args[0]\n            });\n            return consequent;\n        }\n        // x?y?z:a:a --> x&&y?z:a\n        if (consequent instanceof AST_Conditional\n            && consequent.alternative.equivalent_to(alternative)) {\n            return make_node(AST_Conditional, self, {\n                condition: make_node(AST_Binary, self, {\n                    left: self.condition,\n                    operator: \"&&\",\n                    right: consequent.condition\n                }),\n                consequent: consequent.consequent,\n                alternative: alternative\n            });\n        }\n        // x ? y : y --> x, y\n        if (consequent.equivalent_to(alternative)) {\n            return make_node(AST_Seq, self, {\n                car: self.condition,\n                cdr: consequent\n            }).optimize(compressor);\n        }\n\n        if (is_true(self.consequent)) {\n            if (is_false(self.alternative)) {\n                // c ? true : false ---> !!c\n                return booleanize(self.condition);\n            }\n            // c ? true : x ---> !!c || x\n            return make_node(AST_Binary, self, {\n                operator: \"||\",\n                left: booleanize(self.condition),\n                right: self.alternative\n            });\n        }\n        if (is_false(self.consequent)) {\n            if (is_true(self.alternative)) {\n                // c ? false : true ---> !c\n                return booleanize(self.condition.negate(compressor));\n            }\n            // c ? false : x ---> !c && x\n            return make_node(AST_Binary, self, {\n                operator: \"&&\",\n                left: booleanize(self.condition.negate(compressor)),\n                right: self.alternative\n            });\n        }\n        if (is_true(self.alternative)) {\n            // c ? x : true ---> !c || x\n            return make_node(AST_Binary, self, {\n                operator: \"||\",\n                left: booleanize(self.condition.negate(compressor)),\n                right: self.consequent\n            });\n        }\n        if (is_false(self.alternative)) {\n            // c ? x : false ---> !!c && x\n            return make_node(AST_Binary, self, {\n                operator: \"&&\",\n                left: booleanize(self.condition),\n                right: self.consequent\n            });\n        }\n\n        return self;\n\n        function booleanize(node) {\n            if (node.is_boolean()) return node;\n            // !!expression\n            return make_node(AST_UnaryPrefix, node, {\n                operator: \"!\",\n                expression: node.negate(compressor)\n            });\n        }\n\n        // AST_True or !0\n        function is_true(node) {\n            return node instanceof AST_True\n                || (node instanceof AST_UnaryPrefix\n                    && node.operator == \"!\"\n                    && node.expression instanceof AST_Constant\n                    && !node.expression.value);\n        }\n        // AST_False or !1\n        function is_false(node) {\n            return node instanceof AST_False\n                || (node instanceof AST_UnaryPrefix\n                    && node.operator == \"!\"\n                    && node.expression instanceof AST_Constant\n                    && !!node.expression.value);\n        }\n    });\n\n    OPT(AST_Boolean, function(self, compressor){\n        if (compressor.option(\"booleans\")) {\n            var p = compressor.parent();\n            if (p instanceof AST_Binary && (p.operator == \"==\"\n                                            || p.operator == \"!=\")) {\n                compressor.warn(\"Non-strict equality against boolean: {operator} {value} [{file}:{line},{col}]\", {\n                    operator : p.operator,\n                    value    : self.value,\n                    file     : p.start.file,\n                    line     : p.start.line,\n                    col      : p.start.col,\n                });\n                return make_node(AST_Number, self, {\n                    value: +self.value\n                });\n            }\n            return make_node(AST_UnaryPrefix, self, {\n                operator: \"!\",\n                expression: make_node(AST_Number, self, {\n                    value: 1 - self.value\n                })\n            });\n        }\n        return self;\n    });\n\n    OPT(AST_Sub, function(self, compressor){\n        var prop = self.property;\n        if (prop instanceof AST_String && compressor.option(\"properties\")) {\n            prop = prop.getValue();\n            if (RESERVED_WORDS(prop) ? compressor.option(\"screw_ie8\") : is_identifier_string(prop)) {\n                return make_node(AST_Dot, self, {\n                    expression : self.expression,\n                    property   : prop\n                }).optimize(compressor);\n            }\n            var v = parseFloat(prop);\n            if (!isNaN(v) && v.toString() == prop) {\n                self.property = make_node(AST_Number, self.property, {\n                    value: v\n                });\n            }\n        }\n        var ev = self.evaluate(compressor);\n        if (ev !== self) {\n            ev = make_node_from_constant(ev, self).optimize(compressor);\n            return best_of(compressor, ev, self);\n        }\n        return self;\n    });\n\n    OPT(AST_Dot, function(self, compressor){\n        var def = self.resolve_defines(compressor);\n        if (def) {\n            return def.optimize(compressor);\n        }\n        var prop = self.property;\n        if (RESERVED_WORDS(prop) && !compressor.option(\"screw_ie8\")) {\n            return make_node(AST_Sub, self, {\n                expression : self.expression,\n                property   : make_node(AST_String, self, {\n                    value: prop\n                })\n            }).optimize(compressor);\n        }\n        if (compressor.option(\"unsafe_proto\")\n            && self.expression instanceof AST_Dot\n            && self.expression.property == \"prototype\") {\n            var exp = self.expression.expression;\n            if (exp instanceof AST_SymbolRef && exp.undeclared()) switch (exp.name) {\n              case \"Array\":\n                self.expression = make_node(AST_Array, self.expression, {\n                    elements: []\n                });\n                break;\n              case \"Object\":\n                self.expression = make_node(AST_Object, self.expression, {\n                    properties: []\n                });\n                break;\n              case \"String\":\n                self.expression = make_node(AST_String, self.expression, {\n                    value: \"\"\n                });\n                break;\n            }\n        }\n        var ev = self.evaluate(compressor);\n        if (ev !== self) {\n            ev = make_node_from_constant(ev, self).optimize(compressor);\n            return best_of(compressor, ev, self);\n        }\n        return self;\n    });\n\n    function literals_in_boolean_context(self, compressor) {\n        if (compressor.option(\"booleans\") && compressor.in_boolean_context()) {\n            return best_of(compressor, self, make_node(AST_Seq, self, {\n                car: self,\n                cdr: make_node(AST_True, self)\n            }).optimize(compressor));\n        }\n        return self;\n    };\n    OPT(AST_Array, literals_in_boolean_context);\n    OPT(AST_Object, literals_in_boolean_context);\n    OPT(AST_RegExp, literals_in_boolean_context);\n\n    OPT(AST_Return, function(self, compressor){\n        if (self.value && is_undefined(self.value, compressor)) {\n            self.value = null;\n        }\n        return self;\n    });\n\n    OPT(AST_VarDef, function(self, compressor){\n        var defines = compressor.option(\"global_defs\");\n        if (defines && HOP(defines, self.name.name)) {\n            compressor.warn('global_defs ' + self.name.name + ' redefined [{file}:{line},{col}]', self.start);\n        }\n        return self;\n    });\n\n})();\n","/home/travis/build/npmtest/node-npmtest-uglify-js/node_modules/uglify-js/lib/mozilla-ast.js":"/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\n(function(){\n\n    var normalize_directives = function(body) {\n        var in_directive = true;\n\n        for (var i = 0; i < body.length; i++) {\n            if (in_directive && body[i] instanceof AST_Statement && body[i].body instanceof AST_String) {\n                body[i] = new AST_Directive({\n                    start: body[i].start,\n                    end: body[i].end,\n                    value: body[i].body.value\n                });\n            } else if (in_directive && !(body[i] instanceof AST_Statement && body[i].body instanceof AST_String)) {\n                in_directive = false;\n            }\n        }\n\n        return body;\n    };\n\n    var MOZ_TO_ME = {\n        Program: function(M) {\n            return new AST_Toplevel({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                body: normalize_directives(M.body.map(from_moz))\n            });\n        },\n        FunctionDeclaration: function(M) {\n            return new AST_Defun({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                name: from_moz(M.id),\n                argnames: M.params.map(from_moz),\n                body: normalize_directives(from_moz(M.body).body)\n            });\n        },\n        FunctionExpression: function(M) {\n            return new AST_Function({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                name: from_moz(M.id),\n                argnames: M.params.map(from_moz),\n                body: normalize_directives(from_moz(M.body).body)\n            });\n        },\n        ExpressionStatement: function(M) {\n            return new AST_SimpleStatement({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                body: from_moz(M.expression)\n            });\n        },\n        TryStatement: function(M) {\n            var handlers = M.handlers || [M.handler];\n            if (handlers.length > 1 || M.guardedHandlers && M.guardedHandlers.length) {\n                throw new Error(\"Multiple catch clauses are not supported.\");\n            }\n            return new AST_Try({\n                start    : my_start_token(M),\n                end      : my_end_token(M),\n                body     : from_moz(M.block).body,\n                bcatch   : from_moz(handlers[0]),\n                bfinally : M.finalizer ? new AST_Finally(from_moz(M.finalizer)) : null\n            });\n        },\n        Property: function(M) {\n            var key = M.key;\n            var name = key.type == \"Identifier\" ? key.name : key.value;\n            var args = {\n                start    : my_start_token(key),\n                end      : my_end_token(M.value),\n                key      : name,\n                value    : from_moz(M.value)\n            };\n            switch (M.kind) {\n              case \"init\":\n                return new AST_ObjectKeyVal(args);\n              case \"set\":\n                args.value.name = from_moz(key);\n                return new AST_ObjectSetter(args);\n              case \"get\":\n                args.value.name = from_moz(key);\n                return new AST_ObjectGetter(args);\n            }\n        },\n        ArrayExpression: function(M) {\n            return new AST_Array({\n                start    : my_start_token(M),\n                end      : my_end_token(M),\n                elements : M.elements.map(function(elem){\n                    return elem === null ? new AST_Hole() : from_moz(elem);\n                })\n            });\n        },\n        ObjectExpression: function(M) {\n            return new AST_Object({\n                start      : my_start_token(M),\n                end        : my_end_token(M),\n                properties : M.properties.map(function(prop){\n                    prop.type = \"Property\";\n                    return from_moz(prop)\n                })\n            });\n        },\n        SequenceExpression: function(M) {\n            return AST_Seq.from_array(M.expressions.map(from_moz));\n        },\n        MemberExpression: function(M) {\n            return new (M.computed ? AST_Sub : AST_Dot)({\n                start      : my_start_token(M),\n                end        : my_end_token(M),\n                property   : M.computed ? from_moz(M.property) : M.property.name,\n                expression : from_moz(M.object)\n            });\n        },\n        SwitchCase: function(M) {\n            return new (M.test ? AST_Case : AST_Default)({\n                start      : my_start_token(M),\n                end        : my_end_token(M),\n                expression : from_moz(M.test),\n                body       : M.consequent.map(from_moz)\n            });\n        },\n        VariableDeclaration: function(M) {\n            return new (M.kind === \"const\" ? AST_Const : AST_Var)({\n                start       : my_start_token(M),\n                end         : my_end_token(M),\n                definitions : M.declarations.map(from_moz)\n            });\n        },\n        Literal: function(M) {\n            var val = M.value, args = {\n                start  : my_start_token(M),\n                end    : my_end_token(M)\n            };\n            if (val === null) return new AST_Null(args);\n            switch (typeof val) {\n              case \"string\":\n                args.value = val;\n                return new AST_String(args);\n              case \"number\":\n                args.value = val;\n                return new AST_Number(args);\n              case \"boolean\":\n                return new (val ? AST_True : AST_False)(args);\n              default:\n                var rx = M.regex;\n                if (rx && rx.pattern) {\n                    // RegExpLiteral as per ESTree AST spec\n                    args.value = new RegExp(rx.pattern, rx.flags).toString();\n                } else {\n                    // support legacy RegExp\n                    args.value = M.regex && M.raw ? M.raw : val;\n                }\n                return new AST_RegExp(args);\n            }\n        },\n        Identifier: function(M) {\n            var p = FROM_MOZ_STACK[FROM_MOZ_STACK.length - 2];\n            return new (  p.type == \"LabeledStatement\" ? AST_Label\n                        : p.type == \"VariableDeclarator\" && p.id === M ? (p.kind == \"const\" ? AST_SymbolConst : AST_SymbolVar)\n                        : p.type == \"FunctionExpression\" ? (p.id === M ? AST_SymbolLambda : AST_SymbolFunarg)\n                        : p.type == \"FunctionDeclaration\" ? (p.id === M ? AST_SymbolDefun : AST_SymbolFunarg)\n                        : p.type == \"CatchClause\" ? AST_SymbolCatch\n                        : p.type == \"BreakStatement\" || p.type == \"ContinueStatement\" ? AST_LabelRef\n                        : AST_SymbolRef)({\n                            start : my_start_token(M),\n                            end   : my_end_token(M),\n                            name  : M.name\n                        });\n        }\n    };\n\n    MOZ_TO_ME.UpdateExpression =\n    MOZ_TO_ME.UnaryExpression = function To_Moz_Unary(M) {\n        var prefix = \"prefix\" in M ? M.prefix\n            : M.type == \"UnaryExpression\" ? true : false;\n        return new (prefix ? AST_UnaryPrefix : AST_UnaryPostfix)({\n            start      : my_start_token(M),\n            end        : my_end_token(M),\n            operator   : M.operator,\n            expression : from_moz(M.argument)\n        });\n    };\n\n    map(\"EmptyStatement\", AST_EmptyStatement);\n    map(\"BlockStatement\", AST_BlockStatement, \"body@body\");\n    map(\"IfStatement\", AST_If, \"test>condition, consequent>body, alternate>alternative\");\n    map(\"LabeledStatement\", AST_LabeledStatement, \"label>label, body>body\");\n    map(\"BreakStatement\", AST_Break, \"label>label\");\n    map(\"ContinueStatement\", AST_Continue, \"label>label\");\n    map(\"WithStatement\", AST_With, \"object>expression, body>body\");\n    map(\"SwitchStatement\", AST_Switch, \"discriminant>expression, cases@body\");\n    map(\"ReturnStatement\", AST_Return, \"argument>value\");\n    map(\"ThrowStatement\", AST_Throw, \"argument>value\");\n    map(\"WhileStatement\", AST_While, \"test>condition, body>body\");\n    map(\"DoWhileStatement\", AST_Do, \"test>condition, body>body\");\n    map(\"ForStatement\", AST_For, \"init>init, test>condition, update>step, body>body\");\n    map(\"ForInStatement\", AST_ForIn, \"left>init, right>object, body>body\");\n    map(\"DebuggerStatement\", AST_Debugger);\n    map(\"VariableDeclarator\", AST_VarDef, \"id>name, init>value\");\n    map(\"CatchClause\", AST_Catch, \"param>argname, body%body\");\n\n    map(\"ThisExpression\", AST_This);\n    map(\"BinaryExpression\", AST_Binary, \"operator=operator, left>left, right>right\");\n    map(\"LogicalExpression\", AST_Binary, \"operator=operator, left>left, right>right\");\n    map(\"AssignmentExpression\", AST_Assign, \"operator=operator, left>left, right>right\");\n    map(\"ConditionalExpression\", AST_Conditional, \"test>condition, consequent>consequent, alternate>alternative\");\n    map(\"NewExpression\", AST_New, \"callee>expression, arguments@args\");\n    map(\"CallExpression\", AST_Call, \"callee>expression, arguments@args\");\n\n    def_to_moz(AST_Toplevel, function To_Moz_Program(M) {\n        return {\n            type: \"Program\",\n            body: M.body.map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_Defun, function To_Moz_FunctionDeclaration(M) {\n        return {\n            type: \"FunctionDeclaration\",\n            id: to_moz(M.name),\n            params: M.argnames.map(to_moz),\n            body: to_moz_block(M)\n        }\n    });\n\n    def_to_moz(AST_Function, function To_Moz_FunctionExpression(M) {\n        return {\n            type: \"FunctionExpression\",\n            id: to_moz(M.name),\n            params: M.argnames.map(to_moz),\n            body: to_moz_block(M)\n        }\n    });\n\n    def_to_moz(AST_Directive, function To_Moz_Directive(M) {\n        return {\n            type: \"ExpressionStatement\",\n            expression: {\n                type: \"Literal\",\n                value: M.value\n            }\n        };\n    });\n\n    def_to_moz(AST_SimpleStatement, function To_Moz_ExpressionStatement(M) {\n        return {\n            type: \"ExpressionStatement\",\n            expression: to_moz(M.body)\n        };\n    });\n\n    def_to_moz(AST_SwitchBranch, function To_Moz_SwitchCase(M) {\n        return {\n            type: \"SwitchCase\",\n            test: to_moz(M.expression),\n            consequent: M.body.map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_Try, function To_Moz_TryStatement(M) {\n        return {\n            type: \"TryStatement\",\n            block: to_moz_block(M),\n            handler: to_moz(M.bcatch),\n            guardedHandlers: [],\n            finalizer: to_moz(M.bfinally)\n        };\n    });\n\n    def_to_moz(AST_Catch, function To_Moz_CatchClause(M) {\n        return {\n            type: \"CatchClause\",\n            param: to_moz(M.argname),\n            guard: null,\n            body: to_moz_block(M)\n        };\n    });\n\n    def_to_moz(AST_Definitions, function To_Moz_VariableDeclaration(M) {\n        return {\n            type: \"VariableDeclaration\",\n            kind: M instanceof AST_Const ? \"const\" : \"var\",\n            declarations: M.definitions.map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_Seq, function To_Moz_SequenceExpression(M) {\n        return {\n            type: \"SequenceExpression\",\n            expressions: M.to_array().map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_PropAccess, function To_Moz_MemberExpression(M) {\n        var isComputed = M instanceof AST_Sub;\n        return {\n            type: \"MemberExpression\",\n            object: to_moz(M.expression),\n            computed: isComputed,\n            property: isComputed ? to_moz(M.property) : {type: \"Identifier\", name: M.property}\n        };\n    });\n\n    def_to_moz(AST_Unary, function To_Moz_Unary(M) {\n        return {\n            type: M.operator == \"++\" || M.operator == \"--\" ? \"UpdateExpression\" : \"UnaryExpression\",\n            operator: M.operator,\n            prefix: M instanceof AST_UnaryPrefix,\n            argument: to_moz(M.expression)\n        };\n    });\n\n    def_to_moz(AST_Binary, function To_Moz_BinaryExpression(M) {\n        return {\n            type: M.operator == \"&&\" || M.operator == \"||\" ? \"LogicalExpression\" : \"BinaryExpression\",\n            left: to_moz(M.left),\n            operator: M.operator,\n            right: to_moz(M.right)\n        };\n    });\n\n    def_to_moz(AST_Array, function To_Moz_ArrayExpression(M) {\n        return {\n            type: \"ArrayExpression\",\n            elements: M.elements.map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_Object, function To_Moz_ObjectExpression(M) {\n        return {\n            type: \"ObjectExpression\",\n            properties: M.properties.map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_ObjectProperty, function To_Moz_Property(M) {\n        var key = (\n            is_identifier(M.key)\n            ? {type: \"Identifier\", name: M.key}\n            : {type: \"Literal\", value: M.key}\n        );\n        var kind;\n        if (M instanceof AST_ObjectKeyVal) {\n            kind = \"init\";\n        } else\n        if (M instanceof AST_ObjectGetter) {\n            kind = \"get\";\n        } else\n        if (M instanceof AST_ObjectSetter) {\n            kind = \"set\";\n        }\n        return {\n            type: \"Property\",\n            kind: kind,\n            key: key,\n            value: to_moz(M.value)\n        };\n    });\n\n    def_to_moz(AST_Symbol, function To_Moz_Identifier(M) {\n        var def = M.definition();\n        return {\n            type: \"Identifier\",\n            name: def ? def.mangled_name || def.name : M.name\n        };\n    });\n\n    def_to_moz(AST_RegExp, function To_Moz_RegExpLiteral(M) {\n        var value = M.value;\n        return {\n            type: \"Literal\",\n            value: value,\n            raw: value.toString(),\n            regex: {\n                pattern: value.source,\n                flags: value.toString().match(/[gimuy]*$/)[0]\n            }\n        };\n    });\n\n    def_to_moz(AST_Constant, function To_Moz_Literal(M) {\n        var value = M.value;\n        if (typeof value === 'number' && (value < 0 || (value === 0 && 1 / value < 0))) {\n            return {\n                type: \"UnaryExpression\",\n                operator: \"-\",\n                prefix: true,\n                argument: {\n                    type: \"Literal\",\n                    value: -value,\n                    raw: M.start.raw\n                }\n            };\n        }\n        return {\n            type: \"Literal\",\n            value: value,\n            raw: M.start.raw\n        };\n    });\n\n    def_to_moz(AST_Atom, function To_Moz_Atom(M) {\n        return {\n            type: \"Identifier\",\n            name: String(M.value)\n        };\n    });\n\n    AST_Boolean.DEFMETHOD(\"to_mozilla_ast\", AST_Constant.prototype.to_mozilla_ast);\n    AST_Null.DEFMETHOD(\"to_mozilla_ast\", AST_Constant.prototype.to_mozilla_ast);\n    AST_Hole.DEFMETHOD(\"to_mozilla_ast\", function To_Moz_ArrayHole() { return null });\n\n    AST_Block.DEFMETHOD(\"to_mozilla_ast\", AST_BlockStatement.prototype.to_mozilla_ast);\n    AST_Lambda.DEFMETHOD(\"to_mozilla_ast\", AST_Function.prototype.to_mozilla_ast);\n\n    /* -----[ tools ]----- */\n\n    function raw_token(moznode) {\n        if (moznode.type == \"Literal\") {\n            return moznode.raw != null ? moznode.raw : moznode.value + \"\";\n        }\n    }\n\n    function my_start_token(moznode) {\n        var loc = moznode.loc, start = loc && loc.start;\n        var range = moznode.range;\n        return new AST_Token({\n            file    : loc && loc.source,\n            line    : start && start.line,\n            col     : start && start.column,\n            pos     : range ? range[0] : moznode.start,\n            endline : start && start.line,\n            endcol  : start && start.column,\n            endpos  : range ? range[0] : moznode.start,\n            raw     : raw_token(moznode),\n        });\n    };\n\n    function my_end_token(moznode) {\n        var loc = moznode.loc, end = loc && loc.end;\n        var range = moznode.range;\n        return new AST_Token({\n            file    : loc && loc.source,\n            line    : end && end.line,\n            col     : end && end.column,\n            pos     : range ? range[1] : moznode.end,\n            endline : end && end.line,\n            endcol  : end && end.column,\n            endpos  : range ? range[1] : moznode.end,\n            raw     : raw_token(moznode),\n        });\n    };\n\n    function map(moztype, mytype, propmap) {\n        var moz_to_me = \"function From_Moz_\" + moztype + \"(M){\\n\";\n        moz_to_me += \"return new U2.\" + mytype.name + \"({\\n\" +\n            \"start: my_start_token(M),\\n\" +\n            \"end: my_end_token(M)\";\n\n        var me_to_moz = \"function To_Moz_\" + moztype + \"(M){\\n\";\n        me_to_moz += \"return {\\n\" +\n            \"type: \" + JSON.stringify(moztype);\n\n        if (propmap) propmap.split(/\\s*,\\s*/).forEach(function(prop){\n            var m = /([a-z0-9$_]+)(=|@|>|%)([a-z0-9$_]+)/i.exec(prop);\n            if (!m) throw new Error(\"Can't understand property map: \" + prop);\n            var moz = m[1], how = m[2], my = m[3];\n            moz_to_me += \",\\n\" + my + \": \";\n            me_to_moz += \",\\n\" + moz + \": \";\n            switch (how) {\n                case \"@\":\n                    moz_to_me += \"M.\" + moz + \".map(from_moz)\";\n                    me_to_moz += \"M.\" +  my + \".map(to_moz)\";\n                    break;\n                case \">\":\n                    moz_to_me += \"from_moz(M.\" + moz + \")\";\n                    me_to_moz += \"to_moz(M.\" + my + \")\";\n                    break;\n                case \"=\":\n                    moz_to_me += \"M.\" + moz;\n                    me_to_moz += \"M.\" + my;\n                    break;\n                case \"%\":\n                    moz_to_me += \"from_moz(M.\" + moz + \").body\";\n                    me_to_moz += \"to_moz_block(M)\";\n                    break;\n                default:\n                    throw new Error(\"Can't understand operator in propmap: \" + prop);\n            }\n        });\n\n        moz_to_me += \"\\n})\\n}\";\n        me_to_moz += \"\\n}\\n}\";\n\n        //moz_to_me = parse(moz_to_me).print_to_string({ beautify: true });\n        //me_to_moz = parse(me_to_moz).print_to_string({ beautify: true });\n        //console.log(moz_to_me);\n\n        moz_to_me = new Function(\"U2\", \"my_start_token\", \"my_end_token\", \"from_moz\", \"return(\" + moz_to_me + \")\")(\n            exports, my_start_token, my_end_token, from_moz\n        );\n        me_to_moz = new Function(\"to_moz\", \"to_moz_block\", \"return(\" + me_to_moz + \")\")(\n            to_moz, to_moz_block\n        );\n        MOZ_TO_ME[moztype] = moz_to_me;\n        def_to_moz(mytype, me_to_moz);\n    };\n\n    var FROM_MOZ_STACK = null;\n\n    function from_moz(node) {\n        FROM_MOZ_STACK.push(node);\n        var ret = node != null ? MOZ_TO_ME[node.type](node) : null;\n        FROM_MOZ_STACK.pop();\n        return ret;\n    };\n\n    AST_Node.from_mozilla_ast = function(node){\n        var save_stack = FROM_MOZ_STACK;\n        FROM_MOZ_STACK = [];\n        var ast = from_moz(node);\n        FROM_MOZ_STACK = save_stack;\n        return ast;\n    };\n\n    function set_moz_loc(mynode, moznode, myparent) {\n        var start = mynode.start;\n        var end = mynode.end;\n        if (start.pos != null && end.endpos != null) {\n            moznode.range = [start.pos, end.endpos];\n        }\n        if (start.line) {\n            moznode.loc = {\n                start: {line: start.line, column: start.col},\n                end: end.endline ? {line: end.endline, column: end.endcol} : null\n            };\n            if (start.file) {\n                moznode.loc.source = start.file;\n            }\n        }\n        return moznode;\n    };\n\n    function def_to_moz(mytype, handler) {\n        mytype.DEFMETHOD(\"to_mozilla_ast\", function() {\n            return set_moz_loc(this, handler(this));\n        });\n    };\n\n    function to_moz(node) {\n        return node != null ? node.to_mozilla_ast() : null;\n    };\n\n    function to_moz_block(node) {\n        return {\n            type: \"BlockStatement\",\n            body: node.body.map(to_moz)\n        };\n    };\n\n})();\n","/home/travis/build/npmtest/node-npmtest-uglify-js/node_modules/uglify-js/lib/output.js":"/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nvar EXPECT_DIRECTIVE = /^$|[;{][\\s\\n]*$/;\n\nfunction is_some_comments(comment) {\n    // multiline comment\n    return comment.type == \"comment2\" && /@preserve|@license|@cc_on/i.test(comment.value);\n}\n\nfunction OutputStream(options) {\n\n    options = defaults(options, {\n        ascii_only       : false,\n        beautify         : false,\n        bracketize       : false,\n        comments         : false,\n        indent_level     : 4,\n        indent_start     : 0,\n        inline_script    : true,\n        keep_quoted_props: false,\n        max_line_len     : false,\n        preamble         : null,\n        preserve_line    : false,\n        quote_keys       : false,\n        quote_style      : 0,\n        screw_ie8        : true,\n        semicolons       : true,\n        shebang          : true,\n        source_map       : null,\n        space_colon      : true,\n        unescape_regexps : false,\n        width            : 80,\n        wrap_iife        : false,\n    }, true);\n\n    // Convert comment option to RegExp if neccessary and set up comments filter\n    var comment_filter = return_false; // Default case, throw all comments away\n    if (options.comments) {\n        var comments = options.comments;\n        if (typeof options.comments === \"string\" && /^\\/.*\\/[a-zA-Z]*$/.test(options.comments)) {\n            var regex_pos = options.comments.lastIndexOf(\"/\");\n            comments = new RegExp(\n                options.comments.substr(1, regex_pos - 1),\n                options.comments.substr(regex_pos + 1)\n            );\n        }\n        if (comments instanceof RegExp) {\n            comment_filter = function(comment) {\n                return comment.type != \"comment5\" && comments.test(comment.value);\n            };\n        }\n        else if (typeof comments === \"function\") {\n            comment_filter = function(comment) {\n                return comment.type != \"comment5\" && comments(this, comment);\n            };\n        }\n        else if (comments === \"some\") {\n            comment_filter = is_some_comments;\n        } else { // NOTE includes \"all\" option\n            comment_filter = return_true;\n        }\n    }\n\n    var indentation = 0;\n    var current_col = 0;\n    var current_line = 1;\n    var current_pos = 0;\n    var OUTPUT = \"\";\n\n    function to_ascii(str, identifier) {\n        return str.replace(/[\\u0000-\\u001f\\u007f-\\uffff]/g, function(ch) {\n            var code = ch.charCodeAt(0).toString(16);\n            if (code.length <= 2 && !identifier) {\n                while (code.length < 2) code = \"0\" + code;\n                return \"\\\\x\" + code;\n            } else {\n                while (code.length < 4) code = \"0\" + code;\n                return \"\\\\u\" + code;\n            }\n        });\n    };\n\n    function make_string(str, quote) {\n        var dq = 0, sq = 0;\n        str = str.replace(/[\\\\\\b\\f\\n\\r\\v\\t\\x22\\x27\\u2028\\u2029\\0\\ufeff]/g,\n          function(s, i){\n            switch (s) {\n              case '\"': ++dq; return '\"';\n              case \"'\": ++sq; return \"'\";\n              case \"\\\\\": return \"\\\\\\\\\";\n              case \"\\n\": return \"\\\\n\";\n              case \"\\r\": return \"\\\\r\";\n              case \"\\t\": return \"\\\\t\";\n              case \"\\b\": return \"\\\\b\";\n              case \"\\f\": return \"\\\\f\";\n              case \"\\x0B\": return options.screw_ie8 ? \"\\\\v\" : \"\\\\x0B\";\n              case \"\\u2028\": return \"\\\\u2028\";\n              case \"\\u2029\": return \"\\\\u2029\";\n              case \"\\ufeff\": return \"\\\\ufeff\";\n              case \"\\0\":\n                  return /[0-7]/.test(str.charAt(i+1)) ? \"\\\\x00\" : \"\\\\0\";\n            }\n            return s;\n        });\n        function quote_single() {\n            return \"'\" + str.replace(/\\x27/g, \"\\\\'\") + \"'\";\n        }\n        function quote_double() {\n            return '\"' + str.replace(/\\x22/g, '\\\\\"') + '\"';\n        }\n        if (options.ascii_only) str = to_ascii(str);\n        switch (options.quote_style) {\n          case 1:\n            return quote_single();\n          case 2:\n            return quote_double();\n          case 3:\n            return quote == \"'\" ? quote_single() : quote_double();\n          default:\n            return dq > sq ? quote_single() : quote_double();\n        }\n    };\n\n    function encode_string(str, quote) {\n        var ret = make_string(str, quote);\n        if (options.inline_script) {\n            ret = ret.replace(/<\\x2fscript([>\\/\\t\\n\\f\\r ])/gi, \"<\\\\/script$1\");\n            ret = ret.replace(/\\x3c!--/g, \"\\\\x3c!--\");\n            ret = ret.replace(/--\\x3e/g, \"--\\\\x3e\");\n        }\n        return ret;\n    };\n\n    function make_name(name) {\n        name = name.toString();\n        if (options.ascii_only)\n            name = to_ascii(name, true);\n        return name;\n    };\n\n    function make_indent(back) {\n        return repeat_string(\" \", options.indent_start + indentation - back * options.indent_level);\n    };\n\n    /* -----[ beautification/minification ]----- */\n\n    var might_need_space = false;\n    var might_need_semicolon = false;\n    var might_add_newline = 0;\n    var last = null;\n\n    function last_char() {\n        return last.charAt(last.length - 1);\n    };\n\n    var ensure_line_len = options.max_line_len ? function() {\n        if (current_col > options.max_line_len) {\n            if (might_add_newline) {\n                var left = OUTPUT.slice(0, might_add_newline);\n                var right = OUTPUT.slice(might_add_newline);\n                OUTPUT = left + \"\\n\" + right;\n                current_line++;\n                current_pos++;\n                current_col = right.length;\n            }\n            if (current_col > options.max_line_len) {\n                AST_Node.warn(\"Output exceeds {max_line_len} characters\", options);\n            }\n        }\n        might_add_newline = 0;\n    } : noop;\n\n    var requireSemicolonChars = makePredicate(\"( [ + * / - , .\");\n\n    function print(str) {\n        str = String(str);\n        var ch = str.charAt(0);\n        if (might_need_semicolon) {\n            might_need_semicolon = false;\n\n            if ((!ch || \";}\".indexOf(ch) < 0) && !/[;]$/.test(last)) {\n                if (options.semicolons || requireSemicolonChars(ch)) {\n                    OUTPUT += \";\";\n                    current_col++;\n                    current_pos++;\n                } else {\n                    ensure_line_len();\n                    OUTPUT += \"\\n\";\n                    current_pos++;\n                    current_line++;\n                    current_col = 0;\n\n                    if (/^\\s+$/.test(str)) {\n                        // reset the semicolon flag, since we didn't print one\n                        // now and might still have to later\n                        might_need_semicolon = true;\n                    }\n                }\n\n                if (!options.beautify)\n                    might_need_space = false;\n            }\n        }\n\n        if (!options.beautify && options.preserve_line && stack[stack.length - 1]) {\n            var target_line = stack[stack.length - 1].start.line;\n            while (current_line < target_line) {\n                ensure_line_len();\n                OUTPUT += \"\\n\";\n                current_pos++;\n                current_line++;\n                current_col = 0;\n                might_need_space = false;\n            }\n        }\n\n        if (might_need_space) {\n            var prev = last_char();\n            if ((is_identifier_char(prev)\n                    && (is_identifier_char(ch) || ch == \"\\\\\"))\n                || (ch == \"/\" && ch == prev)\n                || ((ch == \"+\" || ch == \"-\") && ch == last))\n            {\n                OUTPUT += \" \";\n                current_col++;\n                current_pos++;\n            }\n            might_need_space = false;\n        }\n        OUTPUT += str;\n        current_pos += str.length;\n        var a = str.split(/\\r?\\n/), n = a.length - 1;\n        current_line += n;\n        current_col += a[0].length;\n        if (n > 0) {\n            ensure_line_len();\n            current_col = a[n].length;\n        }\n        last = str;\n    };\n\n    var space = options.beautify ? function() {\n        print(\" \");\n    } : function() {\n        might_need_space = true;\n    };\n\n    var indent = options.beautify ? function(half) {\n        if (options.beautify) {\n            print(make_indent(half ? 0.5 : 0));\n        }\n    } : noop;\n\n    var with_indent = options.beautify ? function(col, cont) {\n        if (col === true) col = next_indent();\n        var save_indentation = indentation;\n        indentation = col;\n        var ret = cont();\n        indentation = save_indentation;\n        return ret;\n    } : function(col, cont) { return cont() };\n\n    var newline = options.beautify ? function() {\n        print(\"\\n\");\n    } : options.max_line_len ? function() {\n        ensure_line_len();\n        might_add_newline = OUTPUT.length;\n    } : noop;\n\n    var semicolon = options.beautify ? function() {\n        print(\";\");\n    } : function() {\n        might_need_semicolon = true;\n    };\n\n    function force_semicolon() {\n        might_need_semicolon = false;\n        print(\";\");\n    };\n\n    function next_indent() {\n        return indentation + options.indent_level;\n    };\n\n    function with_block(cont) {\n        var ret;\n        print(\"{\");\n        newline();\n        with_indent(next_indent(), function(){\n            ret = cont();\n        });\n        indent();\n        print(\"}\");\n        return ret;\n    };\n\n    function with_parens(cont) {\n        print(\"(\");\n        //XXX: still nice to have that for argument lists\n        //var ret = with_indent(current_col, cont);\n        var ret = cont();\n        print(\")\");\n        return ret;\n    };\n\n    function with_square(cont) {\n        print(\"[\");\n        //var ret = with_indent(current_col, cont);\n        var ret = cont();\n        print(\"]\");\n        return ret;\n    };\n\n    function comma() {\n        print(\",\");\n        space();\n    };\n\n    function colon() {\n        print(\":\");\n        if (options.space_colon) space();\n    };\n\n    var add_mapping = options.source_map ? function(token, name) {\n        try {\n            if (token) options.source_map.add(\n                token.file || \"?\",\n                current_line, current_col,\n                token.line, token.col,\n                (!name && token.type == \"name\") ? token.value : name\n            );\n        } catch(ex) {\n            AST_Node.warn(\"Couldn't figure out mapping for {file}:{line},{col} → {cline},{ccol} [{name}]\", {\n                file: token.file,\n                line: token.line,\n                col: token.col,\n                cline: current_line,\n                ccol: current_col,\n                name: name || \"\"\n            })\n        }\n    } : noop;\n\n    function get() {\n        if (might_add_newline) {\n            ensure_line_len();\n        }\n        return OUTPUT;\n    };\n\n    var stack = [];\n    return {\n        get             : get,\n        toString        : get,\n        indent          : indent,\n        indentation     : function() { return indentation },\n        current_width   : function() { return current_col - indentation },\n        should_break    : function() { return options.width && this.current_width() >= options.width },\n        newline         : newline,\n        print           : print,\n        space           : space,\n        comma           : comma,\n        colon           : colon,\n        last            : function() { return last },\n        semicolon       : semicolon,\n        force_semicolon : force_semicolon,\n        to_ascii        : to_ascii,\n        print_name      : function(name) { print(make_name(name)) },\n        print_string    : function(str, quote, escape_directive) {\n            var encoded = encode_string(str, quote);\n            if (escape_directive === true && encoded.indexOf(\"\\\\\") === -1) {\n                // Insert semicolons to break directive prologue\n                if (!EXPECT_DIRECTIVE.test(OUTPUT)) {\n                    force_semicolon();\n                }\n                force_semicolon();\n            }\n            print(encoded);\n        },\n        encode_string   : encode_string,\n        next_indent     : next_indent,\n        with_indent     : with_indent,\n        with_block      : with_block,\n        with_parens     : with_parens,\n        with_square     : with_square,\n        add_mapping     : add_mapping,\n        option          : function(opt) { return options[opt] },\n        comment_filter  : comment_filter,\n        line            : function() { return current_line },\n        col             : function() { return current_col },\n        pos             : function() { return current_pos },\n        push_node       : function(node) { stack.push(node) },\n        pop_node        : function() { return stack.pop() },\n        parent          : function(n) {\n            return stack[stack.length - 2 - (n || 0)];\n        }\n    };\n\n};\n\n/* -----[ code generators ]----- */\n\n(function(){\n\n    /* -----[ utils ]----- */\n\n    function DEFPRINT(nodetype, generator) {\n        nodetype.DEFMETHOD(\"_codegen\", generator);\n    };\n\n    var use_asm = false;\n    var in_directive = false;\n\n    AST_Node.DEFMETHOD(\"print\", function(stream, force_parens){\n        var self = this, generator = self._codegen, prev_use_asm = use_asm;\n        if (self instanceof AST_Directive && self.value == \"use asm\" && stream.parent() instanceof AST_Scope) {\n            use_asm = true;\n        }\n        function doit() {\n            self.add_comments(stream);\n            self.add_source_map(stream);\n            generator(self, stream);\n        }\n        stream.push_node(self);\n        if (force_parens || self.needs_parens(stream)) {\n            stream.with_parens(doit);\n        } else {\n            doit();\n        }\n        stream.pop_node();\n        if (self instanceof AST_Scope) {\n            use_asm = prev_use_asm;\n        }\n    });\n\n    AST_Node.DEFMETHOD(\"print_to_string\", function(options){\n        var s = OutputStream(options);\n        if (!options) s._readonly = true;\n        this.print(s);\n        return s.get();\n    });\n\n    /* -----[ comments ]----- */\n\n    AST_Node.DEFMETHOD(\"add_comments\", function(output){\n        if (output._readonly) return;\n        var self = this;\n        var start = self.start;\n        if (start && !start._comments_dumped) {\n            start._comments_dumped = true;\n            var comments = start.comments_before || [];\n\n            // XXX: ugly fix for https://github.com/mishoo/UglifyJS2/issues/112\n            //               and https://github.com/mishoo/UglifyJS2/issues/372\n            if (self instanceof AST_Exit && self.value) {\n                self.value.walk(new TreeWalker(function(node){\n                    if (node.start && node.start.comments_before) {\n                        comments = comments.concat(node.start.comments_before);\n                        node.start.comments_before = [];\n                    }\n                    if (node instanceof AST_Function ||\n                        node instanceof AST_Array ||\n                        node instanceof AST_Object)\n                    {\n                        return true; // don't go inside.\n                    }\n                }));\n            }\n\n            if (output.pos() == 0) {\n                if (comments.length > 0 && output.option(\"shebang\") && comments[0].type == \"comment5\") {\n                    output.print(\"#!\" + comments.shift().value + \"\\n\");\n                    output.indent();\n                }\n                var preamble = output.option(\"preamble\");\n                if (preamble) {\n                    output.print(preamble.replace(/\\r\\n?|[\\n\\u2028\\u2029]|\\s*$/g, \"\\n\"));\n                }\n            }\n\n            comments = comments.filter(output.comment_filter, self);\n\n            // Keep single line comments after nlb, after nlb\n            if (!output.option(\"beautify\") && comments.length > 0 &&\n                /comment[134]/.test(comments[0].type) &&\n                output.col() !== 0 && comments[0].nlb)\n            {\n                output.print(\"\\n\");\n            }\n\n            comments.forEach(function(c){\n                if (/comment[134]/.test(c.type)) {\n                    output.print(\"//\" + c.value + \"\\n\");\n                    output.indent();\n                }\n                else if (c.type == \"comment2\") {\n                    output.print(\"/*\" + c.value + \"*/\");\n                    if (start.nlb) {\n                        output.print(\"\\n\");\n                        output.indent();\n                    } else {\n                        output.space();\n                    }\n                }\n            });\n        }\n    });\n\n    /* -----[ PARENTHESES ]----- */\n\n    function PARENS(nodetype, func) {\n        if (Array.isArray(nodetype)) {\n            nodetype.forEach(function(nodetype){\n                PARENS(nodetype, func);\n            });\n        } else {\n            nodetype.DEFMETHOD(\"needs_parens\", func);\n        }\n    };\n\n    PARENS(AST_Node, function(){\n        return false;\n    });\n\n    // a function expression needs parens around it when it's provably\n    // the first token to appear in a statement.\n    PARENS(AST_Function, function(output){\n        if (first_in_statement(output)) {\n            return true;\n        }\n\n        if (output.option('wrap_iife')) {\n            var p = output.parent();\n            return p instanceof AST_Call && p.expression === this;\n        }\n\n        return false;\n    });\n\n    // same goes for an object literal, because otherwise it would be\n    // interpreted as a block of code.\n    PARENS(AST_Object, function(output){\n        return first_in_statement(output);\n    });\n\n    PARENS(AST_Unary, function(output){\n        var p = output.parent();\n        return p instanceof AST_PropAccess && p.expression === this\n            || p instanceof AST_Call && p.expression === this;\n    });\n\n    PARENS(AST_Seq, function(output){\n        var p = output.parent();\n        return p instanceof AST_Call             // (foo, bar)() or foo(1, (2, 3), 4)\n            || p instanceof AST_Unary            // !(foo, bar, baz)\n            || p instanceof AST_Binary           // 1 + (2, 3) + 4 ==> 8\n            || p instanceof AST_VarDef           // var a = (1, 2), b = a + a; ==> b == 4\n            || p instanceof AST_PropAccess       // (1, {foo:2}).foo or (1, {foo:2})[\"foo\"] ==> 2\n            || p instanceof AST_Array            // [ 1, (2, 3), 4 ] ==> [ 1, 3, 4 ]\n            || p instanceof AST_ObjectProperty   // { foo: (1, 2) }.foo ==> 2\n            || p instanceof AST_Conditional      /* (false, true) ? (a = 10, b = 20) : (c = 30)\n                                                  * ==> 20 (side effect, set a := 10 and b := 20) */\n        ;\n    });\n\n    PARENS(AST_Binary, function(output){\n        var p = output.parent();\n        // (foo && bar)()\n        if (p instanceof AST_Call && p.expression === this)\n            return true;\n        // typeof (foo && bar)\n        if (p instanceof AST_Unary)\n            return true;\n        // (foo && bar)[\"prop\"], (foo && bar).prop\n        if (p instanceof AST_PropAccess && p.expression === this)\n            return true;\n        // this deals with precedence: 3 * (2 + 1)\n        if (p instanceof AST_Binary) {\n            var po = p.operator, pp = PRECEDENCE[po];\n            var so = this.operator, sp = PRECEDENCE[so];\n            if (pp > sp\n                || (pp == sp\n                    && this === p.right)) {\n                return true;\n            }\n        }\n    });\n\n    PARENS(AST_PropAccess, function(output){\n        var p = output.parent();\n        if (p instanceof AST_New && p.expression === this) {\n            // i.e. new (foo.bar().baz)\n            //\n            // if there's one call into this subtree, then we need\n            // parens around it too, otherwise the call will be\n            // interpreted as passing the arguments to the upper New\n            // expression.\n            try {\n                this.walk(new TreeWalker(function(node){\n                    if (node instanceof AST_Call) throw p;\n                }));\n            } catch(ex) {\n                if (ex !== p) throw ex;\n                return true;\n            }\n        }\n    });\n\n    PARENS(AST_Call, function(output){\n        var p = output.parent(), p1;\n        if (p instanceof AST_New && p.expression === this)\n            return true;\n\n        // workaround for Safari bug.\n        // https://bugs.webkit.org/show_bug.cgi?id=123506\n        return this.expression instanceof AST_Function\n            && p instanceof AST_PropAccess\n            && p.expression === this\n            && (p1 = output.parent(1)) instanceof AST_Assign\n            && p1.left === p;\n    });\n\n    PARENS(AST_New, function(output){\n        var p = output.parent();\n        if (!need_constructor_parens(this, output)\n            && (p instanceof AST_PropAccess // (new Date).getTime(), (new Date)[\"getTime\"]()\n                || p instanceof AST_Call && p.expression === this)) // (new foo)(bar)\n            return true;\n    });\n\n    PARENS(AST_Number, function(output){\n        var p = output.parent();\n        if (p instanceof AST_PropAccess && p.expression === this) {\n            var value = this.getValue();\n            if (value < 0 || /^0/.test(make_num(value))) {\n                return true;\n            }\n        }\n    });\n\n    PARENS([ AST_Assign, AST_Conditional ], function (output){\n        var p = output.parent();\n        // !(a = false) → true\n        if (p instanceof AST_Unary)\n            return true;\n        // 1 + (a = 2) + 3 → 6, side effect setting a = 2\n        if (p instanceof AST_Binary && !(p instanceof AST_Assign))\n            return true;\n        // (a = func)() —or— new (a = Object)()\n        if (p instanceof AST_Call && p.expression === this)\n            return true;\n        // (a = foo) ? bar : baz\n        if (p instanceof AST_Conditional && p.condition === this)\n            return true;\n        // (a = foo)[\"prop\"] —or— (a = foo).prop\n        if (p instanceof AST_PropAccess && p.expression === this)\n            return true;\n    });\n\n    /* -----[ PRINTERS ]----- */\n\n    DEFPRINT(AST_Directive, function(self, output){\n        output.print_string(self.value, self.quote);\n        output.semicolon();\n    });\n    DEFPRINT(AST_Debugger, function(self, output){\n        output.print(\"debugger\");\n        output.semicolon();\n    });\n\n    /* -----[ statements ]----- */\n\n    function display_body(body, is_toplevel, output, allow_directives) {\n        var last = body.length - 1;\n        in_directive = allow_directives;\n        body.forEach(function(stmt, i){\n            if (in_directive === true && !(stmt instanceof AST_Directive ||\n                stmt instanceof AST_EmptyStatement ||\n                (stmt instanceof AST_SimpleStatement && stmt.body instanceof AST_String)\n            )) {\n                in_directive = false;\n            }\n            if (!(stmt instanceof AST_EmptyStatement)) {\n                output.indent();\n                stmt.print(output);\n                if (!(i == last && is_toplevel)) {\n                    output.newline();\n                    if (is_toplevel) output.newline();\n                }\n            }\n            if (in_directive === true &&\n                stmt instanceof AST_SimpleStatement &&\n                stmt.body instanceof AST_String\n            ) {\n                in_directive = false;\n            }\n        });\n        in_directive = false;\n    };\n\n    AST_StatementWithBody.DEFMETHOD(\"_do_print_body\", function(output){\n        force_statement(this.body, output);\n    });\n\n    DEFPRINT(AST_Statement, function(self, output){\n        self.body.print(output);\n        output.semicolon();\n    });\n    DEFPRINT(AST_Toplevel, function(self, output){\n        display_body(self.body, true, output, true);\n        output.print(\"\");\n    });\n    DEFPRINT(AST_LabeledStatement, function(self, output){\n        self.label.print(output);\n        output.colon();\n        self.body.print(output);\n    });\n    DEFPRINT(AST_SimpleStatement, function(self, output){\n        self.body.print(output);\n        output.semicolon();\n    });\n    function print_bracketed(body, output, allow_directives) {\n        if (body.length > 0) output.with_block(function(){\n            display_body(body, false, output, allow_directives);\n        });\n        else output.print(\"{}\");\n    };\n    DEFPRINT(AST_BlockStatement, function(self, output){\n        print_bracketed(self.body, output);\n    });\n    DEFPRINT(AST_EmptyStatement, function(self, output){\n        output.semicolon();\n    });\n    DEFPRINT(AST_Do, function(self, output){\n        output.print(\"do\");\n        output.space();\n        make_block(self.body, output);\n        output.space();\n        output.print(\"while\");\n        output.space();\n        output.with_parens(function(){\n            self.condition.print(output);\n        });\n        output.semicolon();\n    });\n    DEFPRINT(AST_While, function(self, output){\n        output.print(\"while\");\n        output.space();\n        output.with_parens(function(){\n            self.condition.print(output);\n        });\n        output.space();\n        self._do_print_body(output);\n    });\n    DEFPRINT(AST_For, function(self, output){\n        output.print(\"for\");\n        output.space();\n        output.with_parens(function(){\n            if (self.init) {\n                if (self.init instanceof AST_Definitions) {\n                    self.init.print(output);\n                } else {\n                    parenthesize_for_noin(self.init, output, true);\n                }\n                output.print(\";\");\n                output.space();\n            } else {\n                output.print(\";\");\n            }\n            if (self.condition) {\n                self.condition.print(output);\n                output.print(\";\");\n                output.space();\n            } else {\n                output.print(\";\");\n            }\n            if (self.step) {\n                self.step.print(output);\n            }\n        });\n        output.space();\n        self._do_print_body(output);\n    });\n    DEFPRINT(AST_ForIn, function(self, output){\n        output.print(\"for\");\n        output.space();\n        output.with_parens(function(){\n            self.init.print(output);\n            output.space();\n            output.print(\"in\");\n            output.space();\n            self.object.print(output);\n        });\n        output.space();\n        self._do_print_body(output);\n    });\n    DEFPRINT(AST_With, function(self, output){\n        output.print(\"with\");\n        output.space();\n        output.with_parens(function(){\n            self.expression.print(output);\n        });\n        output.space();\n        self._do_print_body(output);\n    });\n\n    /* -----[ functions ]----- */\n    AST_Lambda.DEFMETHOD(\"_do_print\", function(output, nokeyword){\n        var self = this;\n        if (!nokeyword) {\n            output.print(\"function\");\n        }\n        if (self.name) {\n            output.space();\n            self.name.print(output);\n        }\n        output.with_parens(function(){\n            self.argnames.forEach(function(arg, i){\n                if (i) output.comma();\n                arg.print(output);\n            });\n        });\n        output.space();\n        print_bracketed(self.body, output, true);\n    });\n    DEFPRINT(AST_Lambda, function(self, output){\n        self._do_print(output);\n    });\n\n    /* -----[ exits ]----- */\n    AST_Exit.DEFMETHOD(\"_do_print\", function(output, kind){\n        output.print(kind);\n        if (this.value) {\n            output.space();\n            this.value.print(output);\n        }\n        output.semicolon();\n    });\n    DEFPRINT(AST_Return, function(self, output){\n        self._do_print(output, \"return\");\n    });\n    DEFPRINT(AST_Throw, function(self, output){\n        self._do_print(output, \"throw\");\n    });\n\n    /* -----[ loop control ]----- */\n    AST_LoopControl.DEFMETHOD(\"_do_print\", function(output, kind){\n        output.print(kind);\n        if (this.label) {\n            output.space();\n            this.label.print(output);\n        }\n        output.semicolon();\n    });\n    DEFPRINT(AST_Break, function(self, output){\n        self._do_print(output, \"break\");\n    });\n    DEFPRINT(AST_Continue, function(self, output){\n        self._do_print(output, \"continue\");\n    });\n\n    /* -----[ if ]----- */\n    function make_then(self, output) {\n        var b = self.body;\n        if (output.option(\"bracketize\")\n            || !output.option(\"screw_ie8\") && b instanceof AST_Do)\n            return make_block(b, output);\n        // The squeezer replaces \"block\"-s that contain only a single\n        // statement with the statement itself; technically, the AST\n        // is correct, but this can create problems when we output an\n        // IF having an ELSE clause where the THEN clause ends in an\n        // IF *without* an ELSE block (then the outer ELSE would refer\n        // to the inner IF).  This function checks for this case and\n        // adds the block brackets if needed.\n        if (!b) return output.force_semicolon();\n        while (true) {\n            if (b instanceof AST_If) {\n                if (!b.alternative) {\n                    make_block(self.body, output);\n                    return;\n                }\n                b = b.alternative;\n            }\n            else if (b instanceof AST_StatementWithBody) {\n                b = b.body;\n            }\n            else break;\n        }\n        force_statement(self.body, output);\n    };\n    DEFPRINT(AST_If, function(self, output){\n        output.print(\"if\");\n        output.space();\n        output.with_parens(function(){\n            self.condition.print(output);\n        });\n        output.space();\n        if (self.alternative) {\n            make_then(self, output);\n            output.space();\n            output.print(\"else\");\n            output.space();\n            if (self.alternative instanceof AST_If)\n                self.alternative.print(output);\n            else\n                force_statement(self.alternative, output);\n        } else {\n            self._do_print_body(output);\n        }\n    });\n\n    /* -----[ switch ]----- */\n    DEFPRINT(AST_Switch, function(self, output){\n        output.print(\"switch\");\n        output.space();\n        output.with_parens(function(){\n            self.expression.print(output);\n        });\n        output.space();\n        var last = self.body.length - 1;\n        if (last < 0) output.print(\"{}\");\n        else output.with_block(function(){\n            self.body.forEach(function(branch, i){\n                output.indent(true);\n                branch.print(output);\n                if (i < last && branch.body.length > 0)\n                    output.newline();\n            });\n        });\n    });\n    AST_SwitchBranch.DEFMETHOD(\"_do_print_body\", function(output){\n        output.newline();\n        this.body.forEach(function(stmt){\n            output.indent();\n            stmt.print(output);\n            output.newline();\n        });\n    });\n    DEFPRINT(AST_Default, function(self, output){\n        output.print(\"default:\");\n        self._do_print_body(output);\n    });\n    DEFPRINT(AST_Case, function(self, output){\n        output.print(\"case\");\n        output.space();\n        self.expression.print(output);\n        output.print(\":\");\n        self._do_print_body(output);\n    });\n\n    /* -----[ exceptions ]----- */\n    DEFPRINT(AST_Try, function(self, output){\n        output.print(\"try\");\n        output.space();\n        print_bracketed(self.body, output);\n        if (self.bcatch) {\n            output.space();\n            self.bcatch.print(output);\n        }\n        if (self.bfinally) {\n            output.space();\n            self.bfinally.print(output);\n        }\n    });\n    DEFPRINT(AST_Catch, function(self, output){\n        output.print(\"catch\");\n        output.space();\n        output.with_parens(function(){\n            self.argname.print(output);\n        });\n        output.space();\n        print_bracketed(self.body, output);\n    });\n    DEFPRINT(AST_Finally, function(self, output){\n        output.print(\"finally\");\n        output.space();\n        print_bracketed(self.body, output);\n    });\n\n    /* -----[ var/const ]----- */\n    AST_Definitions.DEFMETHOD(\"_do_print\", function(output, kind){\n        output.print(kind);\n        output.space();\n        this.definitions.forEach(function(def, i){\n            if (i) output.comma();\n            def.print(output);\n        });\n        var p = output.parent();\n        var in_for = p instanceof AST_For || p instanceof AST_ForIn;\n        var avoid_semicolon = in_for && p.init === this;\n        if (!avoid_semicolon)\n            output.semicolon();\n    });\n    DEFPRINT(AST_Var, function(self, output){\n        self._do_print(output, \"var\");\n    });\n    DEFPRINT(AST_Const, function(self, output){\n        self._do_print(output, \"const\");\n    });\n\n    function parenthesize_for_noin(node, output, noin) {\n        if (!noin) node.print(output);\n        else try {\n            // need to take some precautions here:\n            //    https://github.com/mishoo/UglifyJS2/issues/60\n            node.walk(new TreeWalker(function(node){\n                if (node instanceof AST_Binary && node.operator == \"in\")\n                    throw output;\n            }));\n            node.print(output);\n        } catch(ex) {\n            if (ex !== output) throw ex;\n            node.print(output, true);\n        }\n    };\n\n    DEFPRINT(AST_VarDef, function(self, output){\n        self.name.print(output);\n        if (self.value) {\n            output.space();\n            output.print(\"=\");\n            output.space();\n            var p = output.parent(1);\n            var noin = p instanceof AST_For || p instanceof AST_ForIn;\n            parenthesize_for_noin(self.value, output, noin);\n        }\n    });\n\n    /* -----[ other expressions ]----- */\n    DEFPRINT(AST_Call, function(self, output){\n        self.expression.print(output);\n        if (self instanceof AST_New && !need_constructor_parens(self, output))\n            return;\n        output.with_parens(function(){\n            self.args.forEach(function(expr, i){\n                if (i) output.comma();\n                expr.print(output);\n            });\n        });\n    });\n    DEFPRINT(AST_New, function(self, output){\n        output.print(\"new\");\n        output.space();\n        AST_Call.prototype._codegen(self, output);\n    });\n\n    AST_Seq.DEFMETHOD(\"_do_print\", function(output){\n        this.car.print(output);\n        if (this.cdr) {\n            output.comma();\n            if (output.should_break()) {\n                output.newline();\n                output.indent();\n            }\n            this.cdr.print(output);\n        }\n    });\n    DEFPRINT(AST_Seq, function(self, output){\n        self._do_print(output);\n        // var p = output.parent();\n        // if (p instanceof AST_Statement) {\n        //     output.with_indent(output.next_indent(), function(){\n        //         self._do_print(output);\n        //     });\n        // } else {\n        //     self._do_print(output);\n        // }\n    });\n    DEFPRINT(AST_Dot, function(self, output){\n        var expr = self.expression;\n        expr.print(output);\n        if (expr instanceof AST_Number && expr.getValue() >= 0) {\n            if (!/[xa-f.)]/i.test(output.last())) {\n                output.print(\".\");\n            }\n        }\n        output.print(\".\");\n        // the name after dot would be mapped about here.\n        output.add_mapping(self.end);\n        output.print_name(self.property);\n    });\n    DEFPRINT(AST_Sub, function(self, output){\n        self.expression.print(output);\n        output.print(\"[\");\n        self.property.print(output);\n        output.print(\"]\");\n    });\n    DEFPRINT(AST_UnaryPrefix, function(self, output){\n        var op = self.operator;\n        output.print(op);\n        if (/^[a-z]/i.test(op)\n            || (/[+-]$/.test(op)\n                && self.expression instanceof AST_UnaryPrefix\n                && /^[+-]/.test(self.expression.operator))) {\n            output.space();\n        }\n        self.expression.print(output);\n    });\n    DEFPRINT(AST_UnaryPostfix, function(self, output){\n        self.expression.print(output);\n        output.print(self.operator);\n    });\n    DEFPRINT(AST_Binary, function(self, output){\n        var op = self.operator;\n        self.left.print(output);\n        if (op[0] == \">\" /* \">>\" \">>>\" \">\" \">=\" */\n            && self.left instanceof AST_UnaryPostfix\n            && self.left.operator == \"--\") {\n            // space is mandatory to avoid outputting -->\n            output.print(\" \");\n        } else {\n            // the space is optional depending on \"beautify\"\n            output.space();\n        }\n        output.print(op);\n        if ((op == \"<\" || op == \"<<\")\n            && self.right instanceof AST_UnaryPrefix\n            && self.right.operator == \"!\"\n            && self.right.expression instanceof AST_UnaryPrefix\n            && self.right.expression.operator == \"--\") {\n            // space is mandatory to avoid outputting <!--\n            output.print(\" \");\n        } else {\n            // the space is optional depending on \"beautify\"\n            output.space();\n        }\n        self.right.print(output);\n    });\n    DEFPRINT(AST_Conditional, function(self, output){\n        self.condition.print(output);\n        output.space();\n        output.print(\"?\");\n        output.space();\n        self.consequent.print(output);\n        output.space();\n        output.colon();\n        self.alternative.print(output);\n    });\n\n    /* -----[ literals ]----- */\n    DEFPRINT(AST_Array, function(self, output){\n        output.with_square(function(){\n            var a = self.elements, len = a.length;\n            if (len > 0) output.space();\n            a.forEach(function(exp, i){\n                if (i) output.comma();\n                exp.print(output);\n                // If the final element is a hole, we need to make sure it\n                // doesn't look like a trailing comma, by inserting an actual\n                // trailing comma.\n                if (i === len - 1 && exp instanceof AST_Hole)\n                  output.comma();\n            });\n            if (len > 0) output.space();\n        });\n    });\n    DEFPRINT(AST_Object, function(self, output){\n        if (self.properties.length > 0) output.with_block(function(){\n            self.properties.forEach(function(prop, i){\n                if (i) {\n                    output.print(\",\");\n                    output.newline();\n                }\n                output.indent();\n                prop.print(output);\n            });\n            output.newline();\n        });\n        else output.print(\"{}\");\n    });\n    DEFPRINT(AST_ObjectKeyVal, function(self, output){\n        var key = self.key;\n        var quote = self.quote;\n        if (output.option(\"quote_keys\")) {\n            output.print_string(key + \"\");\n        } else if ((typeof key == \"number\"\n                    || !output.option(\"beautify\")\n                    && +key + \"\" == key)\n                   && parseFloat(key) >= 0) {\n            output.print(make_num(key));\n        } else if (RESERVED_WORDS(key) ? output.option(\"screw_ie8\") : is_identifier_string(key)) {\n            if (quote && output.option(\"keep_quoted_props\")) {\n                output.print_string(key, quote);\n            } else {\n                output.print_name(key);\n            }\n        } else {\n            output.print_string(key, quote);\n        }\n        output.colon();\n        self.value.print(output);\n    });\n    DEFPRINT(AST_ObjectSetter, function(self, output){\n        output.print(\"set\");\n        output.space();\n        self.key.print(output);\n        self.value._do_print(output, true);\n    });\n    DEFPRINT(AST_ObjectGetter, function(self, output){\n        output.print(\"get\");\n        output.space();\n        self.key.print(output);\n        self.value._do_print(output, true);\n    });\n    DEFPRINT(AST_Symbol, function(self, output){\n        var def = self.definition();\n        output.print_name(def ? def.mangled_name || def.name : self.name);\n    });\n    DEFPRINT(AST_Hole, noop);\n    DEFPRINT(AST_This, function(self, output){\n        output.print(\"this\");\n    });\n    DEFPRINT(AST_Constant, function(self, output){\n        output.print(self.getValue());\n    });\n    DEFPRINT(AST_String, function(self, output){\n        output.print_string(self.getValue(), self.quote, in_directive);\n    });\n    DEFPRINT(AST_Number, function(self, output){\n        if (use_asm && self.start && self.start.raw != null) {\n            output.print(self.start.raw);\n        } else {\n            output.print(make_num(self.getValue()));\n        }\n    });\n\n    function regexp_safe_literal(code) {\n        return [\n            0x5c   , // \\\n            0x2f   , // /\n            0x2e   , // .\n            0x2b   , // +\n            0x2a   , // *\n            0x3f   , // ?\n            0x28   , // (\n            0x29   , // )\n            0x5b   , // [\n            0x5d   , // ]\n            0x7b   , // {\n            0x7d   , // }\n            0x24   , // $\n            0x5e   , // ^\n            0x3a   , // :\n            0x7c   , // |\n            0x21   , // !\n            0x0a   , // \\n\n            0x0d   , // \\r\n            0x00   , // \\0\n            0xfeff , // Unicode BOM\n            0x2028 , // unicode \"line separator\"\n            0x2029 , // unicode \"paragraph separator\"\n        ].indexOf(code) < 0;\n    };\n\n    DEFPRINT(AST_RegExp, function(self, output){\n        var str = self.getValue().toString();\n        if (output.option(\"ascii_only\")) {\n            str = output.to_ascii(str);\n        } else if (output.option(\"unescape_regexps\")) {\n            str = str.split(\"\\\\\\\\\").map(function(str){\n                return str.replace(/\\\\u[0-9a-fA-F]{4}|\\\\x[0-9a-fA-F]{2}/g, function(s){\n                    var code = parseInt(s.substr(2), 16);\n                    return regexp_safe_literal(code) ? String.fromCharCode(code) : s;\n                });\n            }).join(\"\\\\\\\\\");\n        }\n        output.print(str);\n        var p = output.parent();\n        if (p instanceof AST_Binary && /^in/.test(p.operator) && p.left === self)\n            output.print(\" \");\n    });\n\n    function force_statement(stat, output) {\n        if (output.option(\"bracketize\")) {\n            make_block(stat, output);\n        } else {\n            if (!stat || stat instanceof AST_EmptyStatement)\n                output.force_semicolon();\n            else\n                stat.print(output);\n        }\n    };\n\n    // self should be AST_New.  decide if we want to show parens or not.\n    function need_constructor_parens(self, output) {\n        // Always print parentheses with arguments\n        if (self.args.length > 0) return true;\n\n        return output.option(\"beautify\");\n    };\n\n    function best_of(a) {\n        var best = a[0], len = best.length;\n        for (var i = 1; i < a.length; ++i) {\n            if (a[i].length < len) {\n                best = a[i];\n                len = best.length;\n            }\n        }\n        return best;\n    };\n\n    function make_num(num) {\n        var str = num.toString(10), a = [ str.replace(/^0\\./, \".\").replace('e+', 'e') ], m;\n        if (Math.floor(num) === num) {\n            if (num >= 0) {\n                a.push(\"0x\" + num.toString(16).toLowerCase(), // probably pointless\n                       \"0\" + num.toString(8)); // same.\n            } else {\n                a.push(\"-0x\" + (-num).toString(16).toLowerCase(), // probably pointless\n                       \"-0\" + (-num).toString(8)); // same.\n            }\n            if ((m = /^(.*?)(0+)$/.exec(num))) {\n                a.push(m[1] + \"e\" + m[2].length);\n            }\n        } else if ((m = /^0?\\.(0+)(.*)$/.exec(num))) {\n            a.push(m[2] + \"e-\" + (m[1].length + m[2].length),\n                   str.substr(str.indexOf(\".\")));\n        }\n        return best_of(a);\n    };\n\n    function make_block(stmt, output) {\n        if (!stmt || stmt instanceof AST_EmptyStatement)\n            output.print(\"{}\");\n        else if (stmt instanceof AST_BlockStatement)\n            stmt.print(output);\n        else output.with_block(function(){\n            output.indent();\n            stmt.print(output);\n            output.newline();\n        });\n    };\n\n    /* -----[ source map generators ]----- */\n\n    function DEFMAP(nodetype, generator) {\n        nodetype.DEFMETHOD(\"add_source_map\", function(stream){\n            generator(this, stream);\n        });\n    };\n\n    // We could easily add info for ALL nodes, but it seems to me that\n    // would be quite wasteful, hence this noop in the base class.\n    DEFMAP(AST_Node, noop);\n\n    function basic_sourcemap_gen(self, output) {\n        output.add_mapping(self.start);\n    };\n\n    // XXX: I'm not exactly sure if we need it for all of these nodes,\n    // or if we should add even more.\n\n    DEFMAP(AST_Directive, basic_sourcemap_gen);\n    DEFMAP(AST_Debugger, basic_sourcemap_gen);\n    DEFMAP(AST_Symbol, basic_sourcemap_gen);\n    DEFMAP(AST_Jump, basic_sourcemap_gen);\n    DEFMAP(AST_StatementWithBody, basic_sourcemap_gen);\n    DEFMAP(AST_LabeledStatement, noop); // since the label symbol will mark it\n    DEFMAP(AST_Lambda, basic_sourcemap_gen);\n    DEFMAP(AST_Switch, basic_sourcemap_gen);\n    DEFMAP(AST_SwitchBranch, basic_sourcemap_gen);\n    DEFMAP(AST_BlockStatement, basic_sourcemap_gen);\n    DEFMAP(AST_Toplevel, noop);\n    DEFMAP(AST_New, basic_sourcemap_gen);\n    DEFMAP(AST_Try, basic_sourcemap_gen);\n    DEFMAP(AST_Catch, basic_sourcemap_gen);\n    DEFMAP(AST_Finally, basic_sourcemap_gen);\n    DEFMAP(AST_Definitions, basic_sourcemap_gen);\n    DEFMAP(AST_Constant, basic_sourcemap_gen);\n    DEFMAP(AST_ObjectSetter, function(self, output){\n        output.add_mapping(self.start, self.key.name);\n    });\n    DEFMAP(AST_ObjectGetter, function(self, output){\n        output.add_mapping(self.start, self.key.name);\n    });\n    DEFMAP(AST_ObjectProperty, function(self, output){\n        output.add_mapping(self.start, self.key);\n    });\n\n})();\n","/home/travis/build/npmtest/node-npmtest-uglify-js/node_modules/uglify-js/lib/parse.js":"/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n    Parser based on parse-js (http://marijn.haverbeke.nl/parse-js/).\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nvar KEYWORDS = 'break case catch const continue debugger default delete do else finally for function if in instanceof new return switch throw try typeof var void while with';\nvar KEYWORDS_ATOM = 'false null true';\nvar RESERVED_WORDS = 'abstract boolean byte char class double enum export extends final float goto implements import int interface let long native package private protected public short static super synchronized this throws transient volatile yield'\n    + \" \" + KEYWORDS_ATOM + \" \" + KEYWORDS;\nvar KEYWORDS_BEFORE_EXPRESSION = 'return new delete throw else case';\n\nKEYWORDS = makePredicate(KEYWORDS);\nRESERVED_WORDS = makePredicate(RESERVED_WORDS);\nKEYWORDS_BEFORE_EXPRESSION = makePredicate(KEYWORDS_BEFORE_EXPRESSION);\nKEYWORDS_ATOM = makePredicate(KEYWORDS_ATOM);\n\nvar OPERATOR_CHARS = makePredicate(characters(\"+-*&%=<>!?|~^\"));\n\nvar RE_HEX_NUMBER = /^0x[0-9a-f]+$/i;\nvar RE_OCT_NUMBER = /^0[0-7]+$/;\n\nvar OPERATORS = makePredicate([\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"new\",\n    \"void\",\n    \"delete\",\n    \"++\",\n    \"--\",\n    \"+\",\n    \"-\",\n    \"!\",\n    \"~\",\n    \"&\",\n    \"|\",\n    \"^\",\n    \"*\",\n    \"/\",\n    \"%\",\n    \">>\",\n    \"<<\",\n    \">>>\",\n    \"<\",\n    \">\",\n    \"<=\",\n    \">=\",\n    \"==\",\n    \"===\",\n    \"!=\",\n    \"!==\",\n    \"?\",\n    \"=\",\n    \"+=\",\n    \"-=\",\n    \"/=\",\n    \"*=\",\n    \"%=\",\n    \">>=\",\n    \"<<=\",\n    \">>>=\",\n    \"|=\",\n    \"^=\",\n    \"&=\",\n    \"&&\",\n    \"||\"\n]);\n\nvar WHITESPACE_CHARS = makePredicate(characters(\" \\u00a0\\n\\r\\t\\f\\u000b\\u200b\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\uFEFF\"));\n\nvar NEWLINE_CHARS = makePredicate(characters(\"\\n\\r\\u2028\\u2029\"));\n\nvar PUNC_BEFORE_EXPRESSION = makePredicate(characters(\"[{(,.;:\"));\n\nvar PUNC_CHARS = makePredicate(characters(\"[]{}(),;:\"));\n\nvar REGEXP_MODIFIERS = makePredicate(characters(\"gmsiy\"));\n\n/* -----[ Tokenizer ]----- */\n\n// regexps adapted from http://xregexp.com/plugins/#unicode\nvar UNICODE = {\n    letter: new RegExp(\"[\\\\u0041-\\\\u005A\\\\u0061-\\\\u007A\\\\u00AA\\\\u00B5\\\\u00BA\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02C1\\\\u02C6-\\\\u02D1\\\\u02E0-\\\\u02E4\\\\u02EC\\\\u02EE\\\\u0370-\\\\u0374\\\\u0376\\\\u0377\\\\u037A-\\\\u037D\\\\u037F\\\\u0386\\\\u0388-\\\\u038A\\\\u038C\\\\u038E-\\\\u03A1\\\\u03A3-\\\\u03F5\\\\u03F7-\\\\u0481\\\\u048A-\\\\u052F\\\\u0531-\\\\u0556\\\\u0559\\\\u0561-\\\\u0587\\\\u05D0-\\\\u05EA\\\\u05F0-\\\\u05F2\\\\u0620-\\\\u064A\\\\u066E\\\\u066F\\\\u0671-\\\\u06D3\\\\u06D5\\\\u06E5\\\\u06E6\\\\u06EE\\\\u06EF\\\\u06FA-\\\\u06FC\\\\u06FF\\\\u0710\\\\u0712-\\\\u072F\\\\u074D-\\\\u07A5\\\\u07B1\\\\u07CA-\\\\u07EA\\\\u07F4\\\\u07F5\\\\u07FA\\\\u0800-\\\\u0815\\\\u081A\\\\u0824\\\\u0828\\\\u0840-\\\\u0858\\\\u08A0-\\\\u08B2\\\\u0904-\\\\u0939\\\\u093D\\\\u0950\\\\u0958-\\\\u0961\\\\u0971-\\\\u0980\\\\u0985-\\\\u098C\\\\u098F\\\\u0990\\\\u0993-\\\\u09A8\\\\u09AA-\\\\u09B0\\\\u09B2\\\\u09B6-\\\\u09B9\\\\u09BD\\\\u09CE\\\\u09DC\\\\u09DD\\\\u09DF-\\\\u09E1\\\\u09F0\\\\u09F1\\\\u0A05-\\\\u0A0A\\\\u0A0F\\\\u0A10\\\\u0A13-\\\\u0A28\\\\u0A2A-\\\\u0A30\\\\u0A32\\\\u0A33\\\\u0A35\\\\u0A36\\\\u0A38\\\\u0A39\\\\u0A59-\\\\u0A5C\\\\u0A5E\\\\u0A72-\\\\u0A74\\\\u0A85-\\\\u0A8D\\\\u0A8F-\\\\u0A91\\\\u0A93-\\\\u0AA8\\\\u0AAA-\\\\u0AB0\\\\u0AB2\\\\u0AB3\\\\u0AB5-\\\\u0AB9\\\\u0ABD\\\\u0AD0\\\\u0AE0\\\\u0AE1\\\\u0B05-\\\\u0B0C\\\\u0B0F\\\\u0B10\\\\u0B13-\\\\u0B28\\\\u0B2A-\\\\u0B30\\\\u0B32\\\\u0B33\\\\u0B35-\\\\u0B39\\\\u0B3D\\\\u0B5C\\\\u0B5D\\\\u0B5F-\\\\u0B61\\\\u0B71\\\\u0B83\\\\u0B85-\\\\u0B8A\\\\u0B8E-\\\\u0B90\\\\u0B92-\\\\u0B95\\\\u0B99\\\\u0B9A\\\\u0B9C\\\\u0B9E\\\\u0B9F\\\\u0BA3\\\\u0BA4\\\\u0BA8-\\\\u0BAA\\\\u0BAE-\\\\u0BB9\\\\u0BD0\\\\u0C05-\\\\u0C0C\\\\u0C0E-\\\\u0C10\\\\u0C12-\\\\u0C28\\\\u0C2A-\\\\u0C39\\\\u0C3D\\\\u0C58\\\\u0C59\\\\u0C60\\\\u0C61\\\\u0C85-\\\\u0C8C\\\\u0C8E-\\\\u0C90\\\\u0C92-\\\\u0CA8\\\\u0CAA-\\\\u0CB3\\\\u0CB5-\\\\u0CB9\\\\u0CBD\\\\u0CDE\\\\u0CE0\\\\u0CE1\\\\u0CF1\\\\u0CF2\\\\u0D05-\\\\u0D0C\\\\u0D0E-\\\\u0D10\\\\u0D12-\\\\u0D3A\\\\u0D3D\\\\u0D4E\\\\u0D60\\\\u0D61\\\\u0D7A-\\\\u0D7F\\\\u0D85-\\\\u0D96\\\\u0D9A-\\\\u0DB1\\\\u0DB3-\\\\u0DBB\\\\u0DBD\\\\u0DC0-\\\\u0DC6\\\\u0E01-\\\\u0E30\\\\u0E32\\\\u0E33\\\\u0E40-\\\\u0E46\\\\u0E81\\\\u0E82\\\\u0E84\\\\u0E87\\\\u0E88\\\\u0E8A\\\\u0E8D\\\\u0E94-\\\\u0E97\\\\u0E99-\\\\u0E9F\\\\u0EA1-\\\\u0EA3\\\\u0EA5\\\\u0EA7\\\\u0EAA\\\\u0EAB\\\\u0EAD-\\\\u0EB0\\\\u0EB2\\\\u0EB3\\\\u0EBD\\\\u0EC0-\\\\u0EC4\\\\u0EC6\\\\u0EDC-\\\\u0EDF\\\\u0F00\\\\u0F40-\\\\u0F47\\\\u0F49-\\\\u0F6C\\\\u0F88-\\\\u0F8C\\\\u1000-\\\\u102A\\\\u103F\\\\u1050-\\\\u1055\\\\u105A-\\\\u105D\\\\u1061\\\\u1065\\\\u1066\\\\u106E-\\\\u1070\\\\u1075-\\\\u1081\\\\u108E\\\\u10A0-\\\\u10C5\\\\u10C7\\\\u10CD\\\\u10D0-\\\\u10FA\\\\u10FC-\\\\u1248\\\\u124A-\\\\u124D\\\\u1250-\\\\u1256\\\\u1258\\\\u125A-\\\\u125D\\\\u1260-\\\\u1288\\\\u128A-\\\\u128D\\\\u1290-\\\\u12B0\\\\u12B2-\\\\u12B5\\\\u12B8-\\\\u12BE\\\\u12C0\\\\u12C2-\\\\u12C5\\\\u12C8-\\\\u12D6\\\\u12D8-\\\\u1310\\\\u1312-\\\\u1315\\\\u1318-\\\\u135A\\\\u1380-\\\\u138F\\\\u13A0-\\\\u13F4\\\\u1401-\\\\u166C\\\\u166F-\\\\u167F\\\\u1681-\\\\u169A\\\\u16A0-\\\\u16EA\\\\u16EE-\\\\u16F8\\\\u1700-\\\\u170C\\\\u170E-\\\\u1711\\\\u1720-\\\\u1731\\\\u1740-\\\\u1751\\\\u1760-\\\\u176C\\\\u176E-\\\\u1770\\\\u1780-\\\\u17B3\\\\u17D7\\\\u17DC\\\\u1820-\\\\u1877\\\\u1880-\\\\u18A8\\\\u18AA\\\\u18B0-\\\\u18F5\\\\u1900-\\\\u191E\\\\u1950-\\\\u196D\\\\u1970-\\\\u1974\\\\u1980-\\\\u19AB\\\\u19C1-\\\\u19C7\\\\u1A00-\\\\u1A16\\\\u1A20-\\\\u1A54\\\\u1AA7\\\\u1B05-\\\\u1B33\\\\u1B45-\\\\u1B4B\\\\u1B83-\\\\u1BA0\\\\u1BAE\\\\u1BAF\\\\u1BBA-\\\\u1BE5\\\\u1C00-\\\\u1C23\\\\u1C4D-\\\\u1C4F\\\\u1C5A-\\\\u1C7D\\\\u1CE9-\\\\u1CEC\\\\u1CEE-\\\\u1CF1\\\\u1CF5\\\\u1CF6\\\\u1D00-\\\\u1DBF\\\\u1E00-\\\\u1F15\\\\u1F18-\\\\u1F1D\\\\u1F20-\\\\u1F45\\\\u1F48-\\\\u1F4D\\\\u1F50-\\\\u1F57\\\\u1F59\\\\u1F5B\\\\u1F5D\\\\u1F5F-\\\\u1F7D\\\\u1F80-\\\\u1FB4\\\\u1FB6-\\\\u1FBC\\\\u1FBE\\\\u1FC2-\\\\u1FC4\\\\u1FC6-\\\\u1FCC\\\\u1FD0-\\\\u1FD3\\\\u1FD6-\\\\u1FDB\\\\u1FE0-\\\\u1FEC\\\\u1FF2-\\\\u1FF4\\\\u1FF6-\\\\u1FFC\\\\u2071\\\\u207F\\\\u2090-\\\\u209C\\\\u2102\\\\u2107\\\\u210A-\\\\u2113\\\\u2115\\\\u2119-\\\\u211D\\\\u2124\\\\u2126\\\\u2128\\\\u212A-\\\\u212D\\\\u212F-\\\\u2139\\\\u213C-\\\\u213F\\\\u2145-\\\\u2149\\\\u214E\\\\u2160-\\\\u2188\\\\u2C00-\\\\u2C2E\\\\u2C30-\\\\u2C5E\\\\u2C60-\\\\u2CE4\\\\u2CEB-\\\\u2CEE\\\\u2CF2\\\\u2CF3\\\\u2D00-\\\\u2D25\\\\u2D27\\\\u2D2D\\\\u2D30-\\\\u2D67\\\\u2D6F\\\\u2D80-\\\\u2D96\\\\u2DA0-\\\\u2DA6\\\\u2DA8-\\\\u2DAE\\\\u2DB0-\\\\u2DB6\\\\u2DB8-\\\\u2DBE\\\\u2DC0-\\\\u2DC6\\\\u2DC8-\\\\u2DCE\\\\u2DD0-\\\\u2DD6\\\\u2DD8-\\\\u2DDE\\\\u2E2F\\\\u3005-\\\\u3007\\\\u3021-\\\\u3029\\\\u3031-\\\\u3035\\\\u3038-\\\\u303C\\\\u3041-\\\\u3096\\\\u309D-\\\\u309F\\\\u30A1-\\\\u30FA\\\\u30FC-\\\\u30FF\\\\u3105-\\\\u312D\\\\u3131-\\\\u318E\\\\u31A0-\\\\u31BA\\\\u31F0-\\\\u31FF\\\\u3400-\\\\u4DB5\\\\u4E00-\\\\u9FCC\\\\uA000-\\\\uA48C\\\\uA4D0-\\\\uA4FD\\\\uA500-\\\\uA60C\\\\uA610-\\\\uA61F\\\\uA62A\\\\uA62B\\\\uA640-\\\\uA66E\\\\uA67F-\\\\uA69D\\\\uA6A0-\\\\uA6EF\\\\uA717-\\\\uA71F\\\\uA722-\\\\uA788\\\\uA78B-\\\\uA78E\\\\uA790-\\\\uA7AD\\\\uA7B0\\\\uA7B1\\\\uA7F7-\\\\uA801\\\\uA803-\\\\uA805\\\\uA807-\\\\uA80A\\\\uA80C-\\\\uA822\\\\uA840-\\\\uA873\\\\uA882-\\\\uA8B3\\\\uA8F2-\\\\uA8F7\\\\uA8FB\\\\uA90A-\\\\uA925\\\\uA930-\\\\uA946\\\\uA960-\\\\uA97C\\\\uA984-\\\\uA9B2\\\\uA9CF\\\\uA9E0-\\\\uA9E4\\\\uA9E6-\\\\uA9EF\\\\uA9FA-\\\\uA9FE\\\\uAA00-\\\\uAA28\\\\uAA40-\\\\uAA42\\\\uAA44-\\\\uAA4B\\\\uAA60-\\\\uAA76\\\\uAA7A\\\\uAA7E-\\\\uAAAF\\\\uAAB1\\\\uAAB5\\\\uAAB6\\\\uAAB9-\\\\uAABD\\\\uAAC0\\\\uAAC2\\\\uAADB-\\\\uAADD\\\\uAAE0-\\\\uAAEA\\\\uAAF2-\\\\uAAF4\\\\uAB01-\\\\uAB06\\\\uAB09-\\\\uAB0E\\\\uAB11-\\\\uAB16\\\\uAB20-\\\\uAB26\\\\uAB28-\\\\uAB2E\\\\uAB30-\\\\uAB5A\\\\uAB5C-\\\\uAB5F\\\\uAB64\\\\uAB65\\\\uABC0-\\\\uABE2\\\\uAC00-\\\\uD7A3\\\\uD7B0-\\\\uD7C6\\\\uD7CB-\\\\uD7FB\\\\uF900-\\\\uFA6D\\\\uFA70-\\\\uFAD9\\\\uFB00-\\\\uFB06\\\\uFB13-\\\\uFB17\\\\uFB1D\\\\uFB1F-\\\\uFB28\\\\uFB2A-\\\\uFB36\\\\uFB38-\\\\uFB3C\\\\uFB3E\\\\uFB40\\\\uFB41\\\\uFB43\\\\uFB44\\\\uFB46-\\\\uFBB1\\\\uFBD3-\\\\uFD3D\\\\uFD50-\\\\uFD8F\\\\uFD92-\\\\uFDC7\\\\uFDF0-\\\\uFDFB\\\\uFE70-\\\\uFE74\\\\uFE76-\\\\uFEFC\\\\uFF21-\\\\uFF3A\\\\uFF41-\\\\uFF5A\\\\uFF66-\\\\uFFBE\\\\uFFC2-\\\\uFFC7\\\\uFFCA-\\\\uFFCF\\\\uFFD2-\\\\uFFD7\\\\uFFDA-\\\\uFFDC]\"),\n    digit: new RegExp(\"[\\\\u0030-\\\\u0039\\\\u0660-\\\\u0669\\\\u06F0-\\\\u06F9\\\\u07C0-\\\\u07C9\\\\u0966-\\\\u096F\\\\u09E6-\\\\u09EF\\\\u0A66-\\\\u0A6F\\\\u0AE6-\\\\u0AEF\\\\u0B66-\\\\u0B6F\\\\u0BE6-\\\\u0BEF\\\\u0C66-\\\\u0C6F\\\\u0CE6-\\\\u0CEF\\\\u0D66-\\\\u0D6F\\\\u0DE6-\\\\u0DEF\\\\u0E50-\\\\u0E59\\\\u0ED0-\\\\u0ED9\\\\u0F20-\\\\u0F29\\\\u1040-\\\\u1049\\\\u1090-\\\\u1099\\\\u17E0-\\\\u17E9\\\\u1810-\\\\u1819\\\\u1946-\\\\u194F\\\\u19D0-\\\\u19D9\\\\u1A80-\\\\u1A89\\\\u1A90-\\\\u1A99\\\\u1B50-\\\\u1B59\\\\u1BB0-\\\\u1BB9\\\\u1C40-\\\\u1C49\\\\u1C50-\\\\u1C59\\\\uA620-\\\\uA629\\\\uA8D0-\\\\uA8D9\\\\uA900-\\\\uA909\\\\uA9D0-\\\\uA9D9\\\\uA9F0-\\\\uA9F9\\\\uAA50-\\\\uAA59\\\\uABF0-\\\\uABF9\\\\uFF10-\\\\uFF19]\"),\n    non_spacing_mark: new RegExp(\"[\\\\u0300-\\\\u036F\\\\u0483-\\\\u0487\\\\u0591-\\\\u05BD\\\\u05BF\\\\u05C1\\\\u05C2\\\\u05C4\\\\u05C5\\\\u05C7\\\\u0610-\\\\u061A\\\\u064B-\\\\u065E\\\\u0670\\\\u06D6-\\\\u06DC\\\\u06DF-\\\\u06E4\\\\u06E7\\\\u06E8\\\\u06EA-\\\\u06ED\\\\u0711\\\\u0730-\\\\u074A\\\\u07A6-\\\\u07B0\\\\u07EB-\\\\u07F3\\\\u0816-\\\\u0819\\\\u081B-\\\\u0823\\\\u0825-\\\\u0827\\\\u0829-\\\\u082D\\\\u0900-\\\\u0902\\\\u093C\\\\u0941-\\\\u0948\\\\u094D\\\\u0951-\\\\u0955\\\\u0962\\\\u0963\\\\u0981\\\\u09BC\\\\u09C1-\\\\u09C4\\\\u09CD\\\\u09E2\\\\u09E3\\\\u0A01\\\\u0A02\\\\u0A3C\\\\u0A41\\\\u0A42\\\\u0A47\\\\u0A48\\\\u0A4B-\\\\u0A4D\\\\u0A51\\\\u0A70\\\\u0A71\\\\u0A75\\\\u0A81\\\\u0A82\\\\u0ABC\\\\u0AC1-\\\\u0AC5\\\\u0AC7\\\\u0AC8\\\\u0ACD\\\\u0AE2\\\\u0AE3\\\\u0B01\\\\u0B3C\\\\u0B3F\\\\u0B41-\\\\u0B44\\\\u0B4D\\\\u0B56\\\\u0B62\\\\u0B63\\\\u0B82\\\\u0BC0\\\\u0BCD\\\\u0C3E-\\\\u0C40\\\\u0C46-\\\\u0C48\\\\u0C4A-\\\\u0C4D\\\\u0C55\\\\u0C56\\\\u0C62\\\\u0C63\\\\u0CBC\\\\u0CBF\\\\u0CC6\\\\u0CCC\\\\u0CCD\\\\u0CE2\\\\u0CE3\\\\u0D41-\\\\u0D44\\\\u0D4D\\\\u0D62\\\\u0D63\\\\u0DCA\\\\u0DD2-\\\\u0DD4\\\\u0DD6\\\\u0E31\\\\u0E34-\\\\u0E3A\\\\u0E47-\\\\u0E4E\\\\u0EB1\\\\u0EB4-\\\\u0EB9\\\\u0EBB\\\\u0EBC\\\\u0EC8-\\\\u0ECD\\\\u0F18\\\\u0F19\\\\u0F35\\\\u0F37\\\\u0F39\\\\u0F71-\\\\u0F7E\\\\u0F80-\\\\u0F84\\\\u0F86\\\\u0F87\\\\u0F90-\\\\u0F97\\\\u0F99-\\\\u0FBC\\\\u0FC6\\\\u102D-\\\\u1030\\\\u1032-\\\\u1037\\\\u1039\\\\u103A\\\\u103D\\\\u103E\\\\u1058\\\\u1059\\\\u105E-\\\\u1060\\\\u1071-\\\\u1074\\\\u1082\\\\u1085\\\\u1086\\\\u108D\\\\u109D\\\\u135F\\\\u1712-\\\\u1714\\\\u1732-\\\\u1734\\\\u1752\\\\u1753\\\\u1772\\\\u1773\\\\u17B7-\\\\u17BD\\\\u17C6\\\\u17C9-\\\\u17D3\\\\u17DD\\\\u180B-\\\\u180D\\\\u18A9\\\\u1920-\\\\u1922\\\\u1927\\\\u1928\\\\u1932\\\\u1939-\\\\u193B\\\\u1A17\\\\u1A18\\\\u1A56\\\\u1A58-\\\\u1A5E\\\\u1A60\\\\u1A62\\\\u1A65-\\\\u1A6C\\\\u1A73-\\\\u1A7C\\\\u1A7F\\\\u1B00-\\\\u1B03\\\\u1B34\\\\u1B36-\\\\u1B3A\\\\u1B3C\\\\u1B42\\\\u1B6B-\\\\u1B73\\\\u1B80\\\\u1B81\\\\u1BA2-\\\\u1BA5\\\\u1BA8\\\\u1BA9\\\\u1C2C-\\\\u1C33\\\\u1C36\\\\u1C37\\\\u1CD0-\\\\u1CD2\\\\u1CD4-\\\\u1CE0\\\\u1CE2-\\\\u1CE8\\\\u1CED\\\\u1DC0-\\\\u1DE6\\\\u1DFD-\\\\u1DFF\\\\u20D0-\\\\u20DC\\\\u20E1\\\\u20E5-\\\\u20F0\\\\u2CEF-\\\\u2CF1\\\\u2DE0-\\\\u2DFF\\\\u302A-\\\\u302F\\\\u3099\\\\u309A\\\\uA66F\\\\uA67C\\\\uA67D\\\\uA6F0\\\\uA6F1\\\\uA802\\\\uA806\\\\uA80B\\\\uA825\\\\uA826\\\\uA8C4\\\\uA8E0-\\\\uA8F1\\\\uA926-\\\\uA92D\\\\uA947-\\\\uA951\\\\uA980-\\\\uA982\\\\uA9B3\\\\uA9B6-\\\\uA9B9\\\\uA9BC\\\\uAA29-\\\\uAA2E\\\\uAA31\\\\uAA32\\\\uAA35\\\\uAA36\\\\uAA43\\\\uAA4C\\\\uAAB0\\\\uAAB2-\\\\uAAB4\\\\uAAB7\\\\uAAB8\\\\uAABE\\\\uAABF\\\\uAAC1\\\\uABE5\\\\uABE8\\\\uABED\\\\uFB1E\\\\uFE00-\\\\uFE0F\\\\uFE20-\\\\uFE26]\"),\n    space_combining_mark: new RegExp(\"[\\\\u0903\\\\u093E-\\\\u0940\\\\u0949-\\\\u094C\\\\u094E\\\\u0982\\\\u0983\\\\u09BE-\\\\u09C0\\\\u09C7\\\\u09C8\\\\u09CB\\\\u09CC\\\\u09D7\\\\u0A03\\\\u0A3E-\\\\u0A40\\\\u0A83\\\\u0ABE-\\\\u0AC0\\\\u0AC9\\\\u0ACB\\\\u0ACC\\\\u0B02\\\\u0B03\\\\u0B3E\\\\u0B40\\\\u0B47\\\\u0B48\\\\u0B4B\\\\u0B4C\\\\u0B57\\\\u0BBE\\\\u0BBF\\\\u0BC1\\\\u0BC2\\\\u0BC6-\\\\u0BC8\\\\u0BCA-\\\\u0BCC\\\\u0BD7\\\\u0C01-\\\\u0C03\\\\u0C41-\\\\u0C44\\\\u0C82\\\\u0C83\\\\u0CBE\\\\u0CC0-\\\\u0CC4\\\\u0CC7\\\\u0CC8\\\\u0CCA\\\\u0CCB\\\\u0CD5\\\\u0CD6\\\\u0D02\\\\u0D03\\\\u0D3E-\\\\u0D40\\\\u0D46-\\\\u0D48\\\\u0D4A-\\\\u0D4C\\\\u0D57\\\\u0D82\\\\u0D83\\\\u0DCF-\\\\u0DD1\\\\u0DD8-\\\\u0DDF\\\\u0DF2\\\\u0DF3\\\\u0F3E\\\\u0F3F\\\\u0F7F\\\\u102B\\\\u102C\\\\u1031\\\\u1038\\\\u103B\\\\u103C\\\\u1056\\\\u1057\\\\u1062-\\\\u1064\\\\u1067-\\\\u106D\\\\u1083\\\\u1084\\\\u1087-\\\\u108C\\\\u108F\\\\u109A-\\\\u109C\\\\u17B6\\\\u17BE-\\\\u17C5\\\\u17C7\\\\u17C8\\\\u1923-\\\\u1926\\\\u1929-\\\\u192B\\\\u1930\\\\u1931\\\\u1933-\\\\u1938\\\\u19B0-\\\\u19C0\\\\u19C8\\\\u19C9\\\\u1A19-\\\\u1A1B\\\\u1A55\\\\u1A57\\\\u1A61\\\\u1A63\\\\u1A64\\\\u1A6D-\\\\u1A72\\\\u1B04\\\\u1B35\\\\u1B3B\\\\u1B3D-\\\\u1B41\\\\u1B43\\\\u1B44\\\\u1B82\\\\u1BA1\\\\u1BA6\\\\u1BA7\\\\u1BAA\\\\u1C24-\\\\u1C2B\\\\u1C34\\\\u1C35\\\\u1CE1\\\\u1CF2\\\\uA823\\\\uA824\\\\uA827\\\\uA880\\\\uA881\\\\uA8B4-\\\\uA8C3\\\\uA952\\\\uA953\\\\uA983\\\\uA9B4\\\\uA9B5\\\\uA9BA\\\\uA9BB\\\\uA9BD-\\\\uA9C0\\\\uAA2F\\\\uAA30\\\\uAA33\\\\uAA34\\\\uAA4D\\\\uAA7B\\\\uABE3\\\\uABE4\\\\uABE6\\\\uABE7\\\\uABE9\\\\uABEA\\\\uABEC]\"),\n    connector_punctuation: new RegExp(\"[\\\\u005F\\\\u203F\\\\u2040\\\\u2054\\\\uFE33\\\\uFE34\\\\uFE4D-\\\\uFE4F\\\\uFF3F]\")\n};\n\nfunction is_letter(code) {\n    return (code >= 97 && code <= 122)\n        || (code >= 65 && code <= 90)\n        || (code >= 0xaa && UNICODE.letter.test(String.fromCharCode(code)));\n};\n\nfunction is_digit(code) {\n    return code >= 48 && code <= 57;\n};\n\nfunction is_alphanumeric_char(code) {\n    return is_digit(code) || is_letter(code);\n};\n\nfunction is_unicode_digit(code) {\n    return UNICODE.digit.test(String.fromCharCode(code));\n}\n\nfunction is_unicode_combining_mark(ch) {\n    return UNICODE.non_spacing_mark.test(ch) || UNICODE.space_combining_mark.test(ch);\n};\n\nfunction is_unicode_connector_punctuation(ch) {\n    return UNICODE.connector_punctuation.test(ch);\n};\n\nfunction is_identifier(name) {\n    return !RESERVED_WORDS(name) && /^[a-z_$][a-z0-9_$]*$/i.test(name);\n};\n\nfunction is_identifier_start(code) {\n    return code == 36 || code == 95 || is_letter(code);\n};\n\nfunction is_identifier_char(ch) {\n    var code = ch.charCodeAt(0);\n    return is_identifier_start(code)\n        || is_digit(code)\n        || code == 8204 // \\u200c: zero-width non-joiner <ZWNJ>\n        || code == 8205 // \\u200d: zero-width joiner <ZWJ> (in my ECMA-262 PDF, this is also 200c)\n        || is_unicode_combining_mark(ch)\n        || is_unicode_connector_punctuation(ch)\n        || is_unicode_digit(code)\n    ;\n};\n\nfunction is_identifier_string(str){\n    return /^[a-z_$][a-z0-9_$]*$/i.test(str);\n};\n\nfunction parse_js_number(num) {\n    if (RE_HEX_NUMBER.test(num)) {\n        return parseInt(num.substr(2), 16);\n    } else if (RE_OCT_NUMBER.test(num)) {\n        return parseInt(num.substr(1), 8);\n    } else {\n        var val = parseFloat(num);\n        if (val == num) return val;\n    }\n};\n\nfunction JS_Parse_Error(message, filename, line, col, pos) {\n    this.message = message;\n    this.filename = filename;\n    this.line = line;\n    this.col = col;\n    this.pos = pos;\n};\nJS_Parse_Error.prototype = Object.create(Error.prototype);\nJS_Parse_Error.prototype.constructor = JS_Parse_Error;\nJS_Parse_Error.prototype.name = \"SyntaxError\";\nconfigure_error_stack(JS_Parse_Error);\n\nfunction js_error(message, filename, line, col, pos) {\n    throw new JS_Parse_Error(message, filename, line, col, pos);\n};\n\nfunction is_token(token, type, val) {\n    return token.type == type && (val == null || token.value == val);\n};\n\nvar EX_EOF = {};\n\nfunction tokenizer($TEXT, filename, html5_comments, shebang) {\n\n    var S = {\n        text            : $TEXT,\n        filename        : filename,\n        pos             : 0,\n        tokpos          : 0,\n        line            : 1,\n        tokline         : 0,\n        col             : 0,\n        tokcol          : 0,\n        newline_before  : false,\n        regex_allowed   : false,\n        comments_before : [],\n        directives      : {},\n        directive_stack : []\n    };\n\n    function peek() { return S.text.charAt(S.pos); };\n\n    function next(signal_eof, in_string) {\n        var ch = S.text.charAt(S.pos++);\n        if (signal_eof && !ch)\n            throw EX_EOF;\n        if (NEWLINE_CHARS(ch)) {\n            S.newline_before = S.newline_before || !in_string;\n            ++S.line;\n            S.col = 0;\n            if (!in_string && ch == \"\\r\" && peek() == \"\\n\") {\n                // treat a \\r\\n sequence as a single \\n\n                ++S.pos;\n                ch = \"\\n\";\n            }\n        } else {\n            ++S.col;\n        }\n        return ch;\n    };\n\n    function forward(i) {\n        while (i-- > 0) next();\n    };\n\n    function looking_at(str) {\n        return S.text.substr(S.pos, str.length) == str;\n    };\n\n    function find_eol() {\n        var text = S.text;\n        for (var i = S.pos, n = S.text.length; i < n; ++i) {\n            var ch = text[i];\n            if (NEWLINE_CHARS(ch))\n                return i;\n        }\n        return -1;\n    };\n\n    function find(what, signal_eof) {\n        var pos = S.text.indexOf(what, S.pos);\n        if (signal_eof && pos == -1) throw EX_EOF;\n        return pos;\n    };\n\n    function start_token() {\n        S.tokline = S.line;\n        S.tokcol = S.col;\n        S.tokpos = S.pos;\n    };\n\n    var prev_was_dot = false;\n    function token(type, value, is_comment) {\n        S.regex_allowed = ((type == \"operator\" && !UNARY_POSTFIX(value)) ||\n                           (type == \"keyword\" && KEYWORDS_BEFORE_EXPRESSION(value)) ||\n                           (type == \"punc\" && PUNC_BEFORE_EXPRESSION(value)));\n        prev_was_dot = (type == \"punc\" && value == \".\");\n        var ret = {\n            type    : type,\n            value   : value,\n            line    : S.tokline,\n            col     : S.tokcol,\n            pos     : S.tokpos,\n            endline : S.line,\n            endcol  : S.col,\n            endpos  : S.pos,\n            nlb     : S.newline_before,\n            file    : filename\n        };\n        if (/^(?:num|string|regexp)$/i.test(type)) {\n            ret.raw = $TEXT.substring(ret.pos, ret.endpos);\n        }\n        if (!is_comment) {\n            ret.comments_before = S.comments_before;\n            S.comments_before = [];\n            // make note of any newlines in the comments that came before\n            for (var i = 0, len = ret.comments_before.length; i < len; i++) {\n                ret.nlb = ret.nlb || ret.comments_before[i].nlb;\n            }\n        }\n        S.newline_before = false;\n        return new AST_Token(ret);\n    };\n\n    function skip_whitespace() {\n        while (WHITESPACE_CHARS(peek()))\n            next();\n    };\n\n    function read_while(pred) {\n        var ret = \"\", ch, i = 0;\n        while ((ch = peek()) && pred(ch, i++))\n            ret += next();\n        return ret;\n    };\n\n    function parse_error(err) {\n        js_error(err, filename, S.tokline, S.tokcol, S.tokpos);\n    };\n\n    function read_num(prefix) {\n        var has_e = false, after_e = false, has_x = false, has_dot = prefix == \".\";\n        var num = read_while(function(ch, i){\n            var code = ch.charCodeAt(0);\n            switch (code) {\n              case 120: case 88: // xX\n                return has_x ? false : (has_x = true);\n              case 101: case 69: // eE\n                return has_x ? true : has_e ? false : (has_e = after_e = true);\n              case 45: // -\n                return after_e || (i == 0 && !prefix);\n              case 43: // +\n                return after_e;\n              case (after_e = false, 46): // .\n                return (!has_dot && !has_x && !has_e) ? (has_dot = true) : false;\n            }\n            return is_alphanumeric_char(code);\n        });\n        if (prefix) num = prefix + num;\n        if (RE_OCT_NUMBER.test(num) && next_token.has_directive(\"use strict\")) {\n            parse_error(\"Legacy octal literals are not allowed in strict mode\");\n        }\n        var valid = parse_js_number(num);\n        if (!isNaN(valid)) {\n            return token(\"num\", valid);\n        } else {\n            parse_error(\"Invalid syntax: \" + num);\n        }\n    };\n\n    function read_escaped_char(in_string) {\n        var ch = next(true, in_string);\n        switch (ch.charCodeAt(0)) {\n          case 110 : return \"\\n\";\n          case 114 : return \"\\r\";\n          case 116 : return \"\\t\";\n          case 98  : return \"\\b\";\n          case 118 : return \"\\u000b\"; // \\v\n          case 102 : return \"\\f\";\n          case 120 : return String.fromCharCode(hex_bytes(2)); // \\x\n          case 117 : return String.fromCharCode(hex_bytes(4)); // \\u\n          case 10  : return \"\"; // newline\n          case 13  :            // \\r\n            if (peek() == \"\\n\") { // DOS newline\n                next(true, in_string);\n                return \"\";\n            }\n        }\n        if (ch >= \"0\" && ch <= \"7\")\n            return read_octal_escape_sequence(ch);\n        return ch;\n    };\n\n    function read_octal_escape_sequence(ch) {\n        // Read\n        var p = peek();\n        if (p >= \"0\" && p <= \"7\") {\n            ch += next(true);\n            if (ch[0] <= \"3\" && (p = peek()) >= \"0\" && p <= \"7\")\n                ch += next(true);\n        }\n\n        // Parse\n        if (ch === \"0\") return \"\\0\";\n        if (ch.length > 0 && next_token.has_directive(\"use strict\"))\n            parse_error(\"Legacy octal escape sequences are not allowed in strict mode\");\n        return String.fromCharCode(parseInt(ch, 8));\n    }\n\n    function hex_bytes(n) {\n        var num = 0;\n        for (; n > 0; --n) {\n            var digit = parseInt(next(true), 16);\n            if (isNaN(digit))\n                parse_error(\"Invalid hex-character pattern in string\");\n            num = (num << 4) | digit;\n        }\n        return num;\n    };\n\n    var read_string = with_eof_error(\"Unterminated string constant\", function(quote_char){\n        var quote = next(), ret = \"\";\n        for (;;) {\n            var ch = next(true, true);\n            if (ch == \"\\\\\") ch = read_escaped_char(true);\n            else if (NEWLINE_CHARS(ch)) parse_error(\"Unterminated string constant\");\n            else if (ch == quote) break;\n            ret += ch;\n        }\n        var tok = token(\"string\", ret);\n        tok.quote = quote_char;\n        return tok;\n    });\n\n    function skip_line_comment(type) {\n        var regex_allowed = S.regex_allowed;\n        var i = find_eol(), ret;\n        if (i == -1) {\n            ret = S.text.substr(S.pos);\n            S.pos = S.text.length;\n        } else {\n            ret = S.text.substring(S.pos, i);\n            S.pos = i;\n        }\n        S.col = S.tokcol + (S.pos - S.tokpos);\n        S.comments_before.push(token(type, ret, true));\n        S.regex_allowed = regex_allowed;\n        return next_token;\n    };\n\n    var skip_multiline_comment = with_eof_error(\"Unterminated multiline comment\", function(){\n        var regex_allowed = S.regex_allowed;\n        var i = find(\"*/\", true);\n        var text = S.text.substring(S.pos, i).replace(/\\r\\n|\\r|\\u2028|\\u2029/g, '\\n');\n        // update stream position\n        forward(text.length /* doesn't count \\r\\n as 2 char while S.pos - i does */ + 2);\n        S.comments_before.push(token(\"comment2\", text, true));\n        S.regex_allowed = regex_allowed;\n        return next_token;\n    });\n\n    function read_name() {\n        var backslash = false, name = \"\", ch, escaped = false, hex;\n        while ((ch = peek()) != null) {\n            if (!backslash) {\n                if (ch == \"\\\\\") escaped = backslash = true, next();\n                else if (is_identifier_char(ch)) name += next();\n                else break;\n            }\n            else {\n                if (ch != \"u\") parse_error(\"Expecting UnicodeEscapeSequence -- uXXXX\");\n                ch = read_escaped_char();\n                if (!is_identifier_char(ch)) parse_error(\"Unicode char: \" + ch.charCodeAt(0) + \" is not valid in identifier\");\n                name += ch;\n                backslash = false;\n            }\n        }\n        if (KEYWORDS(name) && escaped) {\n            hex = name.charCodeAt(0).toString(16).toUpperCase();\n            name = \"\\\\u\" + \"0000\".substr(hex.length) + hex + name.slice(1);\n        }\n        return name;\n    };\n\n    var read_regexp = with_eof_error(\"Unterminated regular expression\", function(regexp){\n        var prev_backslash = false, ch, in_class = false;\n        while ((ch = next(true))) if (NEWLINE_CHARS(ch)) {\n            parse_error(\"Unexpected line terminator\");\n        } else if (prev_backslash) {\n            regexp += \"\\\\\" + ch;\n            prev_backslash = false;\n        } else if (ch == \"[\") {\n            in_class = true;\n            regexp += ch;\n        } else if (ch == \"]\" && in_class) {\n            in_class = false;\n            regexp += ch;\n        } else if (ch == \"/\" && !in_class) {\n            break;\n        } else if (ch == \"\\\\\") {\n            prev_backslash = true;\n        } else {\n            regexp += ch;\n        }\n        var mods = read_name();\n        try {\n          return token(\"regexp\", new RegExp(regexp, mods));\n        } catch(e) {\n          parse_error(e.message);\n        }\n    });\n\n    function read_operator(prefix) {\n        function grow(op) {\n            if (!peek()) return op;\n            var bigger = op + peek();\n            if (OPERATORS(bigger)) {\n                next();\n                return grow(bigger);\n            } else {\n                return op;\n            }\n        };\n        return token(\"operator\", grow(prefix || next()));\n    };\n\n    function handle_slash() {\n        next();\n        switch (peek()) {\n          case \"/\":\n            next();\n            return skip_line_comment(\"comment1\");\n          case \"*\":\n            next();\n            return skip_multiline_comment();\n        }\n        return S.regex_allowed ? read_regexp(\"\") : read_operator(\"/\");\n    };\n\n    function handle_dot() {\n        next();\n        return is_digit(peek().charCodeAt(0))\n            ? read_num(\".\")\n            : token(\"punc\", \".\");\n    };\n\n    function read_word() {\n        var word = read_name();\n        if (prev_was_dot) return token(\"name\", word);\n        return KEYWORDS_ATOM(word) ? token(\"atom\", word)\n            : !KEYWORDS(word) ? token(\"name\", word)\n            : OPERATORS(word) ? token(\"operator\", word)\n            : token(\"keyword\", word);\n    };\n\n    function with_eof_error(eof_error, cont) {\n        return function(x) {\n            try {\n                return cont(x);\n            } catch(ex) {\n                if (ex === EX_EOF) parse_error(eof_error);\n                else throw ex;\n            }\n        };\n    };\n\n    function next_token(force_regexp) {\n        if (force_regexp != null)\n            return read_regexp(force_regexp);\n        if (shebang && S.pos == 0 && looking_at(\"#!\")) {\n            start_token();\n            forward(2);\n            skip_line_comment(\"comment5\");\n        }\n        for (;;) {\n            skip_whitespace();\n            start_token();\n            if (html5_comments) {\n                if (looking_at(\"<!--\")) {\n                    forward(4);\n                    skip_line_comment(\"comment3\");\n                    continue;\n                }\n                if (looking_at(\"-->\") && S.newline_before) {\n                    forward(3);\n                    skip_line_comment(\"comment4\");\n                    continue;\n                }\n            }\n            var ch = peek();\n            if (!ch) return token(\"eof\");\n            var code = ch.charCodeAt(0);\n            switch (code) {\n              case 34: case 39: return read_string(ch);\n              case 46: return handle_dot();\n              case 47: {\n                  var tok = handle_slash();\n                  if (tok === next_token) continue;\n                  return tok;\n              }\n            }\n            if (is_digit(code)) return read_num();\n            if (PUNC_CHARS(ch)) return token(\"punc\", next());\n            if (OPERATOR_CHARS(ch)) return read_operator();\n            if (code == 92 || is_identifier_start(code)) return read_word();\n            break;\n        }\n        parse_error(\"Unexpected character '\" + ch + \"'\");\n    };\n\n    next_token.context = function(nc) {\n        if (nc) S = nc;\n        return S;\n    };\n\n    next_token.add_directive = function(directive) {\n        S.directive_stack[S.directive_stack.length - 1].push(directive);\n\n        if (S.directives[directive] === undefined) {\n            S.directives[directive] = 1;\n        } else {\n            S.directives[directive]++;\n        }\n    }\n\n    next_token.push_directives_stack = function() {\n        S.directive_stack.push([]);\n    }\n\n    next_token.pop_directives_stack = function() {\n        var directives = S.directive_stack[S.directive_stack.length - 1];\n\n        for (var i = 0; i < directives.length; i++) {\n            S.directives[directives[i]]--;\n        }\n\n        S.directive_stack.pop();\n    }\n\n    next_token.has_directive = function(directive) {\n        return S.directives[directive] !== undefined &&\n            S.directives[directive] > 0;\n    }\n\n    return next_token;\n\n};\n\n/* -----[ Parser (constants) ]----- */\n\nvar UNARY_PREFIX = makePredicate([\n    \"typeof\",\n    \"void\",\n    \"delete\",\n    \"--\",\n    \"++\",\n    \"!\",\n    \"~\",\n    \"-\",\n    \"+\"\n]);\n\nvar UNARY_POSTFIX = makePredicate([ \"--\", \"++\" ]);\n\nvar ASSIGNMENT = makePredicate([ \"=\", \"+=\", \"-=\", \"/=\", \"*=\", \"%=\", \">>=\", \"<<=\", \">>>=\", \"|=\", \"^=\", \"&=\" ]);\n\nvar PRECEDENCE = (function(a, ret){\n    for (var i = 0; i < a.length; ++i) {\n        var b = a[i];\n        for (var j = 0; j < b.length; ++j) {\n            ret[b[j]] = i + 1;\n        }\n    }\n    return ret;\n})(\n    [\n        [\"||\"],\n        [\"&&\"],\n        [\"|\"],\n        [\"^\"],\n        [\"&\"],\n        [\"==\", \"===\", \"!=\", \"!==\"],\n        [\"<\", \">\", \"<=\", \">=\", \"in\", \"instanceof\"],\n        [\">>\", \"<<\", \">>>\"],\n        [\"+\", \"-\"],\n        [\"*\", \"/\", \"%\"]\n    ],\n    {}\n);\n\nvar STATEMENTS_WITH_LABELS = array_to_hash([ \"for\", \"do\", \"while\", \"switch\" ]);\n\nvar ATOMIC_START_TOKEN = array_to_hash([ \"atom\", \"num\", \"string\", \"regexp\", \"name\" ]);\n\n/* -----[ Parser ]----- */\n\nfunction parse($TEXT, options) {\n\n    options = defaults(options, {\n        bare_returns   : false,\n        cli            : false,\n        expression     : false,\n        filename       : null,\n        html5_comments : true,\n        shebang        : true,\n        strict         : false,\n        toplevel       : null,\n    });\n\n    var S = {\n        input         : (typeof $TEXT == \"string\"\n                         ? tokenizer($TEXT, options.filename,\n                                     options.html5_comments, options.shebang)\n                         : $TEXT),\n        token         : null,\n        prev          : null,\n        peeked        : null,\n        in_function   : 0,\n        in_directives : true,\n        in_loop       : 0,\n        labels        : []\n    };\n\n    S.token = next();\n\n    function is(type, value) {\n        return is_token(S.token, type, value);\n    };\n\n    function peek() { return S.peeked || (S.peeked = S.input()); };\n\n    function next() {\n        S.prev = S.token;\n        if (S.peeked) {\n            S.token = S.peeked;\n            S.peeked = null;\n        } else {\n            S.token = S.input();\n        }\n        S.in_directives = S.in_directives && (\n            S.token.type == \"string\" || is(\"punc\", \";\")\n        );\n        return S.token;\n    };\n\n    function prev() {\n        return S.prev;\n    };\n\n    function croak(msg, line, col, pos) {\n        var ctx = S.input.context();\n        js_error(msg,\n                 ctx.filename,\n                 line != null ? line : ctx.tokline,\n                 col != null ? col : ctx.tokcol,\n                 pos != null ? pos : ctx.tokpos);\n    };\n\n    function token_error(token, msg) {\n        croak(msg, token.line, token.col);\n    };\n\n    function unexpected(token) {\n        if (token == null)\n            token = S.token;\n        token_error(token, \"Unexpected token: \" + token.type + \" (\" + token.value + \")\");\n    };\n\n    function expect_token(type, val) {\n        if (is(type, val)) {\n            return next();\n        }\n        token_error(S.token, \"Unexpected token \" + S.token.type + \" «\" + S.token.value + \"»\" + \", expected \" + type + \" «\" + val + \"»\");\n    };\n\n    function expect(punc) { return expect_token(\"punc\", punc); };\n\n    function can_insert_semicolon() {\n        return !options.strict && (\n            S.token.nlb || is(\"eof\") || is(\"punc\", \"}\")\n        );\n    };\n\n    function semicolon(optional) {\n        if (is(\"punc\", \";\")) next();\n        else if (!optional && !can_insert_semicolon()) unexpected();\n    };\n\n    function parenthesised() {\n        expect(\"(\");\n        var exp = expression(true);\n        expect(\")\");\n        return exp;\n    };\n\n    function embed_tokens(parser) {\n        return function() {\n            var start = S.token;\n            var expr = parser();\n            var end = prev();\n            expr.start = start;\n            expr.end = end;\n            return expr;\n        };\n    };\n\n    function handle_regexp() {\n        if (is(\"operator\", \"/\") || is(\"operator\", \"/=\")) {\n            S.peeked = null;\n            S.token = S.input(S.token.value.substr(1)); // force regexp\n        }\n    };\n\n    var statement = embed_tokens(function() {\n        var tmp;\n        handle_regexp();\n        switch (S.token.type) {\n          case \"string\":\n            var dir = false;\n            if (S.in_directives === true) {\n                if ((is_token(peek(), \"punc\", \";\") || peek().nlb) && S.token.raw.indexOf(\"\\\\\") === -1) {\n                    S.input.add_directive(S.token.value);\n                } else {\n                    S.in_directives = false;\n                }\n            }\n            var dir = S.in_directives, stat = simple_statement();\n            if (dir) {\n                return new AST_Directive({\n                    start : stat.body.start,\n                    end   : stat.body.end,\n                    quote : stat.body.quote,\n                    value : stat.body.value,\n                });\n            }\n            return stat;\n          case \"num\":\n          case \"regexp\":\n          case \"operator\":\n          case \"atom\":\n            return simple_statement();\n\n          case \"name\":\n            return is_token(peek(), \"punc\", \":\")\n                ? labeled_statement()\n                : simple_statement();\n\n          case \"punc\":\n            switch (S.token.value) {\n              case \"{\":\n                return new AST_BlockStatement({\n                    start : S.token,\n                    body  : block_(),\n                    end   : prev()\n                });\n              case \"[\":\n              case \"(\":\n                return simple_statement();\n              case \";\":\n                S.in_directives = false;\n                next();\n                return new AST_EmptyStatement();\n              default:\n                unexpected();\n            }\n\n          case \"keyword\":\n            switch (tmp = S.token.value, next(), tmp) {\n              case \"break\":\n                return break_cont(AST_Break);\n\n              case \"continue\":\n                return break_cont(AST_Continue);\n\n              case \"debugger\":\n                semicolon();\n                return new AST_Debugger();\n\n              case \"do\":\n                return new AST_Do({\n                    body      : in_loop(statement),\n                    condition : (expect_token(\"keyword\", \"while\"), tmp = parenthesised(), semicolon(true), tmp)\n                });\n\n              case \"while\":\n                return new AST_While({\n                    condition : parenthesised(),\n                    body      : in_loop(statement)\n                });\n\n              case \"for\":\n                return for_();\n\n              case \"function\":\n                return function_(AST_Defun);\n\n              case \"if\":\n                return if_();\n\n              case \"return\":\n                if (S.in_function == 0 && !options.bare_returns)\n                    croak(\"'return' outside of function\");\n                return new AST_Return({\n                    value: ( is(\"punc\", \";\")\n                             ? (next(), null)\n                             : can_insert_semicolon()\n                             ? null\n                             : (tmp = expression(true), semicolon(), tmp) )\n                });\n\n              case \"switch\":\n                return new AST_Switch({\n                    expression : parenthesised(),\n                    body       : in_loop(switch_body_)\n                });\n\n              case \"throw\":\n                if (S.token.nlb)\n                    croak(\"Illegal newline after 'throw'\");\n                return new AST_Throw({\n                    value: (tmp = expression(true), semicolon(), tmp)\n                });\n\n              case \"try\":\n                return try_();\n\n              case \"var\":\n                return tmp = var_(), semicolon(), tmp;\n\n              case \"const\":\n                return tmp = const_(), semicolon(), tmp;\n\n              case \"with\":\n                if (S.input.has_directive(\"use strict\")) {\n                    croak(\"Strict mode may not include a with statement\");\n                }\n                return new AST_With({\n                    expression : parenthesised(),\n                    body       : statement()\n                });\n            }\n        }\n        unexpected();\n    });\n\n    function labeled_statement() {\n        var label = as_symbol(AST_Label);\n        if (find_if(function(l){ return l.name == label.name }, S.labels)) {\n            // ECMA-262, 12.12: An ECMAScript program is considered\n            // syntactically incorrect if it contains a\n            // LabelledStatement that is enclosed by a\n            // LabelledStatement with the same Identifier as label.\n            croak(\"Label \" + label.name + \" defined twice\");\n        }\n        expect(\":\");\n        S.labels.push(label);\n        var stat = statement();\n        S.labels.pop();\n        if (!(stat instanceof AST_IterationStatement)) {\n            // check for `continue` that refers to this label.\n            // those should be reported as syntax errors.\n            // https://github.com/mishoo/UglifyJS2/issues/287\n            label.references.forEach(function(ref){\n                if (ref instanceof AST_Continue) {\n                    ref = ref.label.start;\n                    croak(\"Continue label `\" + label.name + \"` refers to non-IterationStatement.\",\n                          ref.line, ref.col, ref.pos);\n                }\n            });\n        }\n        return new AST_LabeledStatement({ body: stat, label: label });\n    };\n\n    function simple_statement(tmp) {\n        return new AST_SimpleStatement({ body: (tmp = expression(true), semicolon(), tmp) });\n    };\n\n    function break_cont(type) {\n        var label = null, ldef;\n        if (!can_insert_semicolon()) {\n            label = as_symbol(AST_LabelRef, true);\n        }\n        if (label != null) {\n            ldef = find_if(function(l){ return l.name == label.name }, S.labels);\n            if (!ldef)\n                croak(\"Undefined label \" + label.name);\n            label.thedef = ldef;\n        }\n        else if (S.in_loop == 0)\n            croak(type.TYPE + \" not inside a loop or switch\");\n        semicolon();\n        var stat = new type({ label: label });\n        if (ldef) ldef.references.push(stat);\n        return stat;\n    };\n\n    function for_() {\n        expect(\"(\");\n        var init = null;\n        if (!is(\"punc\", \";\")) {\n            init = is(\"keyword\", \"var\")\n                ? (next(), var_(true))\n                : expression(true, true);\n            if (is(\"operator\", \"in\")) {\n                if (init instanceof AST_Var && init.definitions.length > 1)\n                    croak(\"Only one variable declaration allowed in for..in loop\");\n                next();\n                return for_in(init);\n            }\n        }\n        return regular_for(init);\n    };\n\n    function regular_for(init) {\n        expect(\";\");\n        var test = is(\"punc\", \";\") ? null : expression(true);\n        expect(\";\");\n        var step = is(\"punc\", \")\") ? null : expression(true);\n        expect(\")\");\n        return new AST_For({\n            init      : init,\n            condition : test,\n            step      : step,\n            body      : in_loop(statement)\n        });\n    };\n\n    function for_in(init) {\n        var lhs = init instanceof AST_Var ? init.definitions[0].name : null;\n        var obj = expression(true);\n        expect(\")\");\n        return new AST_ForIn({\n            init   : init,\n            name   : lhs,\n            object : obj,\n            body   : in_loop(statement)\n        });\n    };\n\n    var function_ = function(ctor) {\n        var in_statement = ctor === AST_Defun;\n        var name = is(\"name\") ? as_symbol(in_statement ? AST_SymbolDefun : AST_SymbolLambda) : null;\n        if (in_statement && !name)\n            unexpected();\n        expect(\"(\");\n        return new ctor({\n            name: name,\n            argnames: (function(first, a){\n                while (!is(\"punc\", \")\")) {\n                    if (first) first = false; else expect(\",\");\n                    a.push(as_symbol(AST_SymbolFunarg));\n                }\n                next();\n                return a;\n            })(true, []),\n            body: (function(loop, labels){\n                ++S.in_function;\n                S.in_directives = true;\n                S.input.push_directives_stack();\n                S.in_loop = 0;\n                S.labels = [];\n                var a = block_();\n                S.input.pop_directives_stack();\n                --S.in_function;\n                S.in_loop = loop;\n                S.labels = labels;\n                return a;\n            })(S.in_loop, S.labels)\n        });\n    };\n\n    function if_() {\n        var cond = parenthesised(), body = statement(), belse = null;\n        if (is(\"keyword\", \"else\")) {\n            next();\n            belse = statement();\n        }\n        return new AST_If({\n            condition   : cond,\n            body        : body,\n            alternative : belse\n        });\n    };\n\n    function block_() {\n        expect(\"{\");\n        var a = [];\n        while (!is(\"punc\", \"}\")) {\n            if (is(\"eof\")) unexpected();\n            a.push(statement());\n        }\n        next();\n        return a;\n    };\n\n    function switch_body_() {\n        expect(\"{\");\n        var a = [], cur = null, branch = null, tmp;\n        while (!is(\"punc\", \"}\")) {\n            if (is(\"eof\")) unexpected();\n            if (is(\"keyword\", \"case\")) {\n                if (branch) branch.end = prev();\n                cur = [];\n                branch = new AST_Case({\n                    start      : (tmp = S.token, next(), tmp),\n                    expression : expression(true),\n                    body       : cur\n                });\n                a.push(branch);\n                expect(\":\");\n            }\n            else if (is(\"keyword\", \"default\")) {\n                if (branch) branch.end = prev();\n                cur = [];\n                branch = new AST_Default({\n                    start : (tmp = S.token, next(), expect(\":\"), tmp),\n                    body  : cur\n                });\n                a.push(branch);\n            }\n            else {\n                if (!cur) unexpected();\n                cur.push(statement());\n            }\n        }\n        if (branch) branch.end = prev();\n        next();\n        return a;\n    };\n\n    function try_() {\n        var body = block_(), bcatch = null, bfinally = null;\n        if (is(\"keyword\", \"catch\")) {\n            var start = S.token;\n            next();\n            expect(\"(\");\n            var name = as_symbol(AST_SymbolCatch);\n            expect(\")\");\n            bcatch = new AST_Catch({\n                start   : start,\n                argname : name,\n                body    : block_(),\n                end     : prev()\n            });\n        }\n        if (is(\"keyword\", \"finally\")) {\n            var start = S.token;\n            next();\n            bfinally = new AST_Finally({\n                start : start,\n                body  : block_(),\n                end   : prev()\n            });\n        }\n        if (!bcatch && !bfinally)\n            croak(\"Missing catch/finally blocks\");\n        return new AST_Try({\n            body     : body,\n            bcatch   : bcatch,\n            bfinally : bfinally\n        });\n    };\n\n    function vardefs(no_in, in_const) {\n        var a = [];\n        for (;;) {\n            a.push(new AST_VarDef({\n                start : S.token,\n                name  : as_symbol(in_const ? AST_SymbolConst : AST_SymbolVar),\n                value : is(\"operator\", \"=\") ? (next(), expression(false, no_in)) : null,\n                end   : prev()\n            }));\n            if (!is(\"punc\", \",\"))\n                break;\n            next();\n        }\n        return a;\n    };\n\n    var var_ = function(no_in) {\n        return new AST_Var({\n            start       : prev(),\n            definitions : vardefs(no_in, false),\n            end         : prev()\n        });\n    };\n\n    var const_ = function() {\n        return new AST_Const({\n            start       : prev(),\n            definitions : vardefs(false, true),\n            end         : prev()\n        });\n    };\n\n    var new_ = function(allow_calls) {\n        var start = S.token;\n        expect_token(\"operator\", \"new\");\n        var newexp = expr_atom(false), args;\n        if (is(\"punc\", \"(\")) {\n            next();\n            args = expr_list(\")\");\n        } else {\n            args = [];\n        }\n        return subscripts(new AST_New({\n            start      : start,\n            expression : newexp,\n            args       : args,\n            end        : prev()\n        }), allow_calls);\n    };\n\n    function as_atom_node() {\n        var tok = S.token, ret;\n        switch (tok.type) {\n          case \"name\":\n          case \"keyword\":\n            ret = _make_symbol(AST_SymbolRef);\n            break;\n          case \"num\":\n            ret = new AST_Number({ start: tok, end: tok, value: tok.value });\n            break;\n          case \"string\":\n            ret = new AST_String({\n                start : tok,\n                end   : tok,\n                value : tok.value,\n                quote : tok.quote\n            });\n            break;\n          case \"regexp\":\n            ret = new AST_RegExp({ start: tok, end: tok, value: tok.value });\n            break;\n          case \"atom\":\n            switch (tok.value) {\n              case \"false\":\n                ret = new AST_False({ start: tok, end: tok });\n                break;\n              case \"true\":\n                ret = new AST_True({ start: tok, end: tok });\n                break;\n              case \"null\":\n                ret = new AST_Null({ start: tok, end: tok });\n                break;\n            }\n            break;\n          case \"operator\":\n            if (!is_identifier_string(tok.value)) {\n                croak(\"Invalid getter/setter name: \" + tok.value,\n                    tok.line, tok.col, tok.pos);\n            }\n            ret = _make_symbol(AST_SymbolRef);\n            break;\n        }\n        next();\n        return ret;\n    };\n\n    var expr_atom = function(allow_calls) {\n        if (is(\"operator\", \"new\")) {\n            return new_(allow_calls);\n        }\n        var start = S.token;\n        if (is(\"punc\")) {\n            switch (start.value) {\n              case \"(\":\n                next();\n                var ex = expression(true);\n                ex.start = start;\n                ex.end = S.token;\n                expect(\")\");\n                return subscripts(ex, allow_calls);\n              case \"[\":\n                return subscripts(array_(), allow_calls);\n              case \"{\":\n                return subscripts(object_(), allow_calls);\n            }\n            unexpected();\n        }\n        if (is(\"keyword\", \"function\")) {\n            next();\n            var func = function_(AST_Function);\n            func.start = start;\n            func.end = prev();\n            return subscripts(func, allow_calls);\n        }\n        if (ATOMIC_START_TOKEN[S.token.type]) {\n            return subscripts(as_atom_node(), allow_calls);\n        }\n        unexpected();\n    };\n\n    function expr_list(closing, allow_trailing_comma, allow_empty) {\n        var first = true, a = [];\n        while (!is(\"punc\", closing)) {\n            if (first) first = false; else expect(\",\");\n            if (allow_trailing_comma && is(\"punc\", closing)) break;\n            if (is(\"punc\", \",\") && allow_empty) {\n                a.push(new AST_Hole({ start: S.token, end: S.token }));\n            } else {\n                a.push(expression(false));\n            }\n        }\n        next();\n        return a;\n    };\n\n    var array_ = embed_tokens(function() {\n        expect(\"[\");\n        return new AST_Array({\n            elements: expr_list(\"]\", !options.strict, true)\n        });\n    });\n\n    var create_accessor = embed_tokens(function() {\n        return function_(AST_Accessor);\n    });\n\n    var object_ = embed_tokens(function() {\n        expect(\"{\");\n        var first = true, a = [];\n        while (!is(\"punc\", \"}\")) {\n            if (first) first = false; else expect(\",\");\n            if (!options.strict && is(\"punc\", \"}\"))\n                // allow trailing comma\n                break;\n            var start = S.token;\n            var type = start.type;\n            var name = as_property_name();\n            if (type == \"name\" && !is(\"punc\", \":\")) {\n                if (name == \"get\") {\n                    a.push(new AST_ObjectGetter({\n                        start : start,\n                        key   : as_atom_node(),\n                        value : create_accessor(),\n                        end   : prev()\n                    }));\n                    continue;\n                }\n                if (name == \"set\") {\n                    a.push(new AST_ObjectSetter({\n                        start : start,\n                        key   : as_atom_node(),\n                        value : create_accessor(),\n                        end   : prev()\n                    }));\n                    continue;\n                }\n            }\n            expect(\":\");\n            a.push(new AST_ObjectKeyVal({\n                start : start,\n                quote : start.quote,\n                key   : name,\n                value : expression(false),\n                end   : prev()\n            }));\n        }\n        next();\n        return new AST_Object({ properties: a });\n    });\n\n    function as_property_name() {\n        var tmp = S.token;\n        next();\n        switch (tmp.type) {\n          case \"num\":\n          case \"string\":\n          case \"name\":\n          case \"operator\":\n          case \"keyword\":\n          case \"atom\":\n            return tmp.value;\n          default:\n            unexpected();\n        }\n    };\n\n    function as_name() {\n        var tmp = S.token;\n        next();\n        switch (tmp.type) {\n          case \"name\":\n          case \"operator\":\n          case \"keyword\":\n          case \"atom\":\n            return tmp.value;\n          default:\n            unexpected();\n        }\n    };\n\n    function _make_symbol(type) {\n        var name = S.token.value;\n        return new (name == \"this\" ? AST_This : type)({\n            name  : String(name),\n            start : S.token,\n            end   : S.token\n        });\n    };\n\n    function as_symbol(type, noerror) {\n        if (!is(\"name\")) {\n            if (!noerror) croak(\"Name expected\");\n            return null;\n        }\n        var sym = _make_symbol(type);\n        next();\n        return sym;\n    };\n\n    var subscripts = function(expr, allow_calls) {\n        var start = expr.start;\n        if (is(\"punc\", \".\")) {\n            next();\n            return subscripts(new AST_Dot({\n                start      : start,\n                expression : expr,\n                property   : as_name(),\n                end        : prev()\n            }), allow_calls);\n        }\n        if (is(\"punc\", \"[\")) {\n            next();\n            var prop = expression(true);\n            expect(\"]\");\n            return subscripts(new AST_Sub({\n                start      : start,\n                expression : expr,\n                property   : prop,\n                end        : prev()\n            }), allow_calls);\n        }\n        if (allow_calls && is(\"punc\", \"(\")) {\n            next();\n            return subscripts(new AST_Call({\n                start      : start,\n                expression : expr,\n                args       : expr_list(\")\"),\n                end        : prev()\n            }), true);\n        }\n        return expr;\n    };\n\n    var maybe_unary = function(allow_calls) {\n        var start = S.token;\n        if (is(\"operator\") && UNARY_PREFIX(start.value)) {\n            next();\n            handle_regexp();\n            var ex = make_unary(AST_UnaryPrefix, start.value, maybe_unary(allow_calls));\n            ex.start = start;\n            ex.end = prev();\n            return ex;\n        }\n        var val = expr_atom(allow_calls);\n        while (is(\"operator\") && UNARY_POSTFIX(S.token.value) && !S.token.nlb) {\n            val = make_unary(AST_UnaryPostfix, S.token.value, val);\n            val.start = start;\n            val.end = S.token;\n            next();\n        }\n        return val;\n    };\n\n    function make_unary(ctor, op, expr) {\n        if ((op == \"++\" || op == \"--\") && !is_assignable(expr))\n            croak(\"Invalid use of \" + op + \" operator\", null, ctor === AST_UnaryPrefix ? expr.start.col - 1 : null);\n        return new ctor({ operator: op, expression: expr });\n    };\n\n    var expr_op = function(left, min_prec, no_in) {\n        var op = is(\"operator\") ? S.token.value : null;\n        if (op == \"in\" && no_in) op = null;\n        var prec = op != null ? PRECEDENCE[op] : null;\n        if (prec != null && prec > min_prec) {\n            next();\n            var right = expr_op(maybe_unary(true), prec, no_in);\n            return expr_op(new AST_Binary({\n                start    : left.start,\n                left     : left,\n                operator : op,\n                right    : right,\n                end      : right.end\n            }), min_prec, no_in);\n        }\n        return left;\n    };\n\n    function expr_ops(no_in) {\n        return expr_op(maybe_unary(true), 0, no_in);\n    };\n\n    var maybe_conditional = function(no_in) {\n        var start = S.token;\n        var expr = expr_ops(no_in);\n        if (is(\"operator\", \"?\")) {\n            next();\n            var yes = expression(false);\n            expect(\":\");\n            return new AST_Conditional({\n                start       : start,\n                condition   : expr,\n                consequent  : yes,\n                alternative : expression(false, no_in),\n                end         : prev()\n            });\n        }\n        return expr;\n    };\n\n    function is_assignable(expr) {\n        if (options.cli) return true;\n        return expr instanceof AST_PropAccess || expr instanceof AST_SymbolRef;\n    };\n\n    var maybe_assign = function(no_in) {\n        var start = S.token;\n        var left = maybe_conditional(no_in), val = S.token.value;\n        if (is(\"operator\") && ASSIGNMENT(val)) {\n            if (is_assignable(left)) {\n                next();\n                return new AST_Assign({\n                    start    : start,\n                    left     : left,\n                    operator : val,\n                    right    : maybe_assign(no_in),\n                    end      : prev()\n                });\n            }\n            croak(\"Invalid assignment\");\n        }\n        return left;\n    };\n\n    var expression = function(commas, no_in) {\n        var start = S.token;\n        var expr = maybe_assign(no_in);\n        if (commas && is(\"punc\", \",\")) {\n            next();\n            return new AST_Seq({\n                start  : start,\n                car    : expr,\n                cdr    : expression(true, no_in),\n                end    : peek()\n            });\n        }\n        return expr;\n    };\n\n    function in_loop(cont) {\n        ++S.in_loop;\n        var ret = cont();\n        --S.in_loop;\n        return ret;\n    };\n\n    if (options.expression) {\n        return expression(true);\n    }\n\n    return (function(){\n        var start = S.token;\n        var body = [];\n        S.input.push_directives_stack();\n        while (!is(\"eof\"))\n            body.push(statement());\n        S.input.pop_directives_stack();\n        var end = prev();\n        var toplevel = options.toplevel;\n        if (toplevel) {\n            toplevel.body = toplevel.body.concat(body);\n            toplevel.end = end;\n        } else {\n            toplevel = new AST_Toplevel({ start: start, body: body, end: end });\n        }\n        return toplevel;\n    })();\n\n};\n","/home/travis/build/npmtest/node-npmtest-uglify-js/node_modules/uglify-js/lib/propmangle.js":"/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nfunction find_builtins() {\n    // NaN will be included due to Number.NaN\n    var a = [\n        \"null\",\n        \"true\",\n        \"false\",\n        \"Infinity\",\n        \"-Infinity\",\n        \"undefined\",\n    ];\n    [ Object, Array, Function, Number,\n      String, Boolean, Error, Math,\n      Date, RegExp\n    ].forEach(function(ctor){\n        Object.getOwnPropertyNames(ctor).map(add);\n        if (ctor.prototype) {\n            Object.getOwnPropertyNames(ctor.prototype).map(add);\n        }\n    });\n    function add(name) {\n        push_uniq(a, name);\n    }\n    return a;\n}\n\nfunction mangle_properties(ast, options) {\n    options = defaults(options, {\n        cache: null,\n        debug: false,\n        ignore_quoted: false,\n        only_cache: false,\n        regex: null,\n        reserved: null,\n    });\n\n    var reserved = options.reserved;\n    if (reserved == null)\n        reserved = find_builtins();\n\n    var cache = options.cache;\n    if (cache == null) {\n        cache = {\n            cname: -1,\n            props: new Dictionary()\n        };\n    }\n\n    var regex = options.regex;\n    var ignore_quoted = options.ignore_quoted;\n\n    // note debug is either false (disabled), or a string of the debug suffix to use (enabled).\n    // note debug may be enabled as an empty string, which is falsey. Also treat passing 'true'\n    // the same as passing an empty string.\n    var debug = (options.debug !== false);\n    var debug_name_suffix;\n    if (debug) {\n        debug_name_suffix = (options.debug === true ? \"\" : options.debug);\n    }\n\n    var names_to_mangle = [];\n    var unmangleable = [];\n    var ignored = {};\n\n    // step 1: find candidates to mangle\n    ast.walk(new TreeWalker(function(node){\n        if (node instanceof AST_ObjectKeyVal) {\n            add(node.key, ignore_quoted && node.quote);\n        }\n        else if (node instanceof AST_ObjectProperty) {\n            // setter or getter, since KeyVal is handled above\n            add(node.key.name);\n        }\n        else if (node instanceof AST_Dot) {\n            add(node.property);\n        }\n        else if (node instanceof AST_Sub) {\n            addStrings(node.property, ignore_quoted);\n        }\n    }));\n\n    // step 2: transform the tree, renaming properties\n    return ast.transform(new TreeTransformer(function(node){\n        if (node instanceof AST_ObjectKeyVal) {\n            if (!(ignore_quoted && node.quote))\n                node.key = mangle(node.key);\n        }\n        else if (node instanceof AST_ObjectProperty) {\n            // setter or getter\n            node.key.name = mangle(node.key.name);\n        }\n        else if (node instanceof AST_Dot) {\n            node.property = mangle(node.property);\n        }\n        else if (node instanceof AST_Sub) {\n            if (!ignore_quoted)\n                node.property = mangleStrings(node.property);\n        }\n        // else if (node instanceof AST_String) {\n        //     if (should_mangle(node.value)) {\n        //         AST_Node.warn(\n        //             \"Found \\\"{prop}\\\" property candidate for mangling in an arbitrary string [{file}:{line},{col}]\", {\n        //                 file : node.start.file,\n        //                 line : node.start.line,\n        //                 col  : node.start.col,\n        //                 prop : node.value\n        //             }\n        //         );\n        //     }\n        // }\n    }));\n\n    // only function declarations after this line\n\n    function can_mangle(name) {\n        if (unmangleable.indexOf(name) >= 0) return false;\n        if (reserved.indexOf(name) >= 0) return false;\n        if (options.only_cache) {\n            return cache.props.has(name);\n        }\n        if (/^-?[0-9]+(\\.[0-9]+)?(e[+-][0-9]+)?$/.test(name)) return false;\n        return true;\n    }\n\n    function should_mangle(name) {\n        if (ignore_quoted && name in ignored) return false;\n        if (regex && !regex.test(name)) return false;\n        if (reserved.indexOf(name) >= 0) return false;\n        return cache.props.has(name)\n            || names_to_mangle.indexOf(name) >= 0;\n    }\n\n    function add(name, ignore) {\n        if (ignore) {\n            ignored[name] = true;\n            return;\n        }\n\n        if (can_mangle(name))\n            push_uniq(names_to_mangle, name);\n\n        if (!should_mangle(name)) {\n            push_uniq(unmangleable, name);\n        }\n    }\n\n    function mangle(name) {\n        if (!should_mangle(name)) {\n            return name;\n        }\n\n        var mangled = cache.props.get(name);\n        if (!mangled) {\n            if (debug) {\n                // debug mode: use a prefix and suffix to preserve readability, e.g. o.foo -> o._$foo$NNN_.\n                var debug_mangled = \"_$\" + name + \"$\" + debug_name_suffix + \"_\";\n\n                if (can_mangle(debug_mangled) && !(ignore_quoted && debug_mangled in ignored)) {\n                    mangled = debug_mangled;\n                }\n            }\n\n            // either debug mode is off, or it is on and we could not use the mangled name\n            if (!mangled) {\n                // note can_mangle() does not check if the name collides with the 'ignored' set\n                // (filled with quoted properties when ignore_quoted set). Make sure we add this\n                // check so we don't collide with a quoted name.\n                do {\n                    mangled = base54(++cache.cname);\n                } while (!can_mangle(mangled) || (ignore_quoted && mangled in ignored));\n            }\n\n            cache.props.set(name, mangled);\n        }\n        return mangled;\n    }\n\n    function addStrings(node, ignore) {\n        var out = {};\n        try {\n            (function walk(node){\n                node.walk(new TreeWalker(function(node){\n                    if (node instanceof AST_Seq) {\n                        walk(node.cdr);\n                        return true;\n                    }\n                    if (node instanceof AST_String) {\n                        add(node.value, ignore);\n                        return true;\n                    }\n                    if (node instanceof AST_Conditional) {\n                        walk(node.consequent);\n                        walk(node.alternative);\n                        return true;\n                    }\n                    throw out;\n                }));\n            })(node);\n        } catch(ex) {\n            if (ex !== out) throw ex;\n        }\n    }\n\n    function mangleStrings(node) {\n        return node.transform(new TreeTransformer(function(node){\n            if (node instanceof AST_Seq) {\n                node.cdr = mangleStrings(node.cdr);\n            }\n            else if (node instanceof AST_String) {\n                node.value = mangle(node.value);\n            }\n            else if (node instanceof AST_Conditional) {\n                node.consequent = mangleStrings(node.consequent);\n                node.alternative = mangleStrings(node.alternative);\n            }\n            return node;\n        }));\n    }\n\n}\n","/home/travis/build/npmtest/node-npmtest-uglify-js/node_modules/uglify-js/lib/scope.js":"/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nfunction SymbolDef(scope, index, orig) {\n    this.name = orig.name;\n    this.orig = [ orig ];\n    this.scope = scope;\n    this.references = [];\n    this.global = false;\n    this.mangled_name = null;\n    this.undeclared = false;\n    this.index = index;\n    this.id = SymbolDef.next_id++;\n};\n\nSymbolDef.next_id = 1;\n\nSymbolDef.prototype = {\n    unmangleable: function(options) {\n        if (!options) options = {};\n\n        return (this.global && !options.toplevel)\n            || this.undeclared\n            || (!options.eval && (this.scope.uses_eval || this.scope.uses_with))\n            || (options.keep_fnames\n                && (this.orig[0] instanceof AST_SymbolLambda\n                    || this.orig[0] instanceof AST_SymbolDefun));\n    },\n    mangle: function(options) {\n        var cache = options.cache && options.cache.props;\n        if (this.global && cache && cache.has(this.name)) {\n            this.mangled_name = cache.get(this.name);\n        }\n        else if (!this.mangled_name && !this.unmangleable(options)) {\n            var s = this.scope;\n            var sym = this.orig[0];\n            if (!options.screw_ie8 && sym instanceof AST_SymbolLambda)\n                s = s.parent_scope;\n            var def;\n            if (this.defun && (def = this.defun.variables.get(this.name))) {\n                this.mangled_name = def.mangled_name || def.name;\n            } else\n                this.mangled_name = s.next_mangled(options, this);\n            if (this.global && cache) {\n                cache.set(this.name, this.mangled_name);\n            }\n        }\n    }\n};\n\nAST_Toplevel.DEFMETHOD(\"figure_out_scope\", function(options){\n    options = defaults(options, {\n        cache: null,\n        screw_ie8: true,\n    });\n\n    // pass 1: setup scope chaining and handle definitions\n    var self = this;\n    var scope = self.parent_scope = null;\n    var labels = new Dictionary();\n    var defun = null;\n    var tw = new TreeWalker(function(node, descend){\n        if (node instanceof AST_Catch) {\n            var save_scope = scope;\n            scope = new AST_Scope(node);\n            scope.init_scope_vars(save_scope);\n            descend();\n            scope = save_scope;\n            return true;\n        }\n        if (node instanceof AST_Scope) {\n            node.init_scope_vars(scope);\n            var save_scope = scope;\n            var save_defun = defun;\n            var save_labels = labels;\n            defun = scope = node;\n            labels = new Dictionary();\n            descend();\n            scope = save_scope;\n            defun = save_defun;\n            labels = save_labels;\n            return true;        // don't descend again in TreeWalker\n        }\n        if (node instanceof AST_LabeledStatement) {\n            var l = node.label;\n            if (labels.has(l.name)) {\n                throw new Error(string_template(\"Label {name} defined twice\", l));\n            }\n            labels.set(l.name, l);\n            descend();\n            labels.del(l.name);\n            return true;        // no descend again\n        }\n        if (node instanceof AST_With) {\n            for (var s = scope; s; s = s.parent_scope)\n                s.uses_with = true;\n            return;\n        }\n        if (node instanceof AST_Symbol) {\n            node.scope = scope;\n        }\n        if (node instanceof AST_Label) {\n            node.thedef = node;\n            node.references = [];\n        }\n        if (node instanceof AST_SymbolLambda) {\n            defun.def_function(node);\n        }\n        else if (node instanceof AST_SymbolDefun) {\n            // Careful here, the scope where this should be defined is\n            // the parent scope.  The reason is that we enter a new\n            // scope when we encounter the AST_Defun node (which is\n            // instanceof AST_Scope) but we get to the symbol a bit\n            // later.\n            (node.scope = defun.parent_scope).def_function(node);\n        }\n        else if (node instanceof AST_SymbolVar\n            || node instanceof AST_SymbolConst) {\n            defun.def_variable(node);\n            if (defun !== scope) {\n                node.mark_enclosed(options);\n                var def = scope.find_variable(node);\n                if (node.thedef !== def) {\n                    node.thedef = def;\n                    node.reference(options);\n                }\n            }\n        }\n        else if (node instanceof AST_SymbolCatch) {\n            scope.def_variable(node).defun = defun;\n        }\n        else if (node instanceof AST_LabelRef) {\n            var sym = labels.get(node.name);\n            if (!sym) throw new Error(string_template(\"Undefined label {name} [{line},{col}]\", {\n                name: node.name,\n                line: node.start.line,\n                col: node.start.col\n            }));\n            node.thedef = sym;\n        }\n    });\n    self.walk(tw);\n\n    // pass 2: find back references and eval\n    var func = null;\n    var globals = self.globals = new Dictionary();\n    var tw = new TreeWalker(function(node, descend){\n        if (node instanceof AST_Lambda) {\n            var prev_func = func;\n            func = node;\n            descend();\n            func = prev_func;\n            return true;\n        }\n        if (node instanceof AST_LoopControl && node.label) {\n            node.label.thedef.references.push(node);\n            return true;\n        }\n        if (node instanceof AST_SymbolRef) {\n            var name = node.name;\n            if (name == \"eval\" && tw.parent() instanceof AST_Call) {\n                for (var s = node.scope; s && !s.uses_eval; s = s.parent_scope) {\n                    s.uses_eval = true;\n                }\n            }\n            var sym = node.scope.find_variable(name);\n            if (node.scope instanceof AST_Lambda && name == \"arguments\") {\n                node.scope.uses_arguments = true;\n            }\n            if (!sym) {\n                sym = self.def_global(node);\n            }\n            node.thedef = sym;\n            node.reference(options);\n            return true;\n        }\n    });\n    self.walk(tw);\n\n    // pass 3: fix up any scoping issue with IE8\n    if (!options.screw_ie8) {\n        self.walk(new TreeWalker(function(node, descend) {\n            if (node instanceof AST_SymbolCatch) {\n                var name = node.name;\n                var refs = node.thedef.references;\n                var scope = node.thedef.defun;\n                var def = scope.find_variable(name) || self.globals.get(name) || scope.def_variable(node);\n                refs.forEach(function(ref) {\n                    ref.thedef = def;\n                    ref.reference(options);\n                });\n                node.thedef = def;\n                return true;\n            }\n        }));\n    }\n\n    if (options.cache) {\n        this.cname = options.cache.cname;\n    }\n});\n\nAST_Toplevel.DEFMETHOD(\"def_global\", function(node){\n    var globals = this.globals, name = node.name;\n    if (globals.has(name)) {\n        return globals.get(name);\n    } else {\n        var g = new SymbolDef(this, globals.size(), node);\n        g.undeclared = true;\n        g.global = true;\n        globals.set(name, g);\n        return g;\n    }\n});\n\nAST_Scope.DEFMETHOD(\"init_scope_vars\", function(parent_scope){\n    this.variables = new Dictionary();  // map name to AST_SymbolVar (variables defined in this scope; includes functions)\n    this.functions = new Dictionary();  // map name to AST_SymbolDefun (functions defined in this scope)\n    this.uses_with = false;             // will be set to true if this or some nested scope uses the `with` statement\n    this.uses_eval = false;             // will be set to true if this or nested scope uses the global `eval`\n    this.parent_scope = parent_scope;   // the parent scope\n    this.enclosed = [];                 // a list of variables from this or outer scope(s) that are referenced from this or inner scopes\n    this.cname = -1;                    // the current index for mangling functions/variables\n});\n\nAST_Lambda.DEFMETHOD(\"init_scope_vars\", function(){\n    AST_Scope.prototype.init_scope_vars.apply(this, arguments);\n    this.uses_arguments = false;\n    this.def_variable(new AST_SymbolVar({\n        name: \"arguments\",\n        start: this.start,\n        end: this.end\n    }));\n});\n\nAST_Symbol.DEFMETHOD(\"mark_enclosed\", function(options) {\n    var def = this.definition();\n    var s = this.scope;\n    while (s) {\n        push_uniq(s.enclosed, def);\n        if (options.keep_fnames) {\n            s.functions.each(function(d) {\n                push_uniq(def.scope.enclosed, d);\n            });\n        }\n        if (s === def.scope) break;\n        s = s.parent_scope;\n    }\n});\n\nAST_Symbol.DEFMETHOD(\"reference\", function(options) {\n    this.definition().references.push(this);\n    this.mark_enclosed(options);\n});\n\nAST_Scope.DEFMETHOD(\"find_variable\", function(name){\n    if (name instanceof AST_Symbol) name = name.name;\n    return this.variables.get(name)\n        || (this.parent_scope && this.parent_scope.find_variable(name));\n});\n\nAST_Scope.DEFMETHOD(\"def_function\", function(symbol){\n    this.functions.set(symbol.name, this.def_variable(symbol));\n});\n\nAST_Scope.DEFMETHOD(\"def_variable\", function(symbol){\n    var def;\n    if (!this.variables.has(symbol.name)) {\n        def = new SymbolDef(this, this.variables.size(), symbol);\n        this.variables.set(symbol.name, def);\n        def.global = !this.parent_scope;\n    } else {\n        def = this.variables.get(symbol.name);\n        def.orig.push(symbol);\n    }\n    return symbol.thedef = def;\n});\n\nAST_Scope.DEFMETHOD(\"next_mangled\", function(options){\n    var ext = this.enclosed;\n    out: while (true) {\n        var m = base54(++this.cname);\n        if (!is_identifier(m)) continue; // skip over \"do\"\n\n        // https://github.com/mishoo/UglifyJS2/issues/242 -- do not\n        // shadow a name excepted from mangling.\n        if (options.except.indexOf(m) >= 0) continue;\n\n        // we must ensure that the mangled name does not shadow a name\n        // from some parent scope that is referenced in this or in\n        // inner scopes.\n        for (var i = ext.length; --i >= 0;) {\n            var sym = ext[i];\n            var name = sym.mangled_name || (sym.unmangleable(options) && sym.name);\n            if (m == name) continue out;\n        }\n        return m;\n    }\n});\n\nAST_Function.DEFMETHOD(\"next_mangled\", function(options, def){\n    // #179, #326\n    // in Safari strict mode, something like (function x(x){...}) is a syntax error;\n    // a function expression's argument cannot shadow the function expression's name\n\n    var tricky_def = def.orig[0] instanceof AST_SymbolFunarg && this.name && this.name.definition();\n\n    // the function's mangled_name is null when keep_fnames is true\n    var tricky_name = tricky_def ? tricky_def.mangled_name || tricky_def.name : null;\n\n    while (true) {\n        var name = AST_Lambda.prototype.next_mangled.call(this, options, def);\n        if (!tricky_name || tricky_name != name)\n            return name;\n    }\n});\n\nAST_Symbol.DEFMETHOD(\"unmangleable\", function(options){\n    return this.definition().unmangleable(options);\n});\n\n// property accessors are not mangleable\nAST_SymbolAccessor.DEFMETHOD(\"unmangleable\", function(){\n    return true;\n});\n\n// labels are always mangleable\nAST_Label.DEFMETHOD(\"unmangleable\", function(){\n    return false;\n});\n\nAST_Symbol.DEFMETHOD(\"unreferenced\", function(){\n    return this.definition().references.length == 0\n        && !(this.scope.uses_eval || this.scope.uses_with);\n});\n\nAST_Symbol.DEFMETHOD(\"undeclared\", function(){\n    return this.definition().undeclared;\n});\n\nAST_LabelRef.DEFMETHOD(\"undeclared\", function(){\n    return false;\n});\n\nAST_Label.DEFMETHOD(\"undeclared\", function(){\n    return false;\n});\n\nAST_Symbol.DEFMETHOD(\"definition\", function(){\n    return this.thedef;\n});\n\nAST_Symbol.DEFMETHOD(\"global\", function(){\n    return this.definition().global;\n});\n\nAST_Toplevel.DEFMETHOD(\"_default_mangler_options\", function(options){\n    return defaults(options, {\n        eval        : false,\n        except      : [],\n        keep_fnames : false,\n        screw_ie8   : true,\n        sort        : false, // Ignored. Flag retained for backwards compatibility.\n        toplevel    : false,\n    });\n});\n\nAST_Toplevel.DEFMETHOD(\"mangle_names\", function(options){\n    options = this._default_mangler_options(options);\n\n    // Never mangle arguments\n    options.except.push('arguments');\n\n    // We only need to mangle declaration nodes.  Special logic wired\n    // into the code generator will display the mangled name if it's\n    // present (and for AST_SymbolRef-s it'll use the mangled name of\n    // the AST_SymbolDeclaration that it points to).\n    var lname = -1;\n    var to_mangle = [];\n\n    if (options.cache) {\n        this.globals.each(function(symbol){\n            if (options.except.indexOf(symbol.name) < 0) {\n                to_mangle.push(symbol);\n            }\n        });\n    }\n\n    var tw = new TreeWalker(function(node, descend){\n        if (node instanceof AST_LabeledStatement) {\n            // lname is incremented when we get to the AST_Label\n            var save_nesting = lname;\n            descend();\n            lname = save_nesting;\n            return true;        // don't descend again in TreeWalker\n        }\n        if (node instanceof AST_Scope) {\n            var p = tw.parent(), a = [];\n            node.variables.each(function(symbol){\n                if (options.except.indexOf(symbol.name) < 0) {\n                    a.push(symbol);\n                }\n            });\n            to_mangle.push.apply(to_mangle, a);\n            return;\n        }\n        if (node instanceof AST_Label) {\n            var name;\n            do name = base54(++lname); while (!is_identifier(name));\n            node.mangled_name = name;\n            return true;\n        }\n        if (options.screw_ie8 && node instanceof AST_SymbolCatch) {\n            to_mangle.push(node.definition());\n            return;\n        }\n    });\n    this.walk(tw);\n    to_mangle.forEach(function(def){ def.mangle(options) });\n\n    if (options.cache) {\n        options.cache.cname = this.cname;\n    }\n});\n\nAST_Toplevel.DEFMETHOD(\"compute_char_frequency\", function(options){\n    options = this._default_mangler_options(options);\n    var tw = new TreeWalker(function(node){\n        if (node instanceof AST_Constant)\n            base54.consider(node.print_to_string());\n        else if (node instanceof AST_Return)\n            base54.consider(\"return\");\n        else if (node instanceof AST_Throw)\n            base54.consider(\"throw\");\n        else if (node instanceof AST_Continue)\n            base54.consider(\"continue\");\n        else if (node instanceof AST_Break)\n            base54.consider(\"break\");\n        else if (node instanceof AST_Debugger)\n            base54.consider(\"debugger\");\n        else if (node instanceof AST_Directive)\n            base54.consider(node.value);\n        else if (node instanceof AST_While)\n            base54.consider(\"while\");\n        else if (node instanceof AST_Do)\n            base54.consider(\"do while\");\n        else if (node instanceof AST_If) {\n            base54.consider(\"if\");\n            if (node.alternative) base54.consider(\"else\");\n        }\n        else if (node instanceof AST_Var)\n            base54.consider(\"var\");\n        else if (node instanceof AST_Const)\n            base54.consider(\"const\");\n        else if (node instanceof AST_Lambda)\n            base54.consider(\"function\");\n        else if (node instanceof AST_For)\n            base54.consider(\"for\");\n        else if (node instanceof AST_ForIn)\n            base54.consider(\"for in\");\n        else if (node instanceof AST_Switch)\n            base54.consider(\"switch\");\n        else if (node instanceof AST_Case)\n            base54.consider(\"case\");\n        else if (node instanceof AST_Default)\n            base54.consider(\"default\");\n        else if (node instanceof AST_With)\n            base54.consider(\"with\");\n        else if (node instanceof AST_ObjectSetter)\n            base54.consider(\"set\" + node.key);\n        else if (node instanceof AST_ObjectGetter)\n            base54.consider(\"get\" + node.key);\n        else if (node instanceof AST_ObjectKeyVal)\n            base54.consider(node.key);\n        else if (node instanceof AST_New)\n            base54.consider(\"new\");\n        else if (node instanceof AST_This)\n            base54.consider(\"this\");\n        else if (node instanceof AST_Try)\n            base54.consider(\"try\");\n        else if (node instanceof AST_Catch)\n            base54.consider(\"catch\");\n        else if (node instanceof AST_Finally)\n            base54.consider(\"finally\");\n        else if (node instanceof AST_Symbol && node.unmangleable(options))\n            base54.consider(node.name);\n        else if (node instanceof AST_Unary || node instanceof AST_Binary)\n            base54.consider(node.operator);\n        else if (node instanceof AST_Dot)\n            base54.consider(node.property);\n    });\n    this.walk(tw);\n    base54.sort();\n});\n\nvar base54 = (function() {\n    var string = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_0123456789\";\n    var chars, frequency;\n    function reset() {\n        frequency = Object.create(null);\n        chars = string.split(\"\").map(function(ch){ return ch.charCodeAt(0) });\n        chars.forEach(function(ch){ frequency[ch] = 0 });\n    }\n    base54.consider = function(str){\n        for (var i = str.length; --i >= 0;) {\n            var code = str.charCodeAt(i);\n            if (code in frequency) ++frequency[code];\n        }\n    };\n    base54.sort = function() {\n        chars = mergeSort(chars, function(a, b){\n            if (is_digit(a) && !is_digit(b)) return 1;\n            if (is_digit(b) && !is_digit(a)) return -1;\n            return frequency[b] - frequency[a];\n        });\n    };\n    base54.reset = reset;\n    reset();\n    base54.get = function(){ return chars };\n    base54.freq = function(){ return frequency };\n    function base54(num) {\n        var ret = \"\", base = 54;\n        num++;\n        do {\n            num--;\n            ret += String.fromCharCode(chars[num % base]);\n            num = Math.floor(num / base);\n            base = 64;\n        } while (num > 0);\n        return ret;\n    };\n    return base54;\n})();\n\nAST_Toplevel.DEFMETHOD(\"scope_warnings\", function(options){\n    options = defaults(options, {\n        assign_to_global : true,\n        eval             : true,\n        func_arguments   : true,\n        nested_defuns    : true,\n        undeclared       : false, // this makes a lot of noise\n        unreferenced     : true,\n    });\n    var tw = new TreeWalker(function(node){\n        if (options.undeclared\n            && node instanceof AST_SymbolRef\n            && node.undeclared())\n        {\n            // XXX: this also warns about JS standard names,\n            // i.e. Object, Array, parseInt etc.  Should add a list of\n            // exceptions.\n            AST_Node.warn(\"Undeclared symbol: {name} [{file}:{line},{col}]\", {\n                name: node.name,\n                file: node.start.file,\n                line: node.start.line,\n                col: node.start.col\n            });\n        }\n        if (options.assign_to_global)\n        {\n            var sym = null;\n            if (node instanceof AST_Assign && node.left instanceof AST_SymbolRef)\n                sym = node.left;\n            else if (node instanceof AST_ForIn && node.init instanceof AST_SymbolRef)\n                sym = node.init;\n            if (sym\n                && (sym.undeclared()\n                    || (sym.global() && sym.scope !== sym.definition().scope))) {\n                AST_Node.warn(\"{msg}: {name} [{file}:{line},{col}]\", {\n                    msg: sym.undeclared() ? \"Accidental global?\" : \"Assignment to global\",\n                    name: sym.name,\n                    file: sym.start.file,\n                    line: sym.start.line,\n                    col: sym.start.col\n                });\n            }\n        }\n        if (options.eval\n            && node instanceof AST_SymbolRef\n            && node.undeclared()\n            && node.name == \"eval\") {\n            AST_Node.warn(\"Eval is used [{file}:{line},{col}]\", node.start);\n        }\n        if (options.unreferenced\n            && (node instanceof AST_SymbolDeclaration || node instanceof AST_Label)\n            && !(node instanceof AST_SymbolCatch)\n            && node.unreferenced()) {\n            AST_Node.warn(\"{type} {name} is declared but not referenced [{file}:{line},{col}]\", {\n                type: node instanceof AST_Label ? \"Label\" : \"Symbol\",\n                name: node.name,\n                file: node.start.file,\n                line: node.start.line,\n                col: node.start.col\n            });\n        }\n        if (options.func_arguments\n            && node instanceof AST_Lambda\n            && node.uses_arguments) {\n            AST_Node.warn(\"arguments used in function {name} [{file}:{line},{col}]\", {\n                name: node.name ? node.name.name : \"anonymous\",\n                file: node.start.file,\n                line: node.start.line,\n                col: node.start.col\n            });\n        }\n        if (options.nested_defuns\n            && node instanceof AST_Defun\n            && !(tw.parent() instanceof AST_Scope)) {\n            AST_Node.warn(\"Function {name} declared in nested statement \\\"{type}\\\" [{file}:{line},{col}]\", {\n                name: node.name.name,\n                type: tw.parent().TYPE,\n                file: node.start.file,\n                line: node.start.line,\n                col: node.start.col\n            });\n        }\n    });\n    this.walk(tw);\n});\n","/home/travis/build/npmtest/node-npmtest-uglify-js/node_modules/uglify-js/lib/sourcemap.js":"/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\n// a small wrapper around fitzgen's source-map library\nfunction SourceMap(options) {\n    options = defaults(options, {\n        file : null,\n        root : null,\n        orig : null,\n\n        orig_line_diff : 0,\n        dest_line_diff : 0,\n    });\n    var generator = new MOZ_SourceMap.SourceMapGenerator({\n        file       : options.file,\n        sourceRoot : options.root\n    });\n    var orig_map = options.orig && new MOZ_SourceMap.SourceMapConsumer(options.orig);\n\n    if (orig_map && Array.isArray(options.orig.sources)) {\n        orig_map._sources.toArray().forEach(function(source) {\n            var sourceContent = orig_map.sourceContentFor(source, true);\n            if (sourceContent) {\n                generator.setSourceContent(source, sourceContent);\n            }\n        });\n    }\n\n    function add(source, gen_line, gen_col, orig_line, orig_col, name) {\n        if (orig_map) {\n            var info = orig_map.originalPositionFor({\n                line: orig_line,\n                column: orig_col\n            });\n            if (info.source === null) {\n                return;\n            }\n            source = info.source;\n            orig_line = info.line;\n            orig_col = info.column;\n            name = info.name || name;\n        }\n        generator.addMapping({\n            generated : { line: gen_line + options.dest_line_diff, column: gen_col },\n            original  : { line: orig_line + options.orig_line_diff, column: orig_col },\n            source    : source,\n            name      : name\n        });\n    };\n    return {\n        add        : add,\n        get        : function() { return generator },\n        toString   : function() { return JSON.stringify(generator.toJSON()); }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-uglify-js/node_modules/uglify-js/lib/transform.js":"/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\n// Tree transformer helpers.\n\nfunction TreeTransformer(before, after) {\n    TreeWalker.call(this);\n    this.before = before;\n    this.after = after;\n}\nTreeTransformer.prototype = new TreeWalker;\n\n(function(undefined){\n\n    function _(node, descend) {\n        node.DEFMETHOD(\"transform\", function(tw, in_list){\n            var x, y;\n            tw.push(this);\n            if (tw.before) x = tw.before(this, descend, in_list);\n            if (x === undefined) {\n                if (!tw.after) {\n                    x = this;\n                    descend(x, tw);\n                } else {\n                    tw.stack[tw.stack.length - 1] = x = this;\n                    descend(x, tw);\n                    y = tw.after(x, in_list);\n                    if (y !== undefined) x = y;\n                }\n            }\n            tw.pop(this);\n            return x;\n        });\n    };\n\n    function do_list(list, tw) {\n        return MAP(list, function(node){\n            return node.transform(tw, true);\n        });\n    };\n\n    _(AST_Node, noop);\n\n    _(AST_LabeledStatement, function(self, tw){\n        self.label = self.label.transform(tw);\n        self.body = self.body.transform(tw);\n    });\n\n    _(AST_SimpleStatement, function(self, tw){\n        self.body = self.body.transform(tw);\n    });\n\n    _(AST_Block, function(self, tw){\n        self.body = do_list(self.body, tw);\n    });\n\n    _(AST_DWLoop, function(self, tw){\n        self.condition = self.condition.transform(tw);\n        self.body = self.body.transform(tw);\n    });\n\n    _(AST_For, function(self, tw){\n        if (self.init) self.init = self.init.transform(tw);\n        if (self.condition) self.condition = self.condition.transform(tw);\n        if (self.step) self.step = self.step.transform(tw);\n        self.body = self.body.transform(tw);\n    });\n\n    _(AST_ForIn, function(self, tw){\n        self.init = self.init.transform(tw);\n        self.object = self.object.transform(tw);\n        self.body = self.body.transform(tw);\n    });\n\n    _(AST_With, function(self, tw){\n        self.expression = self.expression.transform(tw);\n        self.body = self.body.transform(tw);\n    });\n\n    _(AST_Exit, function(self, tw){\n        if (self.value) self.value = self.value.transform(tw);\n    });\n\n    _(AST_LoopControl, function(self, tw){\n        if (self.label) self.label = self.label.transform(tw);\n    });\n\n    _(AST_If, function(self, tw){\n        self.condition = self.condition.transform(tw);\n        self.body = self.body.transform(tw);\n        if (self.alternative) self.alternative = self.alternative.transform(tw);\n    });\n\n    _(AST_Switch, function(self, tw){\n        self.expression = self.expression.transform(tw);\n        self.body = do_list(self.body, tw);\n    });\n\n    _(AST_Case, function(self, tw){\n        self.expression = self.expression.transform(tw);\n        self.body = do_list(self.body, tw);\n    });\n\n    _(AST_Try, function(self, tw){\n        self.body = do_list(self.body, tw);\n        if (self.bcatch) self.bcatch = self.bcatch.transform(tw);\n        if (self.bfinally) self.bfinally = self.bfinally.transform(tw);\n    });\n\n    _(AST_Catch, function(self, tw){\n        self.argname = self.argname.transform(tw);\n        self.body = do_list(self.body, tw);\n    });\n\n    _(AST_Definitions, function(self, tw){\n        self.definitions = do_list(self.definitions, tw);\n    });\n\n    _(AST_VarDef, function(self, tw){\n        self.name = self.name.transform(tw);\n        if (self.value) self.value = self.value.transform(tw);\n    });\n\n    _(AST_Lambda, function(self, tw){\n        if (self.name) self.name = self.name.transform(tw);\n        self.argnames = do_list(self.argnames, tw);\n        self.body = do_list(self.body, tw);\n    });\n\n    _(AST_Call, function(self, tw){\n        self.expression = self.expression.transform(tw);\n        self.args = do_list(self.args, tw);\n    });\n\n    _(AST_Seq, function(self, tw){\n        self.car = self.car.transform(tw);\n        self.cdr = self.cdr.transform(tw);\n    });\n\n    _(AST_Dot, function(self, tw){\n        self.expression = self.expression.transform(tw);\n    });\n\n    _(AST_Sub, function(self, tw){\n        self.expression = self.expression.transform(tw);\n        self.property = self.property.transform(tw);\n    });\n\n    _(AST_Unary, function(self, tw){\n        self.expression = self.expression.transform(tw);\n    });\n\n    _(AST_Binary, function(self, tw){\n        self.left = self.left.transform(tw);\n        self.right = self.right.transform(tw);\n    });\n\n    _(AST_Conditional, function(self, tw){\n        self.condition = self.condition.transform(tw);\n        self.consequent = self.consequent.transform(tw);\n        self.alternative = self.alternative.transform(tw);\n    });\n\n    _(AST_Array, function(self, tw){\n        self.elements = do_list(self.elements, tw);\n    });\n\n    _(AST_Object, function(self, tw){\n        self.properties = do_list(self.properties, tw);\n    });\n\n    _(AST_ObjectProperty, function(self, tw){\n        self.value = self.value.transform(tw);\n    });\n\n})();\n","/home/travis/build/npmtest/node-npmtest-uglify-js/node_modules/uglify-js/lib/utils.js":"/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nfunction array_to_hash(a) {\n    var ret = Object.create(null);\n    for (var i = 0; i < a.length; ++i)\n        ret[a[i]] = true;\n    return ret;\n};\n\nfunction slice(a, start) {\n    return Array.prototype.slice.call(a, start || 0);\n};\n\nfunction characters(str) {\n    return str.split(\"\");\n};\n\nfunction member(name, array) {\n    return array.indexOf(name) >= 0;\n};\n\nfunction find_if(func, array) {\n    for (var i = 0, n = array.length; i < n; ++i) {\n        if (func(array[i]))\n            return array[i];\n    }\n};\n\nfunction repeat_string(str, i) {\n    if (i <= 0) return \"\";\n    if (i == 1) return str;\n    var d = repeat_string(str, i >> 1);\n    d += d;\n    if (i & 1) d += str;\n    return d;\n};\n\nfunction configure_error_stack(fn) {\n    Object.defineProperty(fn.prototype, \"stack\", {\n        get: function() {\n            var err = new Error(this.message);\n            err.name = this.name;\n            try {\n                throw err;\n            } catch(e) {\n                return e.stack;\n            }\n        }\n    });\n}\n\nfunction DefaultsError(msg, defs) {\n    this.message = msg;\n    this.defs = defs;\n};\nDefaultsError.prototype = Object.create(Error.prototype);\nDefaultsError.prototype.constructor = DefaultsError;\nDefaultsError.prototype.name = \"DefaultsError\";\nconfigure_error_stack(DefaultsError);\n\nDefaultsError.croak = function(msg, defs) {\n    throw new DefaultsError(msg, defs);\n};\n\nfunction defaults(args, defs, croak) {\n    if (args === true)\n        args = {};\n    var ret = args || {};\n    if (croak) for (var i in ret) if (HOP(ret, i) && !HOP(defs, i))\n        DefaultsError.croak(\"`\" + i + \"` is not a supported option\", defs);\n    for (var i in defs) if (HOP(defs, i)) {\n        ret[i] = (args && HOP(args, i)) ? args[i] : defs[i];\n    }\n    return ret;\n};\n\nfunction merge(obj, ext) {\n    var count = 0;\n    for (var i in ext) if (HOP(ext, i)) {\n        obj[i] = ext[i];\n        count++;\n    }\n    return count;\n};\n\nfunction noop() {}\nfunction return_false() { return false; }\nfunction return_true() { return true; }\nfunction return_this() { return this; }\nfunction return_null() { return null; }\n\nvar MAP = (function(){\n    function MAP(a, f, backwards) {\n        var ret = [], top = [], i;\n        function doit() {\n            var val = f(a[i], i);\n            var is_last = val instanceof Last;\n            if (is_last) val = val.v;\n            if (val instanceof AtTop) {\n                val = val.v;\n                if (val instanceof Splice) {\n                    top.push.apply(top, backwards ? val.v.slice().reverse() : val.v);\n                } else {\n                    top.push(val);\n                }\n            }\n            else if (val !== skip) {\n                if (val instanceof Splice) {\n                    ret.push.apply(ret, backwards ? val.v.slice().reverse() : val.v);\n                } else {\n                    ret.push(val);\n                }\n            }\n            return is_last;\n        };\n        if (a instanceof Array) {\n            if (backwards) {\n                for (i = a.length; --i >= 0;) if (doit()) break;\n                ret.reverse();\n                top.reverse();\n            } else {\n                for (i = 0; i < a.length; ++i) if (doit()) break;\n            }\n        }\n        else {\n            for (i in a) if (HOP(a, i)) if (doit()) break;\n        }\n        return top.concat(ret);\n    };\n    MAP.at_top = function(val) { return new AtTop(val) };\n    MAP.splice = function(val) { return new Splice(val) };\n    MAP.last = function(val) { return new Last(val) };\n    var skip = MAP.skip = {};\n    function AtTop(val) { this.v = val };\n    function Splice(val) { this.v = val };\n    function Last(val) { this.v = val };\n    return MAP;\n})();\n\nfunction push_uniq(array, el) {\n    if (array.indexOf(el) < 0)\n        array.push(el);\n};\n\nfunction string_template(text, props) {\n    return text.replace(/\\{(.+?)\\}/g, function(str, p){\n        return props && props[p];\n    });\n};\n\nfunction remove(array, el) {\n    for (var i = array.length; --i >= 0;) {\n        if (array[i] === el) array.splice(i, 1);\n    }\n};\n\nfunction mergeSort(array, cmp) {\n    if (array.length < 2) return array.slice();\n    function merge(a, b) {\n        var r = [], ai = 0, bi = 0, i = 0;\n        while (ai < a.length && bi < b.length) {\n            cmp(a[ai], b[bi]) <= 0\n                ? r[i++] = a[ai++]\n                : r[i++] = b[bi++];\n        }\n        if (ai < a.length) r.push.apply(r, a.slice(ai));\n        if (bi < b.length) r.push.apply(r, b.slice(bi));\n        return r;\n    };\n    function _ms(a) {\n        if (a.length <= 1)\n            return a;\n        var m = Math.floor(a.length / 2), left = a.slice(0, m), right = a.slice(m);\n        left = _ms(left);\n        right = _ms(right);\n        return merge(left, right);\n    };\n    return _ms(array);\n};\n\nfunction set_difference(a, b) {\n    return a.filter(function(el){\n        return b.indexOf(el) < 0;\n    });\n};\n\nfunction set_intersection(a, b) {\n    return a.filter(function(el){\n        return b.indexOf(el) >= 0;\n    });\n};\n\n// this function is taken from Acorn [1], written by Marijn Haverbeke\n// [1] https://github.com/marijnh/acorn\nfunction makePredicate(words) {\n    if (!(words instanceof Array)) words = words.split(\" \");\n    var f = \"\", cats = [];\n    out: for (var i = 0; i < words.length; ++i) {\n        for (var j = 0; j < cats.length; ++j)\n            if (cats[j][0].length == words[i].length) {\n                cats[j].push(words[i]);\n                continue out;\n            }\n        cats.push([words[i]]);\n    }\n    function quote(word) {\n        return JSON.stringify(word).replace(/[\\u2028\\u2029]/g, function(s) {\n            switch (s) {\n                case \"\\u2028\": return \"\\\\u2028\";\n                case \"\\u2029\": return \"\\\\u2029\";\n            }\n            return s;\n        });\n    }\n    function compareTo(arr) {\n        if (arr.length == 1) return f += \"return str === \" + quote(arr[0]) + \";\";\n        f += \"switch(str){\";\n        for (var i = 0; i < arr.length; ++i) f += \"case \" + quote(arr[i]) + \":\";\n        f += \"return true}return false;\";\n    }\n    // When there are more than three length categories, an outer\n    // switch first dispatches on the lengths, to save on comparisons.\n    if (cats.length > 3) {\n        cats.sort(function(a, b) {return b.length - a.length;});\n        f += \"switch(str.length){\";\n        for (var i = 0; i < cats.length; ++i) {\n            var cat = cats[i];\n            f += \"case \" + cat[0].length + \":\";\n            compareTo(cat);\n        }\n        f += \"}\";\n        // Otherwise, simply generate a flat `switch` statement.\n    } else {\n        compareTo(words);\n    }\n    return new Function(\"str\", f);\n};\n\nfunction all(array, predicate) {\n    for (var i = array.length; --i >= 0;)\n        if (!predicate(array[i]))\n            return false;\n    return true;\n};\n\nfunction Dictionary() {\n    this._values = Object.create(null);\n    this._size = 0;\n};\nDictionary.prototype = {\n    set: function(key, val) {\n        if (!this.has(key)) ++this._size;\n        this._values[\"$\" + key] = val;\n        return this;\n    },\n    add: function(key, val) {\n        if (this.has(key)) {\n            this.get(key).push(val);\n        } else {\n            this.set(key, [ val ]);\n        }\n        return this;\n    },\n    get: function(key) { return this._values[\"$\" + key] },\n    del: function(key) {\n        if (this.has(key)) {\n            --this._size;\n            delete this._values[\"$\" + key];\n        }\n        return this;\n    },\n    has: function(key) { return (\"$\" + key) in this._values },\n    each: function(f) {\n        for (var i in this._values)\n            f(this._values[i], i.substr(1));\n    },\n    size: function() {\n        return this._size;\n    },\n    map: function(f) {\n        var ret = [];\n        for (var i in this._values)\n            ret.push(f(this._values[i], i.substr(1)));\n        return ret;\n    },\n    toObject: function() { return this._values }\n};\nDictionary.fromObject = function(obj) {\n    var dict = new Dictionary();\n    dict._size = merge(dict._values, obj);\n    return dict;\n};\n\nfunction HOP(obj, prop) {\n    return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n// return true if the node at the top of the stack (that means the\n// innermost node in the current output) is lexically the first in\n// a statement.\nfunction first_in_statement(stack) {\n    var node = stack.parent(-1);\n    for (var i = 0, p; p = stack.parent(i); i++) {\n        if (p instanceof AST_Statement && p.body === node)\n            return true;\n        if ((p instanceof AST_Seq           && p.car === node        ) ||\n            (p instanceof AST_Call          && p.expression === node && !(p instanceof AST_New) ) ||\n            (p instanceof AST_Dot           && p.expression === node ) ||\n            (p instanceof AST_Sub           && p.expression === node ) ||\n            (p instanceof AST_Conditional   && p.condition === node  ) ||\n            (p instanceof AST_Binary        && p.left === node       ) ||\n            (p instanceof AST_UnaryPostfix  && p.expression === node ))\n        {\n            node = p;\n        } else {\n            return false;\n        }\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-uglify-js/node_modules/uglify-js/tools/exports.js":"exports[\"Compressor\"] = Compressor;\nexports[\"DefaultsError\"] = DefaultsError;\nexports[\"Dictionary\"] = Dictionary;\nexports[\"JS_Parse_Error\"] = JS_Parse_Error;\nexports[\"MAP\"] = MAP;\nexports[\"OutputStream\"] = OutputStream;\nexports[\"SourceMap\"] = SourceMap;\nexports[\"TreeTransformer\"] = TreeTransformer;\nexports[\"TreeWalker\"] = TreeWalker;\nexports[\"base54\"] = base54;\nexports[\"defaults\"] = defaults;\nexports[\"mangle_properties\"] = mangle_properties;\nexports[\"merge\"] = merge;\nexports[\"parse\"] = parse;\nexports[\"push_uniq\"] = push_uniq;\nexports[\"string_template\"] = string_template;\nexports[\"tokenizer\"] = tokenizer;\nexports[\"is_identifier\"] = is_identifier;\nexports[\"SymbolDef\"] = SymbolDef;\n"}